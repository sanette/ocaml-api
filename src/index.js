var GENERAL_INDEX = [
["Complex", "Complex.html", "zero", "Complex.html#VALzero", "<div class=\"info\">\n<p>The complex number <code class=\"code\">0</code>.</p>\n\n</div>"],
["Float", "Float.html", "zero", "Float.html#VALzero", "<div class=\"info\">\n<p>The floating point 0.</p>\n\n</div>"],
["Int", "Int.html", "zero", "Int.html#VALzero", "<div class=\"info\">\n<p><code class=\"code\">zero</code> is the integer <code class=\"code\">0</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "zero", "Int32.html#VALzero", "<div class=\"info\">\n<p>The 32-bit integer 0.</p>\n\n</div>"],
["Int64", "Int64.html", "zero", "Int64.html#VALzero", "<div class=\"info\">\n<p>The 64-bit integer 0.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "zero", "Nativeint.html#VALzero", "<div class=\"info\">\n<p>The native integer 0.</p>\n\n</div>"],
["Thread", "Thread.html", "yield", "Thread.html#VALyield", "<div class=\"info\">\n<p>Re-schedule the calling thread without suspending it.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "write_substring", "ThreadUnix.html#VALwrite_substring", ""],
["Unix", "Unix.html", "write_substring", "Unix.html#VALwrite_substring", "<div class=\"info\">\n<p>Same as <code class=\"code\">write</code>, but take the data from a string instead of a byte\n    sequence.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "write_substring", "UnixLabels.html#VALwrite_substring", "<div class=\"info\">\n<p>Same as <code class=\"code\">write</code>, but take the data from a string instead of a byte\n    sequence.</p>\n\n</div>"],
["Arg", "Arg.html", "write_arg0", "Arg.html#VALwrite_arg0", "<div class=\"info\">\n<p>Identical to <a href=\"Arg.html#VALwrite_arg\"><code class=\"code\"><span class=\"constructor\">Arg</span>.write_arg</code></a> but uses the null character for terminator\n    instead of newline.</p>\n\n</div>"],
["Arg", "Arg.html", "write_arg", "Arg.html#VALwrite_arg", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.write_arg&nbsp;file&nbsp;args</code> writes the arguments <code class=\"code\">args</code> newline-terminated\n    into the file <code class=\"code\">file</code>.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "write", "ThreadUnix.html#VALwrite", ""],
["Unix", "Unix.html", "write", "Unix.html#VALwrite", "<div class=\"info\">\n<p><code class=\"code\">write&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> writes <code class=\"code\">len</code> bytes to descriptor <code class=\"code\">fd</code>,\n    taking them from byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code>\n    in <code class=\"code\">buff</code>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "write", "UnixLabels.html#VALwrite", "<div class=\"info\">\n<p><code class=\"code\">write&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> writes <code class=\"code\">len</code> bytes to descriptor <code class=\"code\">fd</code>,\n    taking them from byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code>\n    in <code class=\"code\">buff</code>.</p>\n\n</div>"],
["Event", "Event.html", "wrap_abort", "Event.html#VALwrap_abort", "<div class=\"info\">\n<p><code class=\"code\">wrap_abort&nbsp;ev&nbsp;fn</code> returns the event that performs\n   the same communications as <code class=\"code\">ev</code>, but if it is not selected\n   the function <code class=\"code\">fn</code> is called after the synchronization.</p>\n\n</div>"],
["Event", "Event.html", "wrap", "Event.html#VALwrap", "<div class=\"info\">\n<p><code class=\"code\">wrap&nbsp;ev&nbsp;fn</code> returns the event that performs the same communications\n   as <code class=\"code\">ev</code>, then applies the post-processing function <code class=\"code\">fn</code>\n   on the return value.</p>\n\n</div>"],
["Sys", "Sys.html", "word_size", "Sys.html#VALword_size", "<div class=\"info\">\n<p>Size of one word on the machine currently executing the OCaml\n    program, in bits: 32 or 64.</p>\n\n</div>"],
["Obj", "Obj.html", "with_tag", "Obj.html#VALwith_tag", ""],
["Lexing", "Lexing.html", "with_positions", "Lexing.html#VALwith_positions", "<div class=\"info\">\n<p>Tell whether the lexer buffer keeps track of position fields\n    <code class=\"code\">lex_curr_p</code> / <code class=\"code\">lex_start_p</code>, as determined by the corresponding\n    optional argument for functions that create lexer buffers\n    (whose default value is <code class=\"code\"><span class=\"keyword\">true</span></code>).</p>\n\n</div>"],
["Sys", "Sys.html", "win32", "Sys.html#VALwin32", "<div class=\"info\">\n<p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Win32\"</span></code>.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "widen", "CamlinternalOO.html#VALwiden", ""],
["ThreadUnix", "ThreadUnix.html", "waitpid", "ThreadUnix.html#VALwaitpid", ""],
["Unix", "Unix.html", "waitpid", "Unix.html#VALwaitpid", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALwait\"><code class=\"code\"><span class=\"constructor\">Unix</span>.wait</code></a>, but waits for the child process whose pid is given.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "waitpid", "UnixLabels.html#VALwaitpid", "<div class=\"info\">\n<p>Same as <a href=\"UnixLabels.html#VALwait\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.wait</code></a>, but waits for the child process whose pid\n   is given.</p>\n\n</div>"],
["Thread", "Thread.html", "wait_write", "Thread.html#VALwait_write", "<div class=\"info\">\n<p>This function does nothing in this implementation.</p>\n\n</div>"],
["Thread", "Thread.html", "wait_timed_write", "Thread.html#VALwait_timed_write", "<div class=\"info\">\n<p>Suspend the execution of the calling thread until at least\n   one character or EOF is available for reading (<code class=\"code\">wait_read</code>) or\n   one character can be written without blocking (<code class=\"code\">wait_write</code>)\n   on the given Unix file descriptor.</p>\n\n</div>"],
["Thread", "Thread.html", "wait_timed_read", "Thread.html#VALwait_timed_read", "<div class=\"info\">\n<p>See <a href=\"Thread.html#VALwait_timed_write\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_timed_write</code></a>.</p>\n\n</div>"],
["Thread", "Thread.html", "wait_signal", "Thread.html#VALwait_signal", "<div class=\"info\">\n<p><code class=\"code\">wait_signal&nbsp;sigs</code> suspends the execution of the calling thread\n   until the process receives one of the signals specified in the\n   list <code class=\"code\">sigs</code>.</p>\n\n</div>"],
["Thread", "Thread.html", "wait_read", "Thread.html#VALwait_read", "<div class=\"info\">\n<p>See <a href=\"Thread.html#VALwait_write\"><code class=\"code\"><span class=\"constructor\">Thread</span>.wait_write</code></a>.</p>\n\n</div>"],
["Thread", "Thread.html", "wait_pid", "Thread.html#VALwait_pid", "<div class=\"info\">\n<p><code class=\"code\">wait_pid&nbsp;p</code> suspends the execution of the calling thread\n   until the process specified by the process identifier <code class=\"code\">p</code>\n   terminates.</p>\n\n</div>"],
["Condition", "Condition.html", "wait", "Condition.html#VALwait", "<div class=\"info\">\n<p><code class=\"code\">wait&nbsp;c&nbsp;m</code> atomically unlocks the mutex <code class=\"code\">m</code> and suspends the\n   calling process on the condition variable <code class=\"code\">c</code>.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "wait", "ThreadUnix.html#VALwait", ""],
["Unix", "Unix.html", "wait", "Unix.html#VALwait", "<div class=\"info\">\n<p>Wait until one of the children processes die, and return its pid\n   and termination status.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "wait", "UnixLabels.html#VALwait", "<div class=\"info\">\n<p>Wait until one of the children processes die, and return its pid\n   and termination status.</p>\n\n</div>"],
["Option", "Option.html", "value", "Option.html#VALvalue", "<div class=\"info\">\n<p><code class=\"code\">value&nbsp;o&nbsp;~default</code> is <code class=\"code\">v</code> if <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> and <code class=\"code\">default</code> otherwise.</p>\n\n</div>"],
["Result", "Result.html", "value", "Result.html#VALvalue", "<div class=\"info\">\n<p><code class=\"code\">value&nbsp;r&nbsp;~default</code> is <code class=\"code\">v</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;v</code> and <code class=\"code\">default</code> otherwise.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "valid_float_lexem", "Pervasives.html#VALvalid_float_lexem", ""],
["Unix", "Unix.html", "utimes", "Unix.html#VALutimes", "<div class=\"info\">\n<p>Set the last access time (second arg) and last modification time\n   (third arg) for a file.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "utimes", "UnixLabels.html#VALutimes", "<div class=\"info\">\n<p>Set the last access time (second arg) and last modification time\n   (third arg) for a file.</p>\n\n</div>"],
["Printexc", "Printexc.html", "use_printers", "Printexc.html#VALuse_printers", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.use_printers&nbsp;e</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if there are no registered\n    printers and <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;s</code> with else as the resulting string otherwise.</p>\n\n</div>"],
["Arg", "Arg.html", "usage_string", "Arg.html#VALusage_string", "<div class=\"info\">\n<p>Returns the message that would have been printed by <a href=\"Arg.html#VALusage\"><code class=\"code\"><span class=\"constructor\">Arg</span>.usage</code></a>,\n    if provided with the same parameters.</p>\n\n</div>"],
["Arg", "Arg.html", "usage", "Arg.html#VALusage", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.usage&nbsp;speclist&nbsp;usage_msg</code> prints to standard error\n    an error message that includes the list of valid options.</p>\n\n</div>"],
["Bytes", "Bytes.html", "uppercase_ascii", "Bytes.html#VALuppercase_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "uppercase_ascii", "BytesLabels.html#VALuppercase_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n\n</div>"],
["Char", "Char.html", "uppercase_ascii", "Char.html#VALuppercase_ascii", "<div class=\"info\">\n<p>Convert the given character to its equivalent uppercase character,\n   using the US-ASCII character set.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "uppercase_ascii", "StringLabels.html#VALuppercase_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n\n</div>"],
["String", "String.html", "uppercase_ascii", "String.html#VALuppercase_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, using the US-ASCII character set.</p>\n\n</div>"],
["Bytes", "Bytes.html", "uppercase", "Bytes.html#VALuppercase", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n\n</span></div>"],
["BytesLabels", "BytesLabels.html", "uppercase", "BytesLabels.html#VALuppercase", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n\n</span></div>"],
["Char", "Char.html", "uppercase", "Char.html#VALuppercase", "<div class=\"info\">\n<span class=\"deprecated\"><p>Convert the given character to its equivalent uppercase character,\n   using the ISO Latin-1 (8859-1) character set.</p>\n\n</span></div>"],
["StringLabels", "StringLabels.html", "uppercase", "StringLabels.html#VALuppercase", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n\n</span></div>"],
["String", "String.html", "uppercase", "String.html#VALuppercase", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with all lowercase letters\n   translated to uppercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n\n</span></div>"],
["CamlinternalMod", "CamlinternalMod.html", "update_mod", "CamlinternalMod.html#VALupdate_mod", ""],
["Map.S", "Map.S.html", "update", "Map.S.html#VALupdate", "<div class=\"info\">\n<p><code class=\"code\">update&nbsp;x&nbsp;f&nbsp;m</code> returns a map containing the same bindings as\n        <code class=\"code\">m</code>, except for the binding of <code class=\"code\">x</code>.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "update", "MoreLabels.Map.S.html#VALupdate", ""],
["Int32", "Int32.html", "unsigned_to_int", "Int32.html#VALunsigned_to_int", "<div class=\"info\">\n<p>Same as <a href=\"Int32.html#VALto_int\"><code class=\"code\"><span class=\"constructor\">Int32</span>.to_int</code></a>, but interprets the argument as an <em>unsigned</em> integer.</p>\n\n</div>"],
["Int64", "Int64.html", "unsigned_to_int", "Int64.html#VALunsigned_to_int", "<div class=\"info\">\n<p>Same as <a href=\"Int64.html#VALto_int\"><code class=\"code\"><span class=\"constructor\">Int64</span>.to_int</code></a>, but interprets the argument as an <em>unsigned</em> integer.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "unsigned_to_int", "Nativeint.html#VALunsigned_to_int", "<div class=\"info\">\n<p>Same as <a href=\"Nativeint.html#VALto_int\"><code class=\"code\"><span class=\"constructor\">Nativeint</span>.to_int</code></a>, but interprets the argument as an <em>unsigned</em> integer.</p>\n\n</div>"],
["Int32", "Int32.html", "unsigned_rem", "Int32.html#VALunsigned_rem", "<div class=\"info\">\n<p>Same as <a href=\"Int32.html#VALrem\"><code class=\"code\"><span class=\"constructor\">Int32</span>.rem</code></a>, except that arguments and result are interpreted as <em>    unsigned</em> 32-bit integers.</p>\n\n</div>"],
["Int64", "Int64.html", "unsigned_rem", "Int64.html#VALunsigned_rem", "<div class=\"info\">\n<p>Same as <a href=\"Int64.html#VALrem\"><code class=\"code\"><span class=\"constructor\">Int64</span>.rem</code></a>, except that arguments and result are interpreted as <em>    unsigned</em> 64-bit integers.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "unsigned_rem", "Nativeint.html#VALunsigned_rem", "<div class=\"info\">\n<p>Same as <a href=\"Nativeint.html#VALrem\"><code class=\"code\"><span class=\"constructor\">Nativeint</span>.rem</code></a>, except that arguments and result are interpreted as <em>    unsigned</em> native integers.</p>\n\n</div>"],
["Int32", "Int32.html", "unsigned_div", "Int32.html#VALunsigned_div", "<div class=\"info\">\n<p>Same as <a href=\"Int32.html#VALdiv\"><code class=\"code\"><span class=\"constructor\">Int32</span>.div</code></a>, except that arguments and result are interpreted as <em>    unsigned</em> 32-bit integers.</p>\n\n</div>"],
["Int64", "Int64.html", "unsigned_div", "Int64.html#VALunsigned_div", "<div class=\"info\">\n<p>Same as <a href=\"Int64.html#VALdiv\"><code class=\"code\"><span class=\"constructor\">Int64</span>.div</code></a>, except that arguments and result are interpreted as <em>    unsigned</em> 64-bit integers.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "unsigned_div", "Nativeint.html#VALunsigned_div", "<div class=\"info\">\n<p>Same as <a href=\"Nativeint.html#VALdiv\"><code class=\"code\"><span class=\"constructor\">Nativeint</span>.div</code></a>, except that arguments and result are interpreted as <em>    unsigned</em> native integers.</p>\n\n</div>"],
["Int32", "Int32.html", "unsigned_compare", "Int32.html#VALunsigned_compare", "<div class=\"info\">\n<p>Same as <a href=\"Int32.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">Int32</span>.compare</code></a>, except that arguments are interpreted as <em>unsigned</em>\n    32-bit integers.</p>\n\n</div>"],
["Int64", "Int64.html", "unsigned_compare", "Int64.html#VALunsigned_compare", "<div class=\"info\">\n<p>Same as <a href=\"Int64.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">Int64</span>.compare</code></a>, except that arguments are interpreted as <em>unsigned</em>\n    64-bit integers.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "unsigned_compare", "Nativeint.html#VALunsigned_compare", "<div class=\"info\">\n<p>Same as <a href=\"Nativeint.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">Nativeint</span>.compare</code></a>, except that arguments are interpreted as <em>unsigned</em>\n    native integers.</p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "unset_key2", "Ephemeron.K2.html#VALunset_key2", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "unset_key1", "Ephemeron.K2.html#VALunset_key1", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "unset_key", "Ephemeron.K1.html#VALunset_key", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key&nbsp;eph&nbsp;el</code> sets the key of <code class=\"code\">eph</code> to be an\n      empty key.</p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "unset_key", "Ephemeron.Kn.html#VALunset_key", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "unset_key", "Obj.Ephemeron.html#VALunset_key", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_key</code></a></p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "unset_data", "Ephemeron.K1.html#VALunset_data", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data&nbsp;eph&nbsp;el</code> sets the key of <code class=\"code\">eph</code> to be an\n      empty key.</p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "unset_data", "Ephemeron.K2.html#VALunset_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data</code></a></p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "unset_data", "Ephemeron.Kn.html#VALunset_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "unset_data", "Obj.Ephemeron.html#VALunset_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALunset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.unset_data</code></a></p>\n\n</div>"],
["Bytes", "Bytes.html", "unsafe_to_string", "Bytes.html#VALunsafe_to_string", "<div class=\"info\">\n<p>Unsafely convert a byte sequence into a string.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "unsafe_set", "Bigarray.Array1.html#VALunsafe_set", "<div class=\"info\">\n<p>Like <a href=\"Bigarray.Array1.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array1</span>.set</code></a>, but bounds checking is not always performed.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "unsafe_set", "Bigarray.Array2.html#VALunsafe_set", "<div class=\"info\">\n<p>Like <a href=\"Bigarray.Array2.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array2</span>.set</code></a>, but bounds checking is not always\n      performed.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "unsafe_set", "Bigarray.Array3.html#VALunsafe_set", "<div class=\"info\">\n<p>Like <a href=\"Bigarray.Array3.html#VALset\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array3</span>.set</code></a>, but bounds checking is not always\n      performed.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "unsafe_set", "Float.Array.html#VALunsafe_set", ""],
["Float.ArrayLabels", "Float.ArrayLabels.html", "unsafe_set", "Float.ArrayLabels.html#VALunsafe_set", ""],
["Bytes", "Bytes.html", "unsafe_of_string", "Bytes.html#VALunsafe_of_string", "<div class=\"info\">\n<p>Unsafely convert a shared string to a byte sequence that should\n    not be mutated.</p>\n\n</div>"],
["Unix", "Unix.html", "unsafe_getenv", "Unix.html#VALunsafe_getenv", "<div class=\"info\">\n<p>Return the value associated to a variable in the process\n   environment.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "unsafe_getenv", "UnixLabels.html#VALunsafe_getenv", "<div class=\"info\">\n<p>Return the value associated to a variable in the process\n   environment.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "unsafe_get", "Bigarray.Array1.html#VALunsafe_get", "<div class=\"info\">\n<p>Like <a href=\"Bigarray.Array1.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array1</span>.get</code></a>, but bounds checking is not always performed.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "unsafe_get", "Bigarray.Array2.html#VALunsafe_get", "<div class=\"info\">\n<p>Like <a href=\"Bigarray.Array2.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array2</span>.get</code></a>, but bounds checking is not always\n      performed.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "unsafe_get", "Bigarray.Array3.html#VALunsafe_get", "<div class=\"info\">\n<p>Like <a href=\"Bigarray.Array3.html#VALget\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.<span class=\"constructor\">Array3</span>.get</code></a>, but bounds checking is not always\n      performed.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "unsafe_get", "Float.Array.html#VALunsafe_get", ""],
["Float.ArrayLabels", "Float.ArrayLabels.html", "unsafe_get", "Float.ArrayLabels.html#VALunsafe_get", ""],
["Unix", "Unix.html", "unsafe_environment", "Unix.html#VALunsafe_environment", "<div class=\"info\">\n<p>Return the process environment, as an array of strings with the\n    format ``variable=value''.</p>\n\n</div>"],
["Obj", "Obj.html", "unmarshal", "Obj.html#VALunmarshal", ""],
["Mutex", "Mutex.html", "unlock", "Mutex.html#VALunlock", "<div class=\"info\">\n<p>Unlock the given mutex.</p>\n\n</div>"],
["Unix", "Unix.html", "unlink", "Unix.html#VALunlink", "<div class=\"info\">\n<p>Removes the named file.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "unlink", "UnixLabels.html#VALunlink", "<div class=\"info\">\n<p>Removes the named file</p>\n\n</div>"],
["Sys", "Sys.html", "unix", "Sys.html#VALunix", "<div class=\"info\">\n<p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Unix\"</span></code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "union", "Map.S.html#VALunion", "<div class=\"info\">\n<p><code class=\"code\">union&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is the union of keys\n        of <code class=\"code\">m1</code> and of <code class=\"code\">m2</code>.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "union", "MoreLabels.Map.S.html#VALunion", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "union", "MoreLabels.Set.S.html#VALunion", ""],
["Set.S", "Set.S.html", "union", "Set.S.html#VALunion", "<div class=\"info\">\n<p>Set union.</p>\n\n</div>"],
["Scanf", "Scanf.html", "unescaped", "Scanf.html#VALunescaped", "<div class=\"info\">\n<p><code class=\"code\">unescaped&nbsp;s</code> return a copy of <code class=\"code\">s</code> with escape sequences (according to\n    the lexical conventions of OCaml) replaced by their corresponding special\n    characters.</p>\n\n</div>"],
["Bytes", "Bytes.html", "uncapitalize_ascii", "Bytes.html#VALuncapitalize_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "uncapitalize_ascii", "BytesLabels.html#VALuncapitalize_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "uncapitalize_ascii", "StringLabels.html#VALuncapitalize_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n\n</div>"],
["String", "String.html", "uncapitalize_ascii", "String.html#VALuncapitalize_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with the first character set to lowercase,\n   using the US-ASCII character set.</p>\n\n</div>"],
["Bytes", "Bytes.html", "uncapitalize", "Bytes.html#VALuncapitalize", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n\n</span></div>"],
["BytesLabels", "BytesLabels.html", "uncapitalize", "BytesLabels.html#VALuncapitalize", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n\n</span></div>"],
["StringLabels", "StringLabels.html", "uncapitalize", "StringLabels.html#VALuncapitalize", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n\n</span></div>"],
["String", "String.html", "uncapitalize", "String.html#VALuncapitalize", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to lowercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n\n</span></div>"],
["Obj", "Obj.html", "unaligned_tag", "Obj.html#VALunaligned_tag", ""],
["Unix", "Unix.html", "umask", "Unix.html#VALumask", "<div class=\"info\">\n<p>Set the process's file mode creation mask, and return the previous\n    mask.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "umask", "UnixLabels.html#VALumask", "<div class=\"info\">\n<p>Set the process's file mode creation mask, and return the previous\n    mask.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "type_format", "CamlinternalFormat.html#VALtype_format", ""],
["Mutex", "Mutex.html", "try_lock", "Mutex.html#VALtry_lock", "<div class=\"info\">\n<p>Same as <a href=\"Mutex.html#VALlock\"><code class=\"code\"><span class=\"constructor\">Mutex</span>.lock</code></a>, but does not suspend the calling thread if\n   the mutex is already locked: just return <code class=\"code\"><span class=\"keyword\">false</span></code> immediately\n   in that case.</p>\n\n</div>"],
["Buffer", "Buffer.html", "truncate", "Buffer.html#VALtruncate", "<div class=\"info\">\n<p><code class=\"code\">truncate&nbsp;b&nbsp;len</code> truncates the length of <code class=\"code\">b</code> to <code class=\"code\">len</code>\n  Note: the internal byte sequence is not shortened.</p>\n\n</div>"],
["Obj", "Obj.html", "truncate", "Obj.html#VALtruncate", ""],
["Pervasives", "Pervasives.html", "truncate", "Pervasives.html#VALtruncate", ""],
["Unix", "Unix.html", "truncate", "Unix.html#VALtruncate", "<div class=\"info\">\n<p>Truncates the named file to the given size.</p>\n\n</div>"],
["Unix.LargeFile", "Unix.LargeFile.html", "truncate", "Unix.LargeFile.html#VALtruncate", "<div class=\"info\">\n<p>See <a href=\"Unix.html#VALtruncate\"><code class=\"code\"><span class=\"constructor\">Unix</span>.truncate</code></a>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "truncate", "UnixLabels.html#VALtruncate", "<div class=\"info\">\n<p>Truncates the named file to the given size.</p>\n\n</div>"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "truncate", "UnixLabels.LargeFile.html#VALtruncate", ""],
["Float", "Float.html", "trunc", "Float.html#VALtrunc", "<div class=\"info\">\n<p><code class=\"code\">trunc&nbsp;x</code> rounds <code class=\"code\">x</code> to the nearest integer whose absolute value is\n   less than or equal to <code class=\"code\">x</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "trim", "Bytes.html#VALtrim", "<div class=\"info\">\n<p>Return a copy of the argument, without leading and trailing\n    whitespace.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "trim", "BytesLabels.html#VALtrim", "<div class=\"info\">\n<p>Return a copy of the argument, without leading and trailing\n    whitespace.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "trim", "StringLabels.html#VALtrim", "<div class=\"info\">\n<p>Return a copy of the argument, without leading and trailing\n   whitespace.</p>\n\n</div>"],
["String", "String.html", "trim", "String.html#VALtrim", "<div class=\"info\">\n<p>Return a copy of the argument, without leading and trailing\n   whitespace.</p>\n\n</div>"],
["Queue", "Queue.html", "transfer", "Queue.html#VALtransfer", "<div class=\"info\">\n<p><code class=\"code\">transfer&nbsp;q1&nbsp;q2</code> adds all of <code class=\"code\">q1</code>'s elements at the end of\n   the queue <code class=\"code\">q2</code>, then clears <code class=\"code\">q1</code>.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "trans", "CamlinternalFormat.html#VALtrans", ""],
["Marshal", "Marshal.html", "total_size", "Marshal.html#VALtotal_size", "<div class=\"info\">\n<p>See <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a>.</p>\n\n</div>"],
["Stack", "Stack.html", "top_opt", "Stack.html#VALtop_opt", "<div class=\"info\">\n<p><code class=\"code\">top_opt&nbsp;s</code> returns the topmost element in stack <code class=\"code\">s</code>,\n   or <code class=\"code\"><span class=\"constructor\">None</span></code> if the stack is empty.</p>\n\n</div>"],
["Queue", "Queue.html", "top", "Queue.html#VALtop", "<div class=\"info\">\n<p><code class=\"code\">top</code> is a synonym for <code class=\"code\">peek</code>.</p>\n\n</div>"],
["Stack", "Stack.html", "top", "Stack.html#VALtop", "<div class=\"info\">\n<p><code class=\"code\">top&nbsp;s</code> returns the topmost element in stack <code class=\"code\">s</code>,\n   or raises <a href=\"Stack.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Stack</span>.<span class=\"constructor\">Empty</span></code></a> if the stack is empty.</p>\n\n</div>"],
["Printexc", "Printexc.html", "to_string_default", "Printexc.html#VALto_string_default", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.to_string_default&nbsp;e</code> returns a string representation of the\n    exception <code class=\"code\">e</code>, ignoring all registered exception printers.</p>\n\n</div>"],
["Bool", "Bool.html", "to_string", "Bool.html#VALto_string", "<div class=\"info\">\n<p><code class=\"code\">to_string&nbsp;b</code> is <code class=\"code\"><span class=\"string\">\"true\"</span></code> if <code class=\"code\">b</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> and <code class=\"code\"><span class=\"string\">\"false\"</span></code> if <code class=\"code\">b</code> is\n    <code class=\"code\"><span class=\"keyword\">false</span></code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "to_string", "Bytes.html#VALto_string", "<div class=\"info\">\n<p>Return a new string that contains the same bytes as the given byte\n    sequence.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "to_string", "BytesLabels.html#VALto_string", "<div class=\"info\">\n<p>Return a new string that contains the same bytes as the given byte\n    sequence.</p>\n\n</div>"],
["Float", "Float.html", "to_string", "Float.html#VALto_string", "<div class=\"info\">\n<p>Return the string representation of a floating-point number.</p>\n\n</div>"],
["Int", "Int.html", "to_string", "Int.html#VALto_string", "<div class=\"info\">\n<p><code class=\"code\">to_string&nbsp;x</code> is the written representation of <code class=\"code\">x</code> in decimal.</p>\n\n</div>"],
["Int32", "Int32.html", "to_string", "Int32.html#VALto_string", "<div class=\"info\">\n<p>Return the string representation of its argument, in signed decimal.</p>\n\n</div>"],
["Int64", "Int64.html", "to_string", "Int64.html#VALto_string", "<div class=\"info\">\n<p>Return the string representation of its argument, in decimal.</p>\n\n</div>"],
["Marshal", "Marshal.html", "to_string", "Marshal.html#VALto_string", "<div class=\"info\">\n<p>Same as <code class=\"code\">to_bytes</code> but return the result as a string instead of\n    a byte sequence.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "to_string", "Nativeint.html#VALto_string", "<div class=\"info\">\n<p>Return the string representation of its argument, in decimal.</p>\n\n</div>"],
["Printexc", "Printexc.html", "to_string", "Printexc.html#VALto_string", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.to_string&nbsp;e</code> returns a string representation of\n   the exception <code class=\"code\">e</code>.</p>\n\n</div>"],
["Unit", "Unit.html", "to_string", "Unit.html#VALto_string", "<div class=\"info\">\n<p><code class=\"code\">to_string&nbsp;b</code> is <code class=\"code\"><span class=\"string\">\"()\"</span></code>.</p>\n\n</div>"],
["Array", "Array.html", "to_seqi", "Array.html#VALto_seqi", "<div class=\"info\">\n<p>Iterate on the array, in increasing order, yielding indices along elements.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "to_seqi", "ArrayLabels.html#VALto_seqi", "<div class=\"info\">\n<p>Iterate on the array, in increasing order, yielding indices along elements</p>\n\n</div>"],
["Buffer", "Buffer.html", "to_seqi", "Buffer.html#VALto_seqi", "<div class=\"info\">\n<p>Iterate on the buffer, in increasing order, yielding indices along chars.</p>\n\n</div>"],
["Bytes", "Bytes.html", "to_seqi", "Bytes.html#VALto_seqi", "<div class=\"info\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "to_seqi", "BytesLabels.html#VALto_seqi", "<div class=\"info\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "to_seqi", "Float.Array.html#VALto_seqi", "<div class=\"info\">\n<p>Iterate on the floatarray, in increasing order, yielding indices along\n      elements.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "to_seqi", "Float.ArrayLabels.html#VALto_seqi", ""],
["StringLabels", "StringLabels.html", "to_seqi", "StringLabels.html#VALto_seqi", "<div class=\"info\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n\n</div>"],
["String", "String.html", "to_seqi", "String.html#VALto_seqi", "<div class=\"info\">\n<p>Iterate on the string, in increasing order, yielding indices along chars</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "to_seq_values", "Hashtbl.html#VALto_seq_values", "<div class=\"info\">\n<p>Same as <code class=\"code\"><span class=\"constructor\">Seq</span>.map&nbsp;snd&nbsp;(to_seq&nbsp;m)</code></p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "to_seq_values", "Hashtbl.S.html#VALto_seq_values", "<div class=\"info\">\n</div>"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "to_seq_values", "Hashtbl.SeededS.html#VALto_seq_values", "<div class=\"info\">\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "to_seq_values", "MoreLabels.Hashtbl.html#VALto_seq_values", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "to_seq_values", "MoreLabels.Hashtbl.S.html#VALto_seq_values", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "to_seq_values", "MoreLabels.Hashtbl.SeededS.html#VALto_seq_values", ""],
["Hashtbl", "Hashtbl.html", "to_seq_keys", "Hashtbl.html#VALto_seq_keys", "<div class=\"info\">\n<p>Same as <code class=\"code\"><span class=\"constructor\">Seq</span>.map&nbsp;fst&nbsp;(to_seq&nbsp;m)</code></p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "to_seq_keys", "Hashtbl.S.html#VALto_seq_keys", "<div class=\"info\">\n</div>"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "to_seq_keys", "Hashtbl.SeededS.html#VALto_seq_keys", "<div class=\"info\">\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "to_seq_keys", "MoreLabels.Hashtbl.html#VALto_seq_keys", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "to_seq_keys", "MoreLabels.Hashtbl.S.html#VALto_seq_keys", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "to_seq_keys", "MoreLabels.Hashtbl.SeededS.html#VALto_seq_keys", ""],
["Map.S", "Map.S.html", "to_seq_from", "Map.S.html#VALto_seq_from", "<div class=\"info\">\n<p><code class=\"code\">to_seq_from&nbsp;k&nbsp;m</code> iterates on a subset of the bindings of <code class=\"code\">m</code>,\n        in ascending order of keys, from key <code class=\"code\">k</code> or above.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "to_seq_from", "MoreLabels.Map.S.html#VALto_seq_from", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "to_seq_from", "MoreLabels.Set.S.html#VALto_seq_from", ""],
["Set.S", "Set.S.html", "to_seq_from", "Set.S.html#VALto_seq_from", "<div class=\"info\">\n<p><code class=\"code\">to_seq_from&nbsp;x&nbsp;s</code> iterates on a subset of the elements of <code class=\"code\">s</code>\n        in ascending order, from <code class=\"code\">x</code> or above.</p>\n\n</div>"],
["Array", "Array.html", "to_seq", "Array.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the array, in increasing order.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "to_seq", "ArrayLabels.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the array, in increasing order</p>\n\n</div>"],
["Buffer", "Buffer.html", "to_seq", "Buffer.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the buffer, in increasing order.</p>\n\n</div>"],
["Bytes", "Bytes.html", "to_seq", "Bytes.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the string, in increasing index order.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "to_seq", "BytesLabels.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the string, in increasing index order.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "to_seq", "Float.Array.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the floatarray, in increasing order.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "to_seq", "Float.ArrayLabels.html#VALto_seq", ""],
["Hashtbl", "Hashtbl.html", "to_seq", "Hashtbl.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the whole table.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "to_seq", "Hashtbl.S.html#VALto_seq", "<div class=\"info\">\n</div>"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "to_seq", "Hashtbl.SeededS.html#VALto_seq", "<div class=\"info\">\n</div>"],
["List", "List.html", "to_seq", "List.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the list</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "to_seq", "ListLabels.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the list</p>\n\n</div>"],
["Map.S", "Map.S.html", "to_seq", "Map.S.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the whole map, in ascending order of keys</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "to_seq", "MoreLabels.Hashtbl.html#VALto_seq", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "to_seq", "MoreLabels.Hashtbl.S.html#VALto_seq", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "to_seq", "MoreLabels.Hashtbl.SeededS.html#VALto_seq", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "to_seq", "MoreLabels.Map.S.html#VALto_seq", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "to_seq", "MoreLabels.Set.S.html#VALto_seq", ""],
["Option", "Option.html", "to_seq", "Option.html#VALto_seq", "<div class=\"info\">\n<p><code class=\"code\">to_seq&nbsp;o</code> is <code class=\"code\">o</code> as a sequence.</p>\n\n</div>"],
["Queue", "Queue.html", "to_seq", "Queue.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the queue, in front-to-back order.</p>\n\n</div>"],
["Result", "Result.html", "to_seq", "Result.html#VALto_seq", "<div class=\"info\">\n<p><code class=\"code\">to_seq&nbsp;r</code> is <code class=\"code\">r</code> as a sequence.</p>\n\n</div>"],
["Set.S", "Set.S.html", "to_seq", "Set.S.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the whole set, in ascending order</p>\n\n</div>"],
["Stack", "Stack.html", "to_seq", "Stack.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the stack, top to bottom.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "to_seq", "StringLabels.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the string, in increasing index order.</p>\n\n</div>"],
["String", "String.html", "to_seq", "String.html#VALto_seq", "<div class=\"info\">\n<p>Iterate on the string, in increasing index order.</p>\n\n</div>"],
["Option", "Option.html", "to_result", "Option.html#VALto_result", "<div class=\"info\">\n<p><code class=\"code\">to_result&nbsp;~none&nbsp;o</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;v</code> if <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> and <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;none</code>\n    otherwise.</p>\n\n</div>"],
["Result", "Result.html", "to_option", "Result.html#VALto_option", "<div class=\"info\">\n<p><code class=\"code\">to_option&nbsp;r</code> is <code class=\"code\">r</code> as an option, mapping <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;v</code> to <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> and\n    <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;_</code> to <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n\n</div>"],
["Int64", "Int64.html", "to_nativeint", "Int64.html#VALto_nativeint", "<div class=\"info\">\n<p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a\n   native integer.</p>\n\n</div>"],
["Array", "Array.html", "to_list", "Array.html#VALto_list", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.to_list&nbsp;a</code> returns the list of all the elements of <code class=\"code\">a</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "to_list", "ArrayLabels.html#VALto_list", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.to_list&nbsp;a</code> returns the list of all the elements of <code class=\"code\">a</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "to_list", "Float.Array.html#VALto_list", "<div class=\"info\">\n<p><code class=\"code\">to_list&nbsp;a</code> returns the list of all the elements of <code class=\"code\">a</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "to_list", "Float.ArrayLabels.html#VALto_list", ""],
["Option", "Option.html", "to_list", "Option.html#VALto_list", "<div class=\"info\">\n<p><code class=\"code\">to_list&nbsp;o</code> is <code class=\"code\">[]</code> if <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">None</span></code> and <code class=\"code\">[v]</code> if <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code>.</p>\n\n</div>"],
["Result", "Result.html", "to_list", "Result.html#VALto_list", "<div class=\"info\">\n<p><code class=\"code\">to_list&nbsp;r</code> is <code class=\"code\">[v]</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;v</code> and <code class=\"code\">[]</code> otherwise.</p>\n\n</div>"],
["Int64", "Int64.html", "to_int32", "Int64.html#VALto_int32", "<div class=\"info\">\n<p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to a\n   32-bit integer (type <code class=\"code\">int32</code>).</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "to_int32", "Nativeint.html#VALto_int32", "<div class=\"info\">\n<p>Convert the given native integer to a\n   32-bit integer (type <code class=\"code\">int32</code>).</p>\n\n</div>"],
["Bool", "Bool.html", "to_int", "Bool.html#VALto_int", "<div class=\"info\">\n<p><code class=\"code\">to_int&nbsp;b</code> is <code class=\"code\">0</code> if <code class=\"code\">b</code> is <code class=\"code\"><span class=\"keyword\">false</span></code> and <code class=\"code\">1</code> if <code class=\"code\">b</code> is <code class=\"code\"><span class=\"keyword\">true</span></code>.</p>\n\n</div>"],
["Float", "Float.html", "to_int", "Float.html#VALto_int", "<div class=\"info\">\n<p>Truncate the given floating-point number to an integer.</p>\n\n</div>"],
["Int32", "Int32.html", "to_int", "Int32.html#VALto_int", "<div class=\"info\">\n<p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>) to an\n   integer (type <code class=\"code\">int</code>).</p>\n\n</div>"],
["Int64", "Int64.html", "to_int", "Int64.html#VALto_int", "<div class=\"info\">\n<p>Convert the given 64-bit integer (type <code class=\"code\">int64</code>) to an\n   integer (type <code class=\"code\">int</code>).</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "to_int", "Nativeint.html#VALto_int", "<div class=\"info\">\n<p>Convert the given native integer (type <code class=\"code\">nativeint</code>) to an\n   integer (type <code class=\"code\">int</code>).</p>\n\n</div>"],
["Uchar", "Uchar.html", "to_int", "Uchar.html#VALto_int", "<div class=\"info\">\n<p><code class=\"code\">to_int&nbsp;u</code> is <code class=\"code\">u</code> as an integer.</p>\n\n</div>"],
["Digest", "Digest.html", "to_hex", "Digest.html#VALto_hex", "<div class=\"info\">\n<p>Return the printable hexadecimal representation of the given digest.</p>\n\n</div>"],
["Bool", "Bool.html", "to_float", "Bool.html#VALto_float", "<div class=\"info\">\n<p><code class=\"code\">to_float&nbsp;b</code> is <code class=\"code\">0.</code> if <code class=\"code\">b</code> is <code class=\"code\"><span class=\"keyword\">false</span></code> and <code class=\"code\">1.</code> if <code class=\"code\">b</code> is <code class=\"code\"><span class=\"keyword\">true</span></code>.</p>\n\n</div>"],
["Int", "Int.html", "to_float", "Int.html#VALto_float", "<div class=\"info\">\n<p><code class=\"code\">to_float&nbsp;x</code> is <code class=\"code\">x</code> as a floating point number.</p>\n\n</div>"],
["Int32", "Int32.html", "to_float", "Int32.html#VALto_float", "<div class=\"info\">\n<p>Convert the given 32-bit integer to a floating-point number.</p>\n\n</div>"],
["Int64", "Int64.html", "to_float", "Int64.html#VALto_float", "<div class=\"info\">\n<p>Convert the given 64-bit integer to a floating-point number.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "to_float", "Nativeint.html#VALto_float", "<div class=\"info\">\n<p>Convert the given native integer to a floating-point number.</p>\n\n</div>"],
["Uchar", "Uchar.html", "to_char", "Uchar.html#VALto_char", "<div class=\"info\">\n<p><code class=\"code\">to_char&nbsp;u</code> is <code class=\"code\">u</code> as an OCaml latin1 character.</p>\n\n</div>"],
["Marshal", "Marshal.html", "to_channel", "Marshal.html#VALto_channel", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_channel&nbsp;chan&nbsp;v&nbsp;flags</code> writes the representation\n   of <code class=\"code\">v</code> on channel <code class=\"code\">chan</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "to_bytes", "Buffer.html#VALto_bytes", "<div class=\"info\">\n<p>Return a copy of the current contents of the buffer.</p>\n\n</div>"],
["Marshal", "Marshal.html", "to_bytes", "Marshal.html#VALto_bytes", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_bytes&nbsp;v&nbsp;flags</code> returns a byte sequence containing\n   the representation of <code class=\"code\">v</code>.</p>\n\n</div>"],
["Marshal", "Marshal.html", "to_buffer", "Marshal.html#VALto_buffer", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.to_buffer&nbsp;buff&nbsp;ofs&nbsp;len&nbsp;v&nbsp;flags</code> marshals the value <code class=\"code\">v</code>,\n   storing its byte representation in the sequence <code class=\"code\">buff</code>,\n   starting at index <code class=\"code\">ofs</code>, and writing at most\n   <code class=\"code\">len</code> bytes.</p>\n\n</div>"],
["List", "List.html", "tl", "List.html#VALtl", "<div class=\"info\">\n<p>Return the given list without its first element.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "tl", "ListLabels.html#VALtl", "<div class=\"info\">\n<p>Return the given list without its first element.</p>\n\n</div>"],
["Unix", "Unix.html", "times", "Unix.html#VALtimes", "<div class=\"info\">\n<p>Return the execution times of the process.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "times", "UnixLabels.html#VALtimes", "<div class=\"info\">\n<p>Return the execution times of the process.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "timed_write_substring", "ThreadUnix.html#VALtimed_write_substring", "<div class=\"info\">\n<p>See <a href=\"ThreadUnix.html#VALtimed_write\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.timed_write</code></a>.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "timed_write", "ThreadUnix.html#VALtimed_write", "<div class=\"info\">\n<p>Behave as <a href=\"ThreadUnix.html#VALread\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.read</code></a> and <a href=\"ThreadUnix.html#VALwrite\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.write</code></a>, except that\n   <code class=\"code\"><span class=\"constructor\">Unix_error</span>(<span class=\"constructor\">ETIMEDOUT</span>,_,_)</code> is raised if no data is\n   available for reading or ready for writing after <code class=\"code\">d</code> seconds.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "timed_read", "ThreadUnix.html#VALtimed_read", "<div class=\"info\">\n<p>See <a href=\"ThreadUnix.html#VALtimed_write\"><code class=\"code\"><span class=\"constructor\">ThreadUnix</span>.timed_write</code></a>.</p>\n\n</div>"],
["Sys", "Sys.html", "time", "Sys.html#VALtime", "<div class=\"info\">\n<p>Return the processor time, in seconds, used by the program\n   since the beginning of execution.</p>\n\n</div>"],
["Unix", "Unix.html", "time", "Unix.html#VALtime", "<div class=\"info\">\n<p>Return the current time since 00:00:00 GMT, Jan.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "time", "UnixLabels.html#VALtime", "<div class=\"info\">\n<p>Return the current time since 00:00:00 GMT, Jan.</p>\n\n</div>"],
["Filename", "Filename.html", "temp_file", "Filename.html#VALtemp_file", "<div class=\"info\">\n<p><code class=\"code\">temp_file&nbsp;prefix&nbsp;suffix</code> returns the name of a\n   fresh temporary file in the temporary directory.</p>\n\n</div>"],
["Filename", "Filename.html", "temp_dir_name", "Filename.html#VALtemp_dir_name", "<div class=\"info\">\n<span class=\"deprecated\"><p>The name of the initial temporary directory:\n    Under Unix, the value of the <code class=\"code\"><span class=\"constructor\">TMPDIR</span></code> environment variable, or \"/tmp\"\n    if the variable is not set.</p>\n\n</span></div>"],
["Unix", "Unix.html", "tcsetattr", "Unix.html#VALtcsetattr", "<div class=\"info\">\n<p>Set the status of the terminal referred to by the given\n   file descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "tcsetattr", "UnixLabels.html#VALtcsetattr", "<div class=\"info\">\n<p>Set the status of the terminal referred to by the given\n   file descriptor.</p>\n\n</div>"],
["Unix", "Unix.html", "tcsendbreak", "Unix.html#VALtcsendbreak", "<div class=\"info\">\n<p>Send a break condition on the given file descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "tcsendbreak", "UnixLabels.html#VALtcsendbreak", "<div class=\"info\">\n<p>Send a break condition on the given file descriptor.</p>\n\n</div>"],
["Unix", "Unix.html", "tcgetattr", "Unix.html#VALtcgetattr", "<div class=\"info\">\n<p>Return the status of the terminal referred to by the given\n   file descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "tcgetattr", "UnixLabels.html#VALtcgetattr", "<div class=\"info\">\n<p>Return the status of the terminal referred to by the given\n   file descriptor.</p>\n\n</div>"],
["Unix", "Unix.html", "tcflush", "Unix.html#VALtcflush", "<div class=\"info\">\n<p>Discard data written on the given file descriptor but not yet\n   transmitted, or data received but not yet read, depending on the\n   second argument: <code class=\"code\"><span class=\"constructor\">TCIFLUSH</span></code> flushes data received but not read,\n   <code class=\"code\"><span class=\"constructor\">TCOFLUSH</span></code> flushes data written but not transmitted, and\n   <code class=\"code\"><span class=\"constructor\">TCIOFLUSH</span></code> flushes both.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "tcflush", "UnixLabels.html#VALtcflush", "<div class=\"info\">\n<p>Discard data written on the given file descriptor but not yet\n   transmitted, or data received but not yet read, depending on the\n   second argument: <code class=\"code\"><span class=\"constructor\">TCIFLUSH</span></code> flushes data received but not read,\n   <code class=\"code\"><span class=\"constructor\">TCOFLUSH</span></code> flushes data written but not transmitted, and\n   <code class=\"code\"><span class=\"constructor\">TCIOFLUSH</span></code> flushes both.</p>\n\n</div>"],
["Unix", "Unix.html", "tcflow", "Unix.html#VALtcflow", "<div class=\"info\">\n<p>Suspend or restart reception or transmission of data on\n   the given file descriptor, depending on the second argument:\n   <code class=\"code\"><span class=\"constructor\">TCOOFF</span></code> suspends output, <code class=\"code\"><span class=\"constructor\">TCOON</span></code> restarts output,\n   <code class=\"code\"><span class=\"constructor\">TCIOFF</span></code> transmits a STOP character to suspend input,\n   and <code class=\"code\"><span class=\"constructor\">TCION</span></code> transmits a START character to restart input.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "tcflow", "UnixLabels.html#VALtcflow", "<div class=\"info\">\n<p>Suspend or restart reception or transmission of data on\n   the given file descriptor, depending on the second argument:\n   <code class=\"code\"><span class=\"constructor\">TCOOFF</span></code> suspends output, <code class=\"code\"><span class=\"constructor\">TCOON</span></code> restarts output,\n   <code class=\"code\"><span class=\"constructor\">TCIOFF</span></code> transmits a STOP character to suspend input,\n   and <code class=\"code\"><span class=\"constructor\">TCION</span></code> transmits a START character to restart input.</p>\n\n</div>"],
["Unix", "Unix.html", "tcdrain", "Unix.html#VALtcdrain", "<div class=\"info\">\n<p>Waits until all output written on the given file descriptor\n   has been transmitted.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "tcdrain", "UnixLabels.html#VALtcdrain", "<div class=\"info\">\n<p>Waits until all output written on the given file descriptor\n   has been transmitted.</p>\n\n</div>"],
["Float", "Float.html", "tanh", "Float.html#VALtanh", "<div class=\"info\">\n<p>Hyperbolic tangent.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "tanh", "Pervasives.html#VALtanh", ""],
["Float", "Float.html", "tan", "Float.html#VALtan", "<div class=\"info\">\n<p>Tangent.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "tan", "Pervasives.html#VALtan", ""],
["Queue", "Queue.html", "take_opt", "Queue.html#VALtake_opt", "<div class=\"info\">\n<p><code class=\"code\">take_opt&nbsp;q</code> removes and returns the first element in queue <code class=\"code\">q</code>,\n   or returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the queue is empty.</p>\n\n</div>"],
["Queue", "Queue.html", "take", "Queue.html#VALtake", "<div class=\"info\">\n<p><code class=\"code\">take&nbsp;q</code> removes and returns the first element in queue <code class=\"code\">q</code>,\n   or raises <a href=\"Queue.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Queue</span>.<span class=\"constructor\">Empty</span></code></a> if the queue is empty.</p>\n\n</div>"],
["Spacetime.Snapshot", "Spacetime.Snapshot.html", "take", "Spacetime.Snapshot.html#VALtake", "<div class=\"info\">\n<p><code class=\"code\">take&nbsp;series</code> takes a snapshot of the profiling annotations on the values\n      in the minor and major heaps, together with GC stats, and write the\n      result to the <code class=\"code\">series</code> file.</p>\n\n</div>"],
["Obj", "Obj.html", "tag", "Obj.html#VALtag", ""],
["ThreadUnix", "ThreadUnix.html", "system", "ThreadUnix.html#VALsystem", ""],
["Unix", "Unix.html", "system", "Unix.html#VALsystem", "<div class=\"info\">\n<p>Execute the given command, wait until it terminates, and return\n   its termination status.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "system", "UnixLabels.html#VALsystem", "<div class=\"info\">\n<p>Execute the given command, wait until it terminates, and return\n   its termination status.</p>\n\n</div>"],
["Event", "Event.html", "sync", "Event.html#VALsync", "<div class=\"info\">\n<p>'Synchronize' on an event: offer all the communication\n   possibilities specified in the event to the outside world,\n   and block until one of the communications succeed.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "symm", "CamlinternalFormat.html#VALsymm", ""],
["Unix", "Unix.html", "symlink", "Unix.html#VALsymlink", "<div class=\"info\">\n<p><code class=\"code\">symlink&nbsp;?to_dir&nbsp;source&nbsp;dest</code> creates the file <code class=\"code\">dest</code> as a symbolic link\n   to the file <code class=\"code\">source</code>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "symlink", "UnixLabels.html#VALsymlink", "<div class=\"info\">\n<p><code class=\"code\">symlink&nbsp;source&nbsp;dest</code> creates the file <code class=\"code\">dest</code> as a symbolic link\n   to the file <code class=\"code\">source</code>.</p>\n\n</div>"],
["Parsing", "Parsing.html", "symbol_start_pos", "Parsing.html#VALsymbol_start_pos", "<div class=\"info\">\n<p>Same as <code class=\"code\">symbol_start</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n\n</div>"],
["Parsing", "Parsing.html", "symbol_start", "Parsing.html#VALsymbol_start", "<div class=\"info\">\n<p><code class=\"code\">symbol_start</code> and <a href=\"Parsing.html#VALsymbol_end\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_end</code></a> are to be called in the\n   action part of a grammar rule only.</p>\n\n</div>"],
["Parsing", "Parsing.html", "symbol_end_pos", "Parsing.html#VALsymbol_end_pos", "<div class=\"info\">\n<p>Same as <code class=\"code\">symbol_end</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n\n</div>"],
["Parsing", "Parsing.html", "symbol_end", "Parsing.html#VALsymbol_end", "<div class=\"info\">\n<p>See <a href=\"Parsing.html#VALsymbol_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_start</code></a>.</p>\n\n</div>"],
["Float", "Float.html", "succ", "Float.html#VALsucc", "<div class=\"info\">\n<p><code class=\"code\">succ&nbsp;x</code> returns the floating point number right after <code class=\"code\">x</code> i.e.,\n   the smallest floating-point number greater than <code class=\"code\">x</code>.</p>\n\n</div>"],
["Int", "Int.html", "succ", "Int.html#VALsucc", "<div class=\"info\">\n<p><code class=\"code\">succ&nbsp;x</code> is <code class=\"code\">add&nbsp;x&nbsp;1</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "succ", "Int32.html#VALsucc", "<div class=\"info\">\n<p>Successor.</p>\n\n</div>"],
["Int64", "Int64.html", "succ", "Int64.html#VALsucc", "<div class=\"info\">\n<p>Successor.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "succ", "Nativeint.html#VALsucc", "<div class=\"info\">\n<p>Successor.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "succ", "Pervasives.html#VALsucc", ""],
["Uchar", "Uchar.html", "succ", "Uchar.html#VALsucc", "<div class=\"info\">\n<p><code class=\"code\">succ&nbsp;u</code> is the scalar value after <code class=\"code\">u</code> in the set of Unicode scalar\n    values.</p>\n\n</div>"],
["Digest", "Digest.html", "substring", "Digest.html#VALsubstring", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Digest</span>.substring&nbsp;s&nbsp;ofs&nbsp;len</code> returns the digest of the substring\n   of <code class=\"code\">s</code> starting at index <code class=\"code\">ofs</code> and containing <code class=\"code\">len</code> characters.</p>\n\n</div>"],
["Str", "Str.html", "substitute_first", "Str.html#VALsubstitute_first", "<div class=\"info\">\n<p>Same as <a href=\"Str.html#VALglobal_substitute\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_substitute</code></a>, except that only the first substring\n   matching the regular expression is replaced.</p>\n\n</div>"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "subset", "MoreLabels.Set.S.html#VALsubset", ""],
["Set.S", "Set.S.html", "subset", "Set.S.html#VALsubset", "<div class=\"info\">\n<p><code class=\"code\">subset&nbsp;s1&nbsp;s2</code> tests whether the set <code class=\"code\">s1</code> is a subset of\n       the set <code class=\"code\">s2</code>.</p>\n\n</div>"],
["Digest", "Digest.html", "subbytes", "Digest.html#VALsubbytes", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Digest</span>.subbytes&nbsp;s&nbsp;ofs&nbsp;len</code> returns the digest of the subsequence\n    of <code class=\"code\">s</code> starting at index <code class=\"code\">ofs</code> and containing <code class=\"code\">len</code> bytes.</p>\n\n</div>"],
["Bytes", "Bytes.html", "sub_string", "Bytes.html#VALsub_string", "<div class=\"info\">\n<p>Same as <code class=\"code\">sub</code> but return a string instead of a byte sequence.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "sub_string", "BytesLabels.html#VALsub_string", "<div class=\"info\">\n<p>Same as <code class=\"code\">sub</code> but return a string instead of a byte sequence.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "sub_right", "Bigarray.Genarray.html#VALsub_right", "<div class=\"info\">\n<p>Extract a sub-array of the given Bigarray by restricting the\n     last (right-most) dimension.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "sub_right", "Bigarray.Array2.html#VALsub_right", "<div class=\"info\">\n<p>Extract a two-dimensional sub-array of the given two-dimensional\n     Bigarray by restricting the second dimension.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "sub_right", "Bigarray.Array3.html#VALsub_right", "<div class=\"info\">\n<p>Extract a three-dimensional sub-array of the given\n     three-dimensional Bigarray by restricting the second dimension.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "sub_left", "Bigarray.Genarray.html#VALsub_left", "<div class=\"info\">\n<p>Extract a sub-array of the given Bigarray by restricting the\n     first (left-most) dimension.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "sub_left", "Bigarray.Array2.html#VALsub_left", "<div class=\"info\">\n<p>Extract a two-dimensional sub-array of the given two-dimensional\n     Bigarray by restricting the first dimension.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "sub_left", "Bigarray.Array3.html#VALsub_left", "<div class=\"info\">\n<p>Extract a three-dimensional sub-array of the given\n     three-dimensional Bigarray by restricting the first dimension.</p>\n\n</div>"],
["Array", "Array.html", "sub", "Array.html#VALsub", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.sub&nbsp;a&nbsp;start&nbsp;len</code> returns a fresh array of length <code class=\"code\">len</code>,\n   containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>\n   of array <code class=\"code\">a</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "sub", "ArrayLabels.html#VALsub", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.sub&nbsp;a&nbsp;start&nbsp;len</code> returns a fresh array of length <code class=\"code\">len</code>,\n   containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>\n   of array <code class=\"code\">a</code>.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "sub", "Bigarray.Array1.html#VALsub", "<div class=\"info\">\n<p>Extract a sub-array of the given one-dimensional Bigarray.</p>\n\n</div>"],
["Buffer", "Buffer.html", "sub", "Buffer.html#VALsub", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Buffer</span>.sub&nbsp;b&nbsp;off&nbsp;len</code> returns a copy of <code class=\"code\">len</code> bytes from the\n    current contents of the buffer <code class=\"code\">b</code>, starting at offset <code class=\"code\">off</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "sub", "Bytes.html#VALsub", "<div class=\"info\">\n<p><code class=\"code\">sub&nbsp;s&nbsp;start&nbsp;len</code> returns a new byte sequence of length <code class=\"code\">len</code>,\n    containing the subsequence of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code>\n    and has length <code class=\"code\">len</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "sub", "BytesLabels.html#VALsub", "<div class=\"info\">\n<p><code class=\"code\">sub&nbsp;s&nbsp;start&nbsp;len</code> returns a new byte sequence of length <code class=\"code\">len</code>,\n    containing the subsequence of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code>\n    and has length <code class=\"code\">len</code>.</p>\n\n</div>"],
["Complex", "Complex.html", "sub", "Complex.html#VALsub", "<div class=\"info\">\n<p>Subtraction</p>\n\n</div>"],
["Float", "Float.html", "sub", "Float.html#VALsub", "<div class=\"info\">\n<p>Floating-point subtraction.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "sub", "Float.Array.html#VALsub", "<div class=\"info\">\n<p><code class=\"code\">sub&nbsp;a&nbsp;start&nbsp;len</code> returns a fresh floatarray of length <code class=\"code\">len</code>,\n     containing the elements number <code class=\"code\">start</code> to <code class=\"code\">start&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>\n     of floatarray <code class=\"code\">a</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "sub", "Float.ArrayLabels.html#VALsub", ""],
["Int", "Int.html", "sub", "Int.html#VALsub", "<div class=\"info\">\n<p><code class=\"code\">sub&nbsp;x&nbsp;y</code> is the subtraction <code class=\"code\">x&nbsp;-&nbsp;y</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "sub", "Int32.html#VALsub", "<div class=\"info\">\n<p>Subtraction.</p>\n\n</div>"],
["Int64", "Int64.html", "sub", "Int64.html#VALsub", "<div class=\"info\">\n<p>Subtraction.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "sub", "Nativeint.html#VALsub", "<div class=\"info\">\n<p>Subtraction.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "sub", "StringLabels.html#VALsub", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.sub&nbsp;s&nbsp;start&nbsp;len</code> returns a fresh string of length <code class=\"code\">len</code>,\n   containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and\n   has length <code class=\"code\">len</code>.</p>\n\n</div>"],
["String", "String.html", "sub", "String.html#VALsub", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.sub&nbsp;s&nbsp;start&nbsp;len</code> returns a fresh string of length <code class=\"code\">len</code>,\n   containing the substring of <code class=\"code\">s</code> that starts at position <code class=\"code\">start</code> and\n   has length <code class=\"code\">len</code>.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "strput_acc", "CamlinternalFormat.html#VALstrput_acc", ""],
["Obj", "Obj.html", "string_tag", "Obj.html#VALstring_tag", ""],
["Str", "Str.html", "string_partial_match", "Str.html#VALstring_partial_match", "<div class=\"info\">\n<p>Similar to <a href=\"Str.html#VALstring_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_match</code></a>, but also returns true if\n   the argument string is a prefix of a string that matches.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "string_of_int", "Pervasives.html#VALstring_of_int", ""],
["Unix", "Unix.html", "string_of_inet_addr", "Unix.html#VALstring_of_inet_addr", "<div class=\"info\">\n<p>Return the printable representation of the given Internet address.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "string_of_inet_addr", "UnixLabels.html#VALstring_of_inet_addr", "<div class=\"info\">\n<p>Return the printable representation of the given Internet address.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_formatting_lit", "CamlinternalFormat.html#VALstring_of_formatting_lit", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_formatting_gen", "CamlinternalFormat.html#VALstring_of_formatting_gen", ""],
["Pervasives", "Pervasives.html", "string_of_format", "Pervasives.html#VALstring_of_format", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_fmtty", "CamlinternalFormat.html#VALstring_of_fmtty", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "string_of_fmt", "CamlinternalFormat.html#VALstring_of_fmt", ""],
["Pervasives", "Pervasives.html", "string_of_float", "Pervasives.html#VALstring_of_float", ""],
["Pervasives", "Pervasives.html", "string_of_bool", "Pervasives.html#VALstring_of_bool", ""],
["Str", "Str.html", "string_match", "Str.html#VALstring_match", "<div class=\"info\">\n<p><code class=\"code\">string_match&nbsp;r&nbsp;s&nbsp;start</code> tests whether a substring of <code class=\"code\">s</code> that\n   starts at position <code class=\"code\">start</code> matches the regular expression <code class=\"code\">r</code>.</p>\n\n</div>"],
["Str", "Str.html", "string_before", "Str.html#VALstring_before", "<div class=\"info\">\n<p><code class=\"code\">string_before&nbsp;s&nbsp;n</code> returns the substring of all characters of <code class=\"code\">s</code>\n   that precede position <code class=\"code\">n</code> (excluding the character at\n   position <code class=\"code\">n</code>).</p>\n\n</div>"],
["Str", "Str.html", "string_after", "Str.html#VALstring_after", "<div class=\"info\">\n<p><code class=\"code\">string_after&nbsp;s&nbsp;n</code> returns the substring of all characters of <code class=\"code\">s</code>\n   that follow position <code class=\"code\">n</code> (including the character at\n   position <code class=\"code\">n</code>).</p>\n\n</div>"],
["Digest", "Digest.html", "string", "Digest.html#VALstring", "<div class=\"info\">\n<p>Return the digest of the given string.</p>\n\n</div>"],
["Format", "Format.html", "str_formatter", "Format.html#VALstr_formatter", "<div class=\"info\">\n<p>A formatter to output to the <a href=\"Format.html#VALstdbuf\"><code class=\"code\"><span class=\"constructor\">Format</span>.stdbuf</code></a> string buffer.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "stdout", "Pervasives.html#VALstdout", ""],
["Unix", "Unix.html", "stdout", "Unix.html#VALstdout", "<div class=\"info\">\n<p>File descriptor for standard output.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "stdout", "UnixLabels.html#VALstdout", "<div class=\"info\">\n<p>File descriptor for standard output.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "stdin", "Pervasives.html#VALstdin", ""],
["Scanf.Scanning", "Scanf.Scanning.html", "stdin", "Scanf.Scanning.html#VALstdin", "<div class=\"info\">\n<p>The standard input notion for the <a href=\"Scanf.html\"><code class=\"code\"><span class=\"constructor\">Scanf</span></code></a> module.</p>\n\n</div>"],
["Unix", "Unix.html", "stdin", "Unix.html#VALstdin", "<div class=\"info\">\n<p>File descriptor for standard input.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "stdin", "UnixLabels.html#VALstdin", "<div class=\"info\">\n<p>File descriptor for standard input.</p>\n\n</div>"],
["Scanf.Scanning", "Scanf.Scanning.html", "stdib", "Scanf.Scanning.html#VALstdib", "<div class=\"info\">\n<p>A deprecated alias for <a href=\"Scanf.Scanning.html#VALstdin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.stdin</code></a>, the scanning buffer reading from\n    <a href=\"Stdlib.html#VALstdin\"><code class=\"code\">stdin</code></a>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "stderr", "Pervasives.html#VALstderr", ""],
["Unix", "Unix.html", "stderr", "Unix.html#VALstderr", "<div class=\"info\">\n<p>File descriptor for standard error.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "stderr", "UnixLabels.html#VALstderr", "<div class=\"info\">\n<p>File descriptor for standard error.</p>\n\n</div>"],
["Format", "Format.html", "stdbuf", "Format.html#VALstdbuf", "<div class=\"info\">\n<p>The string buffer in which <code class=\"code\">str_formatter</code> writes.</p>\n\n</div>"],
["Format", "Format.html", "std_formatter", "Format.html#VALstd_formatter", "<div class=\"info\">\n<p>The standard formatter to write to standard output.</p>\n\n</div>"],
["Ephemeron.S", "Ephemeron.S.html", "stats_alive", "Ephemeron.S.html#VALstats_alive", "<div class=\"info\">\n<p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p>\n\n</div>"],
["Ephemeron.SeededS", "Ephemeron.SeededS.html", "stats_alive", "Ephemeron.SeededS.html#VALstats_alive", "<div class=\"info\">\n<p>same as <a href=\"Hashtbl.SeededS.html#VALstats\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.<span class=\"constructor\">SeededS</span>.stats</code></a> but only count the alive bindings</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "stats", "CamlinternalOO.html#VALstats", ""],
["Hashtbl", "Hashtbl.html", "stats", "Hashtbl.html#VALstats", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.stats&nbsp;tbl</code> returns statistics about the table <code class=\"code\">tbl</code>:\n   number of buckets, size of the biggest bucket, distribution of\n   buckets by size.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "stats", "Hashtbl.S.html#VALstats", "<div class=\"info\">\n</div>"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "stats", "Hashtbl.SeededS.html#VALstats", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "stats", "MoreLabels.Hashtbl.html#VALstats", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "stats", "MoreLabels.Hashtbl.S.html#VALstats", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "stats", "MoreLabels.Hashtbl.SeededS.html#VALstats", ""],
["Weak.S", "Weak.S.html", "stats", "Weak.S.html#VALstats", "<div class=\"info\">\n<p>Return statistics on the table.</p>\n\n</div>"],
["Gc", "Gc.html", "stat", "Gc.html#VALstat", "<div class=\"info\">\n<p>Return the current values of the memory management counters in a\n   <code class=\"code\">stat</code> record.</p>\n\n</div>"],
["Unix", "Unix.html", "stat", "Unix.html#VALstat", "<div class=\"info\">\n<p>Return the information for the named file.</p>\n\n</div>"],
["Unix.LargeFile", "Unix.LargeFile.html", "stat", "Unix.LargeFile.html#VALstat", ""],
["UnixLabels", "UnixLabels.html", "stat", "UnixLabels.html#VALstat", "<div class=\"info\">\n<p>Return the information for the named file.</p>\n\n</div>"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "stat", "UnixLabels.LargeFile.html#VALstat", ""],
["Array", "Array.html", "stable_sort", "Array.html#VALstable_sort", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>, but the sorting algorithm is stable (i.e.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "stable_sort", "ArrayLabels.html#VALstable_sort", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a>, but the sorting algorithm is stable (i.e.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "stable_sort", "Float.Array.html#VALstable_sort", "<div class=\"info\">\n<p>Same as <a href=\"Float.Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Float</span>.<span class=\"constructor\">Array</span>.sort</code></a>, but the sorting algorithm is stable (i.e.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "stable_sort", "Float.ArrayLabels.html#VALstable_sort", ""],
["List", "List.html", "stable_sort", "List.html#VALstable_sort", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but the sorting algorithm is guaranteed to\n   be stable (i.e.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "stable_sort", "ListLabels.html#VALstable_sort", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but the sorting algorithm is guaranteed to\n   be stable (i.e.</p>\n\n</div>"],
["Scanf", "Scanf.html", "sscanf_format", "Scanf.html#VALsscanf_format", "<div class=\"info\">\n<p>Same as <a href=\"Scanf.html#VALbscanf_format\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf_format</code></a>, but reads from the given string.</p>\n\n</div>"],
["Scanf", "Scanf.html", "sscanf", "Scanf.html#VALsscanf", "<div class=\"info\">\n<p>Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but reads from the given string.</p>\n\n</div>"],
["Complex", "Complex.html", "sqrt", "Complex.html#VALsqrt", "<div class=\"info\">\n<p>Square root.</p>\n\n</div>"],
["Float", "Float.html", "sqrt", "Float.html#VALsqrt", "<div class=\"info\">\n<p>Square root.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "sqrt", "Pervasives.html#VALsqrt", ""],
["Format", "Format.html", "sprintf", "Format.html#VALsprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">printf</code> above, but instead of printing on a formatter,\n  returns a string containing the result of formatting the arguments.</p>\n\n</div>"],
["Printf", "Printf.html", "sprintf", "Printf.html#VALsprintf", "<div class=\"info\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but instead of printing on an output channel,\n   return a string containing the result of formatting the arguments.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "split_on_char", "StringLabels.html#VALsplit_on_char", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s</code> returns the list of all (possibly empty)\n    substrings of <code class=\"code\">s</code> that are delimited by the <code class=\"code\">sep</code> character.</p>\n\n</div>"],
["String", "String.html", "split_on_char", "String.html#VALsplit_on_char", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.split_on_char&nbsp;sep&nbsp;s</code> returns the list of all (possibly empty)\n    substrings of <code class=\"code\">s</code> that are delimited by the <code class=\"code\">sep</code> character.</p>\n\n</div>"],
["Str", "Str.html", "split_delim", "Str.html#VALsplit_delim", "<div class=\"info\">\n<p>Same as <a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a> but occurrences of the\n   delimiter at the beginning and at the end of the string are\n   recognized and returned as empty strings in the result.</p>\n\n</div>"],
["List", "List.html", "split", "List.html#VALsplit", "<div class=\"info\">\n<p>Transform a list of pairs into a pair of lists:\n   <code class=\"code\">split&nbsp;[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code> is <code class=\"code\">([a1;&nbsp;...;&nbsp;an],&nbsp;[b1;&nbsp;...;&nbsp;bn])</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "split", "ListLabels.html#VALsplit", "<div class=\"info\">\n<p>Transform a list of pairs into a pair of lists:\n   <code class=\"code\">split&nbsp;[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code> is <code class=\"code\">([a1;&nbsp;...;&nbsp;an],&nbsp;[b1;&nbsp;...;&nbsp;bn])</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "split", "Map.S.html#VALsplit", "<div class=\"info\">\n<p><code class=\"code\">split&nbsp;x&nbsp;m</code> returns a triple <code class=\"code\">(l,&nbsp;data,&nbsp;r)</code>, where\n          <code class=\"code\">l</code> is the map with all the bindings of <code class=\"code\">m</code> whose key\n        is strictly less than <code class=\"code\">x</code>;\n          <code class=\"code\">r</code> is the map with all the bindings of <code class=\"code\">m</code> whose key\n        is strictly greater than <code class=\"code\">x</code>;\n          <code class=\"code\">data</code> is <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">m</code> contains no binding for <code class=\"code\">x</code>,\n          or <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if <code class=\"code\">m</code> binds <code class=\"code\">v</code> to <code class=\"code\">x</code>.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "split", "MoreLabels.Map.S.html#VALsplit", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "split", "MoreLabels.Set.S.html#VALsplit", ""],
["Set.S", "Set.S.html", "split", "Set.S.html#VALsplit", "<div class=\"info\">\n<p><code class=\"code\">split&nbsp;x&nbsp;s</code> returns a triple <code class=\"code\">(l,&nbsp;present,&nbsp;r)</code>, where\n          <code class=\"code\">l</code> is the set of elements of <code class=\"code\">s</code> that are\n          strictly less than <code class=\"code\">x</code>;\n          <code class=\"code\">r</code> is the set of elements of <code class=\"code\">s</code> that are\n          strictly greater than <code class=\"code\">x</code>;\n          <code class=\"code\">present</code> is <code class=\"code\"><span class=\"keyword\">false</span></code> if <code class=\"code\">s</code> contains no element equal to <code class=\"code\">x</code>,\n          or <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">s</code> contains an element equal to <code class=\"code\">x</code>.</p>\n\n</div>"],
["Str", "Str.html", "split", "Str.html#VALsplit", "<div class=\"info\">\n<p><code class=\"code\">split&nbsp;r&nbsp;s</code> splits <code class=\"code\">s</code> into substrings, taking as delimiters\n   the substrings that match <code class=\"code\">r</code>, and returns the list of substrings.</p>\n\n</div>"],
["List", "List.html", "sort_uniq", "List.html#VALsort_uniq", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but also remove duplicates.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "sort_uniq", "ListLabels.html#VALsort_uniq", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a>, but also remove duplicates.</p>\n\n</div>"],
["Array", "Array.html", "sort", "Array.html#VALsort", "<div class=\"info\">\n<p>Sort an array in increasing order according to a comparison\n   function.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "sort", "ArrayLabels.html#VALsort", "<div class=\"info\">\n<p>Sort an array in increasing order according to a comparison\n   function.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "sort", "Float.Array.html#VALsort", "<div class=\"info\">\n<p>Sort a floatarray in increasing order according to a comparison\n      function.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "sort", "Float.ArrayLabels.html#VALsort", ""],
["List", "List.html", "sort", "List.html#VALsort", "<div class=\"info\">\n<p>Sort a list in increasing order according to a comparison\n   function.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "sort", "ListLabels.html#VALsort", "<div class=\"info\">\n<p>Sort a list in increasing order according to a comparison\n   function.</p>\n\n</div>"],
["Option", "Option.html", "some", "Option.html#VALsome", "<div class=\"info\">\n<p><code class=\"code\">some&nbsp;v</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "socketpair", "Unix.html#VALsocketpair", "<div class=\"info\">\n<p>Create a pair of unnamed sockets, connected together.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "socketpair", "UnixLabels.html#VALsocketpair", "<div class=\"info\">\n<p>Create a pair of unnamed sockets, connected together.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "socket", "ThreadUnix.html#VALsocket", ""],
["Unix", "Unix.html", "socket", "Unix.html#VALsocket", "<div class=\"info\">\n<p>Create a new socket in the given domain, and with the\n   given kind.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "socket", "UnixLabels.html#VALsocket", "<div class=\"info\">\n<p>Create a new socket in the given domain, and with the\n   given kind.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "snd", "Pervasives.html#VALsnd", ""],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_right_2", "Bigarray.Array3.html#VALslice_right_2", "<div class=\"info\">\n<p>Extract a two-dimensional slice of the given\n     three-dimensional Bigarray by fixing the last coordinate.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_right_1", "Bigarray.Array3.html#VALslice_right_1", "<div class=\"info\">\n<p>Extract a one-dimensional slice of the given three-dimensional\n     Bigarray by fixing the last two coordinates.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "slice_right", "Bigarray.Genarray.html#VALslice_right", "<div class=\"info\">\n<p>Extract a sub-array of lower dimension from the given Bigarray\n     by fixing one or several of the last (right-most) coordinates.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "slice_right", "Bigarray.Array2.html#VALslice_right", "<div class=\"info\">\n<p>Extract a column (one-dimensional slice) of the given\n     two-dimensional Bigarray.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_left_2", "Bigarray.Array3.html#VALslice_left_2", "<div class=\"info\">\n<p>Extract a  two-dimensional slice of the given three-dimensional\n     Bigarray by fixing the first coordinate.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "slice_left_1", "Bigarray.Array3.html#VALslice_left_1", "<div class=\"info\">\n<p>Extract a one-dimensional slice of the given three-dimensional\n     Bigarray by fixing the first two coordinates.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "slice_left", "Bigarray.Genarray.html#VALslice_left", "<div class=\"info\">\n<p>Extract a sub-array of lower dimension from the given Bigarray\n     by fixing one or several of the first (left-most) coordinates.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "slice_left", "Bigarray.Array2.html#VALslice_left", "<div class=\"info\">\n<p>Extract a row (one-dimensional slice) of the given two-dimensional\n     Bigarray.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "slice", "Bigarray.Array1.html#VALslice", "<div class=\"info\">\n<p>Extract a scalar (zero-dimensional slice) of the given one-dimensional\n     Bigarray.</p>\n\n</div>"],
["Unix", "Unix.html", "sleepf", "Unix.html#VALsleepf", "<div class=\"info\">\n<p>Stop execution for the given number of seconds.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "sleep", "ThreadUnix.html#VALsleep", ""],
["Unix", "Unix.html", "sleep", "Unix.html#VALsleep", "<div class=\"info\">\n<p>Stop execution for the given number of seconds.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "sleep", "UnixLabels.html#VALsleep", "<div class=\"info\">\n<p>Stop execution for the given number of seconds.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "size_in_bytes", "Bigarray.Genarray.html#VALsize_in_bytes", "<div class=\"info\">\n<p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code> multiplied\n    by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p>\n\n</div>"],
["Bigarray.Array0", "Bigarray.Array0.html", "size_in_bytes", "Bigarray.Array0.html#VALsize_in_bytes", "<div class=\"info\">\n<p><code class=\"code\">size_in_bytes&nbsp;a</code> is <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "size_in_bytes", "Bigarray.Array1.html#VALsize_in_bytes", "<div class=\"info\">\n<p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code>\n    multiplied by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "size_in_bytes", "Bigarray.Array2.html#VALsize_in_bytes", "<div class=\"info\">\n<p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code>\n    multiplied by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "size_in_bytes", "Bigarray.Array3.html#VALsize_in_bytes", "<div class=\"info\">\n<p><code class=\"code\">size_in_bytes&nbsp;a</code> is the number of elements in <code class=\"code\">a</code>\n    multiplied by <code class=\"code\">a</code>'s <a href=\"Bigarray.html#VALkind_size_in_bytes\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.kind_size_in_bytes</code></a>.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "size", "Nativeint.html#VALsize", "<div class=\"info\">\n<p>The size in bits of a native integer.</p>\n\n</div>"],
["Obj", "Obj.html", "size", "Obj.html#VALsize", ""],
["Float", "Float.html", "sinh", "Float.html#VALsinh", "<div class=\"info\">\n<p>Hyperbolic sine.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "sinh", "Pervasives.html#VALsinh", ""],
["Map.S", "Map.S.html", "singleton", "Map.S.html#VALsingleton", "<div class=\"info\">\n<p><code class=\"code\">singleton&nbsp;x&nbsp;y</code> returns the one-element map that contains a binding <code class=\"code\">y</code>\n        for <code class=\"code\">x</code>.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "singleton", "MoreLabels.Map.S.html#VALsingleton", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "singleton", "MoreLabels.Set.S.html#VALsingleton", ""],
["Set.S", "Set.S.html", "singleton", "Set.S.html#VALsingleton", "<div class=\"info\">\n<p><code class=\"code\">singleton&nbsp;x</code> returns the one-element set containing only <code class=\"code\">x</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "single_write_substring", "Unix.html#VALsingle_write_substring", "<div class=\"info\">\n<p>Same as <code class=\"code\">single_write</code>, but take the data from a string instead of\n    a byte sequence.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "single_write_substring", "UnixLabels.html#VALsingle_write_substring", "<div class=\"info\">\n<p>Same as <code class=\"code\">single_write</code>, but take the data from a string instead of\n    a byte sequence.</p>\n\n</div>"],
["Unix", "Unix.html", "single_write", "Unix.html#VALsingle_write", "<div class=\"info\">\n<p>Same as <code class=\"code\">write</code>, but attempts to write only once.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "single_write", "UnixLabels.html#VALsingle_write", "<div class=\"info\">\n<p>Same as <code class=\"code\">write</code>, but attempts to write only once.</p>\n\n</div>"],
["Float", "Float.html", "sin", "Float.html#VALsin", "<div class=\"info\">\n<p>Sine.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "sin", "Pervasives.html#VALsin", ""],
["Sys", "Sys.html", "sigxfsz", "Sys.html#VALsigxfsz", "<div class=\"info\">\n<p>File size limit exceeded</p>\n\n</div>"],
["Sys", "Sys.html", "sigxcpu", "Sys.html#VALsigxcpu", "<div class=\"info\">\n<p>Timeout in cpu time</p>\n\n</div>"],
["Sys", "Sys.html", "sigvtalrm", "Sys.html#VALsigvtalrm", "<div class=\"info\">\n<p>Timeout in virtual time</p>\n\n</div>"],
["Sys", "Sys.html", "sigusr2", "Sys.html#VALsigusr2", "<div class=\"info\">\n<p>Application-defined signal 2</p>\n\n</div>"],
["Sys", "Sys.html", "sigusr1", "Sys.html#VALsigusr1", "<div class=\"info\">\n<p>Application-defined signal 1</p>\n\n</div>"],
["Sys", "Sys.html", "sigurg", "Sys.html#VALsigurg", "<div class=\"info\">\n<p>Urgent condition on socket</p>\n\n</div>"],
["Sys", "Sys.html", "sigttou", "Sys.html#VALsigttou", "<div class=\"info\">\n<p>Terminal write from background process</p>\n\n</div>"],
["Sys", "Sys.html", "sigttin", "Sys.html#VALsigttin", "<div class=\"info\">\n<p>Terminal read from background process</p>\n\n</div>"],
["Sys", "Sys.html", "sigtstp", "Sys.html#VALsigtstp", "<div class=\"info\">\n<p>Interactive stop</p>\n\n</div>"],
["Sys", "Sys.html", "sigtrap", "Sys.html#VALsigtrap", "<div class=\"info\">\n<p>Trace/breakpoint trap</p>\n\n</div>"],
["Sys", "Sys.html", "sigterm", "Sys.html#VALsigterm", "<div class=\"info\">\n<p>Termination</p>\n\n</div>"],
["Sys", "Sys.html", "sigsys", "Sys.html#VALsigsys", "<div class=\"info\">\n<p>Bad argument to routine</p>\n\n</div>"],
["Unix", "Unix.html", "sigsuspend", "Unix.html#VALsigsuspend", "<div class=\"info\">\n<p><code class=\"code\">sigsuspend&nbsp;sigs</code> atomically sets the blocked signals to <code class=\"code\">sigs</code>\n   and waits for a non-ignored, non-blocked signal to be delivered.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "sigsuspend", "UnixLabels.html#VALsigsuspend", "<div class=\"info\">\n<p><code class=\"code\">sigsuspend&nbsp;sigs</code> atomically sets the blocked signals to <code class=\"code\">sigs</code>\n   and waits for a non-ignored, non-blocked signal to be delivered.</p>\n\n</div>"],
["Sys", "Sys.html", "sigstop", "Sys.html#VALsigstop", "<div class=\"info\">\n<p>Stop</p>\n\n</div>"],
["Sys", "Sys.html", "sigsegv", "Sys.html#VALsigsegv", "<div class=\"info\">\n<p>Invalid memory reference</p>\n\n</div>"],
["Sys", "Sys.html", "sigquit", "Sys.html#VALsigquit", "<div class=\"info\">\n<p>Interactive termination</p>\n\n</div>"],
["Sys", "Sys.html", "sigprof", "Sys.html#VALsigprof", "<div class=\"info\">\n<p>Profiling interrupt</p>\n\n</div>"],
["Unix", "Unix.html", "sigprocmask", "Unix.html#VALsigprocmask", "<div class=\"info\">\n<p><code class=\"code\">sigprocmask&nbsp;cmd&nbsp;sigs</code> changes the set of blocked signals.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "sigprocmask", "UnixLabels.html#VALsigprocmask", "<div class=\"info\">\n<p><code class=\"code\">sigprocmask&nbsp;cmd&nbsp;sigs</code> changes the set of blocked signals.</p>\n\n</div>"],
["Sys", "Sys.html", "sigpoll", "Sys.html#VALsigpoll", "<div class=\"info\">\n<p>Pollable event</p>\n\n</div>"],
["Sys", "Sys.html", "sigpipe", "Sys.html#VALsigpipe", "<div class=\"info\">\n<p>Broken pipe</p>\n\n</div>"],
["Unix", "Unix.html", "sigpending", "Unix.html#VALsigpending", "<div class=\"info\">\n<p>Return the set of blocked signals that are currently pending.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "sigpending", "UnixLabels.html#VALsigpending", "<div class=\"info\">\n<p>Return the set of blocked signals that are currently pending.</p>\n\n</div>"],
["Condition", "Condition.html", "signal", "Condition.html#VALsignal", "<div class=\"info\">\n<p><code class=\"code\">signal&nbsp;c</code> restarts one of the processes waiting on the\n   condition variable <code class=\"code\">c</code>.</p>\n\n</div>"],
["Sys", "Sys.html", "signal", "Sys.html#VALsignal", "<div class=\"info\">\n<p>Set the behavior of the system on receipt of a given signal.</p>\n\n</div>"],
["Float", "Float.html", "sign_bit", "Float.html#VALsign_bit", "<div class=\"info\">\n<p><code class=\"code\">sign_bit&nbsp;x</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff the sign bit of <code class=\"code\">x</code> is set.</p>\n\n</div>"],
["Thread", "Thread.html", "sigmask", "Thread.html#VALsigmask", "<div class=\"info\">\n<p><code class=\"code\">sigmask&nbsp;cmd&nbsp;sigs</code> changes the set of blocked signals for the\n   calling thread.</p>\n\n</div>"],
["Sys", "Sys.html", "sigkill", "Sys.html#VALsigkill", "<div class=\"info\">\n<p>Termination (cannot be ignored)</p>\n\n</div>"],
["Sys", "Sys.html", "sigint", "Sys.html#VALsigint", "<div class=\"info\">\n<p>Interactive interrupt (ctrl-C)</p>\n\n</div>"],
["Sys", "Sys.html", "sigill", "Sys.html#VALsigill", "<div class=\"info\">\n<p>Invalid hardware instruction</p>\n\n</div>"],
["Sys", "Sys.html", "sighup", "Sys.html#VALsighup", "<div class=\"info\">\n<p>Hangup on controlling terminal</p>\n\n</div>"],
["Sys", "Sys.html", "sigfpe", "Sys.html#VALsigfpe", "<div class=\"info\">\n<p>Arithmetic exception</p>\n\n</div>"],
["Sys", "Sys.html", "sigcont", "Sys.html#VALsigcont", "<div class=\"info\">\n<p>Continue</p>\n\n</div>"],
["Sys", "Sys.html", "sigchld", "Sys.html#VALsigchld", "<div class=\"info\">\n<p>Child process terminated</p>\n\n</div>"],
["Sys", "Sys.html", "sigbus", "Sys.html#VALsigbus", "<div class=\"info\">\n<p>Bus error</p>\n\n</div>"],
["Sys", "Sys.html", "sigalrm", "Sys.html#VALsigalrm", "<div class=\"info\">\n<p>Timeout</p>\n\n</div>"],
["Sys", "Sys.html", "sigabrt", "Sys.html#VALsigabrt", "<div class=\"info\">\n<p>Abnormal termination</p>\n\n</div>"],
["Unix", "Unix.html", "shutdown_connection", "Unix.html#VALshutdown_connection", "<div class=\"info\">\n<p>``Shut down'' a connection established with <a href=\"Unix.html#VALopen_connection\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_connection</code></a>;\n   that is, transmit an end-of-file condition to the server reading\n   on the other side of the connection.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "shutdown_connection", "UnixLabels.html#VALshutdown_connection", "<div class=\"info\">\n<p>``Shut down'' a connection established with <a href=\"UnixLabels.html#VALopen_connection\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_connection</code></a>;\n   that is, transmit an end-of-file condition to the server reading\n   on the other side of the connection.</p>\n\n</div>"],
["Unix", "Unix.html", "shutdown", "Unix.html#VALshutdown", "<div class=\"info\">\n<p>Shutdown a socket connection.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "shutdown", "UnixLabels.html#VALshutdown", "<div class=\"info\">\n<p>Shutdown a socket connection.</p>\n\n</div>"],
["Int", "Int.html", "shift_right_logical", "Int.html#VALshift_right_logical", "<div class=\"info\">\n<p><code class=\"code\">shift_right&nbsp;x&nbsp;n</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">n</code> bits.</p>\n\n</div>"],
["Int32", "Int32.html", "shift_right_logical", "Int32.html#VALshift_right_logical", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p>\n\n</div>"],
["Int64", "Int64.html", "shift_right_logical", "Int64.html#VALshift_right_logical", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "shift_right_logical", "Nativeint.html#VALshift_right_logical", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_right_logical&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right\n   by <code class=\"code\">y</code> bits.</p>\n\n</div>"],
["Int", "Int.html", "shift_right", "Int.html#VALshift_right", "<div class=\"info\">\n<p><code class=\"code\">shift_right&nbsp;x&nbsp;n</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">n</code> bits.</p>\n\n</div>"],
["Int32", "Int32.html", "shift_right", "Int32.html#VALshift_right", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p>\n\n</div>"],
["Int64", "Int64.html", "shift_right", "Int64.html#VALshift_right", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "shift_right", "Nativeint.html#VALshift_right", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_right&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the right by <code class=\"code\">y</code> bits.</p>\n\n</div>"],
["Int", "Int.html", "shift_left", "Int.html#VALshift_left", "<div class=\"info\">\n<p><code class=\"code\">shift_left&nbsp;x&nbsp;n</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">n</code> bits.</p>\n\n</div>"],
["Int32", "Int32.html", "shift_left", "Int32.html#VALshift_left", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Int32</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.</p>\n\n</div>"],
["Int64", "Int64.html", "shift_left", "Int64.html#VALshift_left", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Int64</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "shift_left", "Nativeint.html#VALshift_left", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Nativeint</span>.shift_left&nbsp;x&nbsp;y</code> shifts <code class=\"code\">x</code> to the left by <code class=\"code\">y</code> bits.</p>\n\n</div>"],
["Unix", "Unix.html", "setuid", "Unix.html#VALsetuid", "<div class=\"info\">\n<p>Set the real user id and effective user id for the process.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "setuid", "UnixLabels.html#VALsetuid", "<div class=\"info\">\n<p>Set the real user id and effective user id for the process.</p>\n\n</div>"],
["Unix", "Unix.html", "setsockopt_optint", "Unix.html#VALsetsockopt_optint", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is an\n   <code class=\"code\">int&nbsp;option</code>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "setsockopt_optint", "UnixLabels.html#VALsetsockopt_optint", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is\n    an <code class=\"code\">int&nbsp;option</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "setsockopt_int", "Unix.html#VALsetsockopt_int", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for an integer-valued socket option.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "setsockopt_int", "UnixLabels.html#VALsetsockopt_int", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for an integer-valued socket option.</p>\n\n</div>"],
["Unix", "Unix.html", "setsockopt_float", "Unix.html#VALsetsockopt_float", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is a\n   floating-point number.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "setsockopt_float", "UnixLabels.html#VALsetsockopt_float", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALsetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.setsockopt</code></a> for a socket option whose value is a\n    floating-point number.</p>\n\n</div>"],
["Unix", "Unix.html", "setsockopt", "Unix.html#VALsetsockopt", "<div class=\"info\">\n<p>Set or clear a boolean-valued option in the given socket.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "setsockopt", "UnixLabels.html#VALsetsockopt", "<div class=\"info\">\n<p>Set or clear a boolean-valued option in the given socket.</p>\n\n</div>"],
["Unix", "Unix.html", "setsid", "Unix.html#VALsetsid", "<div class=\"info\">\n<p>Put the calling process in a new session and detach it from\n   its controlling terminal.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "setsid", "UnixLabels.html#VALsetsid", "<div class=\"info\">\n<p>Put the calling process in a new session and detach it from\n   its controlling terminal.</p>\n\n</div>"],
["Unix", "Unix.html", "setitimer", "Unix.html#VALsetitimer", "<div class=\"info\">\n<p><code class=\"code\">setitimer&nbsp;t&nbsp;s</code> sets the interval timer <code class=\"code\">t</code> and returns\n   its previous status.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "setitimer", "UnixLabels.html#VALsetitimer", "<div class=\"info\">\n<p><code class=\"code\">setitimer&nbsp;t&nbsp;s</code> sets the interval timer <code class=\"code\">t</code> and returns\n   its previous status.</p>\n\n</div>"],
["Unix", "Unix.html", "setgroups", "Unix.html#VALsetgroups", "<div class=\"info\">\n<p><code class=\"code\">setgroups&nbsp;groups</code> sets the supplementary group IDs for the\n    calling process.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "setgroups", "UnixLabels.html#VALsetgroups", "<div class=\"info\">\n<p><code class=\"code\">setgroups&nbsp;groups</code> sets the supplementary group IDs for the\n      calling process.</p>\n\n</div>"],
["Unix", "Unix.html", "setgid", "Unix.html#VALsetgid", "<div class=\"info\">\n<p>Set the real group id and effective group id for the process.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "setgid", "UnixLabels.html#VALsetgid", "<div class=\"info\">\n<p>Set the real group id and effective group id for the process.</p>\n\n</div>"],
["Printexc", "Printexc.html", "set_uncaught_exception_handler", "Printexc.html#VALset_uncaught_exception_handler", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.set_uncaught_exception_handler&nbsp;fn</code> registers <code class=\"code\">fn</code> as the handler\n    for uncaught exceptions.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_uint8", "Bytes.html#VALset_uint8", "<div class=\"info\">\n<p><code class=\"code\">set_uint8&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s unsigned 8-bit integer starting at byte index\n    <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_uint8", "BytesLabels.html#VALset_uint8", "<div class=\"info\">\n<p><code class=\"code\">set_uint8&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s unsigned 8-bit integer starting at byte index\n    <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_uint16_ne", "Bytes.html#VALset_uint16_ne", "<div class=\"info\">\n<p><code class=\"code\">set_uint16_ne&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s native-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_uint16_ne", "BytesLabels.html#VALset_uint16_ne", "<div class=\"info\">\n<p><code class=\"code\">set_uint16_ne&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s native-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_uint16_le", "Bytes.html#VALset_uint16_le", "<div class=\"info\">\n<p><code class=\"code\">set_uint16_le&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s little-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_uint16_le", "BytesLabels.html#VALset_uint16_le", "<div class=\"info\">\n<p><code class=\"code\">set_uint16_le&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s little-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_uint16_be", "Bytes.html#VALset_uint16_be", "<div class=\"info\">\n<p><code class=\"code\">set_uint16_be&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s big-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_uint16_be", "BytesLabels.html#VALset_uint16_be", "<div class=\"info\">\n<p><code class=\"code\">set_uint16_be&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s big-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Parsing", "Parsing.html", "set_trace", "Parsing.html#VALset_trace", "<div class=\"info\">\n<p>Control debugging support for <code class=\"code\">ocamlyacc</code>-generated parsers.</p>\n\n</div>"],
["Filename", "Filename.html", "set_temp_dir_name", "Filename.html#VALset_temp_dir_name", "<div class=\"info\">\n<p>Change the temporary directory returned by <a href=\"Filename.html#VALget_temp_dir_name\"><code class=\"code\"><span class=\"constructor\">Filename</span>.get_temp_dir_name</code></a>\n    and used by <a href=\"Filename.html#VALtemp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.temp_file</code></a> and <a href=\"Filename.html#VALopen_temp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.open_temp_file</code></a>.</p>\n\n</div>"],
["Format", "Format.html", "set_tags", "Format.html#VALset_tags", "<div class=\"info\">\n<p><code class=\"code\">pp_set_tags&nbsp;ppf&nbsp;b</code> turns on or off the treatment of semantic tags\n  (default is off).</p>\n\n</div>"],
["Obj", "Obj.html", "set_tag", "Obj.html#VALset_tag", ""],
["Format", "Format.html", "set_tab", "Format.html#VALset_tab", "<div class=\"info\">\n<p>Sets a tabulation marker at current insertion point.</p>\n\n</div>"],
["Random", "Random.html", "set_state", "Random.html#VALset_state", "<div class=\"info\">\n<p>Set the state of the generator used by the basic functions.</p>\n\n</div>"],
["Sys", "Sys.html", "set_signal", "Sys.html#VALset_signal", "<div class=\"info\">\n<p>Same as <a href=\"Sys.html#VALsignal\"><code class=\"code\"><span class=\"constructor\">Sys</span>.signal</code></a> but return value is ignored.</p>\n\n</div>"],
["Format", "Format.html", "set_print_tags", "Format.html#VALset_print_tags", "<div class=\"info\">\n<p><code class=\"code\">pp_set_print_tags&nbsp;ppf&nbsp;b</code> turns on or off the tag-printing operations.</p>\n\n</div>"],
["Unix", "Unix.html", "set_nonblock", "Unix.html#VALset_nonblock", "<div class=\"info\">\n<p>Set the ``non-blocking'' flag on the given descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "set_nonblock", "UnixLabels.html#VALset_nonblock", "<div class=\"info\">\n<p>Set the ``non-blocking'' flag on the given descriptor.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "set_methods", "CamlinternalOO.html#VALset_methods", ""],
["CamlinternalOO", "CamlinternalOO.html", "set_method", "CamlinternalOO.html#VALset_method", ""],
["Format", "Format.html", "set_max_indent", "Format.html#VALset_max_indent", "<div class=\"info\">\n<p><code class=\"code\">pp_set_max_indent&nbsp;ppf&nbsp;d</code> sets the maximum indentation limit of lines\n  to <code class=\"code\">d</code> (in characters):\n  once this limit is reached, new pretty-printing boxes are rejected to the\n  left, unless the enclosing box fully fits on the current line.</p>\n\n</div>"],
["Format", "Format.html", "set_max_boxes", "Format.html#VALset_max_boxes", "<div class=\"info\">\n<p><code class=\"code\">pp_set_max_boxes&nbsp;ppf&nbsp;max</code> sets the maximum number of pretty-printing\n    boxes simultaneously open.</p>\n\n</div>"],
["Format", "Format.html", "set_mark_tags", "Format.html#VALset_mark_tags", "<div class=\"info\">\n<p><code class=\"code\">pp_set_mark_tags&nbsp;ppf&nbsp;b</code> turns on or off the tag-marking operations.</p>\n\n</div>"],
["Format", "Format.html", "set_margin", "Format.html#VALset_margin", "<div class=\"info\">\n<p><code class=\"code\">pp_set_margin&nbsp;ppf&nbsp;d</code> sets the right margin to <code class=\"code\">d</code> (in characters):\n  the pretty-printer splits lines that overflow the right margin according to\n  the break hints given.</p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "set_key2", "Ephemeron.K2.html#VALset_key2", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "set_key1", "Ephemeron.K2.html#VALset_key1", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "set_key", "Ephemeron.K1.html#VALset_key", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key&nbsp;eph&nbsp;el</code> sets the key of <code class=\"code\">eph</code> to be a\n      (full) key to <code class=\"code\">el</code></p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "set_key", "Ephemeron.Kn.html#VALset_key", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "set_key", "Obj.Ephemeron.html#VALset_key", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_key</code></a></p>\n\n</div>"],
["Bytes", "Bytes.html", "set_int8", "Bytes.html#VALset_int8", "<div class=\"info\">\n<p><code class=\"code\">set_int8&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s signed 8-bit integer starting at byte index\n    <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_int8", "BytesLabels.html#VALset_int8", "<div class=\"info\">\n<p><code class=\"code\">set_int8&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s signed 8-bit integer starting at byte index\n    <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_int64_ne", "Bytes.html#VALset_int64_ne", "<div class=\"info\">\n<p><code class=\"code\">set_int64_ne&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s native-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_int64_ne", "BytesLabels.html#VALset_int64_ne", "<div class=\"info\">\n<p><code class=\"code\">set_int64_ne&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s native-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_int64_le", "Bytes.html#VALset_int64_le", "<div class=\"info\">\n<p><code class=\"code\">set_int64_le&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s little-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_int64_le", "BytesLabels.html#VALset_int64_le", "<div class=\"info\">\n<p><code class=\"code\">set_int64_le&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s little-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_int64_be", "Bytes.html#VALset_int64_be", "<div class=\"info\">\n<p><code class=\"code\">set_int64_be&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s big-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_int64_be", "BytesLabels.html#VALset_int64_be", "<div class=\"info\">\n<p><code class=\"code\">set_int64_be&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s big-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_int32_ne", "Bytes.html#VALset_int32_ne", "<div class=\"info\">\n<p><code class=\"code\">set_int32_ne&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s native-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_int32_ne", "BytesLabels.html#VALset_int32_ne", "<div class=\"info\">\n<p><code class=\"code\">set_int32_ne&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s native-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_int32_le", "Bytes.html#VALset_int32_le", "<div class=\"info\">\n<p><code class=\"code\">set_int32_le&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s little-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_int32_le", "BytesLabels.html#VALset_int32_le", "<div class=\"info\">\n<p><code class=\"code\">set_int32_le&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s little-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_int32_be", "Bytes.html#VALset_int32_be", "<div class=\"info\">\n<p><code class=\"code\">set_int32_be&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s big-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_int32_be", "BytesLabels.html#VALset_int32_be", "<div class=\"info\">\n<p><code class=\"code\">set_int32_be&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s big-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_int16_ne", "Bytes.html#VALset_int16_ne", "<div class=\"info\">\n<p><code class=\"code\">set_int16_ne&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s native-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_int16_ne", "BytesLabels.html#VALset_int16_ne", "<div class=\"info\">\n<p><code class=\"code\">set_int16_ne&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s native-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_int16_le", "Bytes.html#VALset_int16_le", "<div class=\"info\">\n<p><code class=\"code\">set_int16_le&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s little-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_int16_le", "BytesLabels.html#VALset_int16_le", "<div class=\"info\">\n<p><code class=\"code\">set_int16_le&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s little-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set_int16_be", "Bytes.html#VALset_int16_be", "<div class=\"info\">\n<p><code class=\"code\">set_int16_be&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s big-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set_int16_be", "BytesLabels.html#VALset_int16_be", "<div class=\"info\">\n<p><code class=\"code\">set_int16_be&nbsp;b&nbsp;i&nbsp;v</code> sets <code class=\"code\">b</code>'s big-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code> to <code class=\"code\">v</code>.</p>\n\n</div>"],
["Format", "Format.html", "set_geometry", "Format.html#VALset_geometry", ""],
["Format", "Format.html", "set_formatter_tag_functions", "Format.html#VALset_formatter_tag_functions", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Format", "Format.html", "set_formatter_stag_functions", "Format.html#VALset_formatter_stag_functions", "<div class=\"info\">\n<p><code class=\"code\">pp_set_formatter_stag_functions&nbsp;ppf&nbsp;tag_funs</code> changes the meaning of\n  opening and closing semantic tag operations to use the functions in\n  <code class=\"code\">tag_funs</code> when printing on <code class=\"code\">ppf</code>.</p>\n\n</div>"],
["Format", "Format.html", "set_formatter_output_functions", "Format.html#VALset_formatter_output_functions", "<div class=\"info\">\n<p><code class=\"code\">pp_set_formatter_output_functions&nbsp;ppf&nbsp;out&nbsp;flush</code> redirects the\n  standard pretty-printer output functions to the functions <code class=\"code\">out</code> and\n  <code class=\"code\">flush</code>.</p>\n\n</div>"],
["Format", "Format.html", "set_formatter_out_functions", "Format.html#VALset_formatter_out_functions", "<div class=\"info\">\n<p><code class=\"code\">pp_set_formatter_out_functions&nbsp;ppf&nbsp;out_funs</code>\n  Set all the pretty-printer output functions of <code class=\"code\">ppf</code> to those of\n  argument <code class=\"code\">out_funs</code>,</p>\n\n</div>"],
["Format", "Format.html", "set_formatter_out_channel", "Format.html#VALset_formatter_out_channel", "<div class=\"info\">\n<p>Redirect the standard pretty-printer output to the given channel.</p>\n\n</div>"],
["Obj", "Obj.html", "set_field", "Obj.html#VALset_field", "<div class=\"info\">\n<p>When using flambda:</p>\n\n</div>"],
["Format", "Format.html", "set_ellipsis_text", "Format.html#VALset_ellipsis_text", "<div class=\"info\">\n<p>Set the text of the ellipsis printed when too many pretty-printing boxes\n  are open (a single dot, <code class=\"code\">.</code>, by default).</p>\n\n</div>"],
["Obj", "Obj.html", "set_double_field", "Obj.html#VALset_double_field", ""],
["Ephemeron.K1", "Ephemeron.K1.html", "set_data", "Ephemeron.K1.html#VALset_data", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data&nbsp;eph&nbsp;el</code> sets the data of <code class=\"code\">eph</code> to be a\n      (full) data to <code class=\"code\">el</code></p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "set_data", "Ephemeron.K2.html#VALset_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data</code></a></p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "set_data", "Ephemeron.Kn.html#VALset_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "set_data", "Obj.Ephemeron.html#VALset_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALset_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.set_data</code></a></p>\n\n</div>"],
["Unix", "Unix.html", "set_close_on_exec", "Unix.html#VALset_close_on_exec", "<div class=\"info\">\n<p>Set the ``close-on-exec'' flag on the given descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "set_close_on_exec", "UnixLabels.html#VALset_close_on_exec", "<div class=\"info\">\n<p>Set the ``close-on-exec'' flag on the given descriptor.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "set_binary_mode_out", "Pervasives.html#VALset_binary_mode_out", ""],
["Pervasives", "Pervasives.html", "set_binary_mode_in", "Pervasives.html#VALset_binary_mode_in", ""],
["Dynlink", "Dynlink.html", "set_allowed_units", "Dynlink.html#VALset_allowed_units", "<div class=\"info\">\n<p>Set the list of compilation units that may be referenced from units that\n    are dynamically loaded in the future to be exactly the given value.</p>\n\n</div>"],
["Format", "Format.html", "set_all_formatter_output_functions", "Format.html#VALset_all_formatter_output_functions", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Array", "Array.html", "set", "Array.html#VALset", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code> modifies array <code class=\"code\">a</code> in place, replacing\n   element number <code class=\"code\">n</code> with <code class=\"code\">x</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "set", "ArrayLabels.html#VALset", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.set&nbsp;a&nbsp;n&nbsp;x</code> modifies array <code class=\"code\">a</code> in place, replacing\n   element number <code class=\"code\">n</code> with <code class=\"code\">x</code>.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "set", "Bigarray.Genarray.html#VALset", "<div class=\"info\">\n<p>Assign an element of a generic Bigarray.</p>\n\n</div>"],
["Bigarray.Array0", "Bigarray.Array0.html", "set", "Bigarray.Array0.html#VALset", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array0</span>.set&nbsp;a&nbsp;x&nbsp;v</code> stores the value <code class=\"code\">v</code> in <code class=\"code\">a</code>.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "set", "Bigarray.Array1.html#VALset", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array1</span>.set&nbsp;a&nbsp;x&nbsp;v</code>, also written <code class=\"code\">a.{x}&nbsp;&lt;-&nbsp;v</code>,\n     stores the value <code class=\"code\">v</code> at index <code class=\"code\">x</code> in <code class=\"code\">a</code>.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "set", "Bigarray.Array2.html#VALset", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array2</span>.set&nbsp;a&nbsp;x&nbsp;y&nbsp;v</code>, or alternatively <code class=\"code\">a.{x,y}&nbsp;&lt;-&nbsp;v</code>,\n     stores the value <code class=\"code\">v</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>) in <code class=\"code\">a</code>.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "set", "Bigarray.Array3.html#VALset", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array3</span>.set&nbsp;a&nbsp;x&nbsp;y&nbsp;v</code>, or alternatively <code class=\"code\">a.{x,y,z}&nbsp;&lt;-&nbsp;v</code>,\n     stores the value <code class=\"code\">v</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>, <code class=\"code\">z</code>) in <code class=\"code\">a</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "set", "Bytes.html#VALset", "<div class=\"info\">\n<p><code class=\"code\">set&nbsp;s&nbsp;n&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code>\n    with <code class=\"code\">c</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "set", "BytesLabels.html#VALset", "<div class=\"info\">\n<p><code class=\"code\">set&nbsp;s&nbsp;n&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing the byte at index <code class=\"code\">n</code>\n    with <code class=\"code\">c</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "set", "Float.Array.html#VALset", "<div class=\"info\">\n<p><code class=\"code\">set&nbsp;a&nbsp;n&nbsp;x</code> modifies floatarray <code class=\"code\">a</code> in place, replacing element\n      number <code class=\"code\">n</code> with <code class=\"code\">x</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "set", "Float.ArrayLabels.html#VALset", ""],
["Gc", "Gc.html", "set", "Gc.html#VALset", "<div class=\"info\">\n<p><code class=\"code\">set&nbsp;r</code> changes the GC parameters according to the <code class=\"code\">control</code> record <code class=\"code\">r</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "set", "StringLabels.html#VALset", "<div class=\"info\">\n<span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>.</p>\n\n</span></div>"],
["String", "String.html", "set", "String.html#VALset", "<div class=\"info\">\n<span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.set&nbsp;s&nbsp;n&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing the byte at index <code class=\"code\">n</code> with <code class=\"code\">c</code>.</p>\n\n</span></div>"],
["Weak", "Weak.html", "set", "Weak.html#VALset", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.set&nbsp;ar&nbsp;n&nbsp;(<span class=\"constructor\">Some</span>&nbsp;el)</code> sets the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> to be a\n   (full) pointer to <code class=\"code\">el</code>; <code class=\"code\"><span class=\"constructor\">Weak</span>.set&nbsp;ar&nbsp;n&nbsp;<span class=\"constructor\">None</span></code> sets the <code class=\"code\">n</code>th\n   cell of <code class=\"code\">ar</code> to empty.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "sendto_substring", "ThreadUnix.html#VALsendto_substring", ""],
["Unix", "Unix.html", "sendto_substring", "Unix.html#VALsendto_substring", "<div class=\"info\">\n<p>Same as <code class=\"code\">sendto</code>, but take the data from a string instead of a\n    byte sequence.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "sendto_substring", "UnixLabels.html#VALsendto_substring", "<div class=\"info\">\n<p>Same as <code class=\"code\">sendto</code>, but take the data from a string instead of a\n    byte sequence.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "sendto", "ThreadUnix.html#VALsendto", ""],
["Unix", "Unix.html", "sendto", "Unix.html#VALsendto", "<div class=\"info\">\n<p>Send data over an unconnected socket.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "sendto", "UnixLabels.html#VALsendto", "<div class=\"info\">\n<p>Send data over an unconnected socket.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "sendself", "CamlinternalOO.html#VALsendself", ""],
["CamlinternalOO", "CamlinternalOO.html", "sendcache", "CamlinternalOO.html#VALsendcache", ""],
["ThreadUnix", "ThreadUnix.html", "send_substring", "ThreadUnix.html#VALsend_substring", ""],
["Unix", "Unix.html", "send_substring", "Unix.html#VALsend_substring", "<div class=\"info\">\n<p>Same as <code class=\"code\">send</code>, but take the data from a string instead of a byte\n    sequence.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "send_substring", "UnixLabels.html#VALsend_substring", "<div class=\"info\">\n<p>Same as <code class=\"code\">send</code>, but take the data from a string instead of a byte\n    sequence.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "send", "CamlinternalOO.html#VALsend", ""],
["Event", "Event.html", "send", "Event.html#VALsend", "<div class=\"info\">\n<p><code class=\"code\">send&nbsp;ch&nbsp;v</code> returns the event consisting in sending the value <code class=\"code\">v</code>\n   over the channel <code class=\"code\">ch</code>.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "send", "ThreadUnix.html#VALsend", ""],
["Unix", "Unix.html", "send", "Unix.html#VALsend", "<div class=\"info\">\n<p>Send data over a connected socket.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "send", "UnixLabels.html#VALsend", "<div class=\"info\">\n<p>Send data over a connected socket.</p>\n\n</div>"],
["Random", "Random.html", "self_init", "Random.html#VALself_init", "<div class=\"info\">\n<p>Initialize the generator with a random seed chosen\n   in a system-dependent way.</p>\n\n</div>"],
["Thread", "Thread.html", "self", "Thread.html#VALself", "<div class=\"info\">\n<p>Return the thread currently executing.</p>\n\n</div>"],
["Event", "Event.html", "select", "Event.html#VALselect", "<div class=\"info\">\n<p>'Synchronize' on an alternative of events.</p>\n\n</div>"],
["Thread", "Thread.html", "select", "Thread.html#VALselect", "<div class=\"info\">\n<p>Suspend the execution of the calling thread until input/output\n   becomes possible on the given Unix file descriptors.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "select", "ThreadUnix.html#VALselect", ""],
["Unix", "Unix.html", "select", "Unix.html#VALselect", "<div class=\"info\">\n<p>Wait until some input/output operations become possible on\n   some channels.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "select", "UnixLabels.html#VALselect", "<div class=\"info\">\n<p>Wait until some input/output operations become possible on\n   some channels.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "seek_out", "Pervasives.html#VALseek_out", ""],
["Stdlib.LargeFile", "Stdlib.LargeFile.html", "seek_out", "Stdlib.LargeFile.html#VALseek_out", ""],
["Pervasives", "Pervasives.html", "seek_in", "Pervasives.html#VALseek_in", ""],
["Stdlib.LargeFile", "Stdlib.LargeFile.html", "seek_in", "Stdlib.LargeFile.html#VALseek_in", ""],
["Hashtbl", "Hashtbl.html", "seeded_hash_param", "Hashtbl.html#VALseeded_hash_param", "<div class=\"info\">\n<p>A variant of <a href=\"Hashtbl.html#VALhash_param\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash_param</code></a> that is further parameterized by\n   an integer seed.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "seeded_hash_param", "MoreLabels.Hashtbl.html#VALseeded_hash_param", ""],
["Hashtbl", "Hashtbl.html", "seeded_hash", "Hashtbl.html#VALseeded_hash", "<div class=\"info\">\n<p>A variant of <a href=\"Hashtbl.html#VALhash\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash</code></a> that is further parameterized by\n   an integer seed.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "seeded_hash", "MoreLabels.Hashtbl.html#VALseeded_hash", ""],
["Str", "Str.html", "search_forward", "Str.html#VALsearch_forward", "<div class=\"info\">\n<p><code class=\"code\">search_forward&nbsp;r&nbsp;s&nbsp;start</code> searches the string <code class=\"code\">s</code> for a substring\n   matching the regular expression <code class=\"code\">r</code>.</p>\n\n</div>"],
["Str", "Str.html", "search_backward", "Str.html#VALsearch_backward", "<div class=\"info\">\n<p><code class=\"code\">search_backward&nbsp;r&nbsp;s&nbsp;last</code> searches the string <code class=\"code\">s</code> for a\n  substring matching the regular expression <code class=\"code\">r</code>.</p>\n\n</div>"],
["Scanf", "Scanf.html", "scanf", "Scanf.html#VALscanf", "<div class=\"info\">\n<p>Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but reads from the predefined formatted input\n    channel <a href=\"Scanf.Scanning.html#VALstdin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.stdin</code></a> that is connected to <a href=\"Stdlib.html#VALstdin\"><code class=\"code\">stdin</code></a>.</p>\n\n</div>"],
["Spacetime", "Spacetime.html", "save_event_for_automatic_snapshots", "Spacetime.html#VALsave_event_for_automatic_snapshots", "<div class=\"info\">\n<p>Like <a href=\"Spacetime.Series.html#VALsave_event\"><code class=\"code\"><span class=\"constructor\">Spacetime</span>.<span class=\"constructor\">Series</span>.save_event</code></a>, but writes to the automatic snapshot file.</p>\n\n</div>"],
["Spacetime.Series", "Spacetime.Series.html", "save_event", "Spacetime.Series.html#VALsave_event", "<div class=\"info\">\n<p><code class=\"code\">save_event</code> writes an event, which is an arbitrary string, into the\n      given series file.</p>\n\n</div>"],
["Spacetime.Series", "Spacetime.Series.html", "save_and_close", "Spacetime.Series.html#VALsave_and_close", "<div class=\"info\">\n<p><code class=\"code\">save_and_close&nbsp;series</code> writes information into <code class=\"code\">series</code> required for\n      interpreting the snapshots that <code class=\"code\">series</code> contains and then closes the\n      <code class=\"code\">series</code> file.</p>\n\n</div>"],
["Format", "Format.html", "safe_set_geometry", "Format.html#VALsafe_set_geometry", "<div class=\"info\">\n<p><code class=\"code\">pp_set_geometry&nbsp;ppf&nbsp;~max_indent&nbsp;~margin</code> sets both the margin\n   and maximum indentation limit for <code class=\"code\">ppf</code>.</p>\n\n</div>"],
["Sys", "Sys.html", "runtime_warnings_enabled", "Sys.html#VALruntime_warnings_enabled", "<div class=\"info\">\n<p>Return whether runtime warnings are currently enabled.</p>\n\n</div>"],
["Sys", "Sys.html", "runtime_variant", "Sys.html#VALruntime_variant", "<div class=\"info\">\n<p>Return the name of the runtime variant the program is running on.</p>\n\n</div>"],
["Sys", "Sys.html", "runtime_parameters", "Sys.html#VALruntime_parameters", "<div class=\"info\">\n<p>Return the value of the runtime parameters, in the same format\n    as the contents of the <code class=\"code\"><span class=\"constructor\">OCAMLRUNPARAM</span></code> environment variable.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "run_initializers_opt", "CamlinternalOO.html#VALrun_initializers_opt", ""],
["CamlinternalOO", "CamlinternalOO.html", "run_initializers", "CamlinternalOO.html#VALrun_initializers", ""],
["Float", "Float.html", "round", "Float.html#VALround", "<div class=\"info\">\n<p><code class=\"code\">round&nbsp;x</code> rounds <code class=\"code\">x</code> to the nearest integer with ties (fractional\n   values of 0.5) rounded away from zero, regardless of the current\n   rounding direction.</p>\n\n</div>"],
["Unix", "Unix.html", "rmdir", "Unix.html#VALrmdir", "<div class=\"info\">\n<p>Remove an empty directory.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "rmdir", "UnixLabels.html#VALrmdir", "<div class=\"info\">\n<p>Remove an empty directory.</p>\n\n</div>"],
["Bytes", "Bytes.html", "rindex_opt", "Bytes.html#VALrindex_opt", "<div class=\"info\">\n<p><code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "rindex_opt", "BytesLabels.html#VALrindex_opt", "<div class=\"info\">\n<p><code class=\"code\">rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "rindex_opt", "StringLabels.html#VALrindex_opt", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence\n    of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in\n    <code class=\"code\">s</code>.</p>\n\n</div>"],
["String", "String.html", "rindex_opt", "String.html#VALrindex_opt", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_opt&nbsp;s&nbsp;c</code> returns the index of the last occurrence\n    of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in\n    <code class=\"code\">s</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "rindex_from_opt", "Bytes.html#VALrindex_from_opt", "<div class=\"info\">\n<p><code class=\"code\">rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence\n    of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not\n    occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "rindex_from_opt", "BytesLabels.html#VALrindex_from_opt", "<div class=\"info\">\n<p><code class=\"code\">rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence\n    of byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not\n    occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "rindex_from_opt", "StringLabels.html#VALrindex_from_opt", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>\n   or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n</div>"],
["String", "String.html", "rindex_from_opt", "String.html#VALrindex_from_opt", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>\n   or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "rindex_from", "Bytes.html#VALrindex_from", "<div class=\"info\">\n<p><code class=\"code\">rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "rindex_from", "BytesLabels.html#VALrindex_from", "<div class=\"info\">\n<p><code class=\"code\">rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the last occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "rindex_from", "StringLabels.html#VALrindex_from", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n</div>"],
["String", "String.html", "rindex_from", "String.html#VALrindex_from", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   last occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> before position <code class=\"code\">i+1</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "rindex", "Bytes.html#VALrindex", "<div class=\"info\">\n<p><code class=\"code\">rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "rindex", "BytesLabels.html#VALrindex", "<div class=\"info\">\n<p><code class=\"code\">rindex&nbsp;s&nbsp;c</code> returns the index of the last occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "rindex", "StringLabels.html#VALrindex", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> returns the index of the last\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n</div>"],
["String", "String.html", "rindex", "String.html#VALrindex", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rindex&nbsp;s&nbsp;c</code> returns the index of the last\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n</div>"],
["Parsing", "Parsing.html", "rhs_start_pos", "Parsing.html#VALrhs_start_pos", "<div class=\"info\">\n<p>Same as <code class=\"code\">rhs_start</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n\n</div>"],
["Parsing", "Parsing.html", "rhs_start", "Parsing.html#VALrhs_start", "<div class=\"info\">\n<p>Same as <a href=\"Parsing.html#VALsymbol_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_start</code></a> and <a href=\"Parsing.html#VALsymbol_end\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.symbol_end</code></a>, but\n   return the offset of the string matching the <code class=\"code\">n</code>th item on the\n   right-hand side of the rule, where <code class=\"code\">n</code> is the integer parameter\n   to <code class=\"code\">rhs_start</code> and <code class=\"code\">rhs_end</code>.</p>\n\n</div>"],
["Parsing", "Parsing.html", "rhs_end_pos", "Parsing.html#VALrhs_end_pos", "<div class=\"info\">\n<p>Same as <code class=\"code\">rhs_end</code>, but return a <code class=\"code\">position</code> instead of an offset.</p>\n\n</div>"],
["Parsing", "Parsing.html", "rhs_end", "Parsing.html#VALrhs_end", "<div class=\"info\">\n<p>See <a href=\"Parsing.html#VALrhs_start\"><code class=\"code\"><span class=\"constructor\">Parsing</span>.rhs_start</code></a>.</p>\n\n</div>"],
["Unix", "Unix.html", "rewinddir", "Unix.html#VALrewinddir", "<div class=\"info\">\n<p>Reposition the descriptor to the beginning of the directory</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "rewinddir", "UnixLabels.html#VALrewinddir", "<div class=\"info\">\n<p>Reposition the descriptor to the beginning of the directory</p>\n\n</div>"],
["List", "List.html", "rev_map2", "List.html#VALrev_map2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map2&nbsp;f&nbsp;l1&nbsp;l2</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">List</span>.map2</code></a><code class=\"code\">&nbsp;f&nbsp;l1&nbsp;l2)</code>, but is tail-recursive and\n   more efficient.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "rev_map2", "ListLabels.html#VALrev_map2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map2&nbsp;f&nbsp;l1&nbsp;l2</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap2\"><code class=\"code\"><span class=\"constructor\">List</span>.map2</code></a><code class=\"code\">&nbsp;f&nbsp;l1&nbsp;l2)</code>, but is tail-recursive and\n   more efficient.</p>\n\n</div>"],
["List", "List.html", "rev_map", "List.html#VALrev_map", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map&nbsp;f&nbsp;l</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\">&nbsp;f&nbsp;l)</code>, but is tail-recursive and\n   more efficient.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "rev_map", "ListLabels.html#VALrev_map", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_map&nbsp;f&nbsp;l</code> gives the same result as\n   <a href=\"List.html#VALrev\"><code class=\"code\"><span class=\"constructor\">List</span>.rev</code></a><code class=\"code\">&nbsp;(</code><a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a><code class=\"code\">&nbsp;f&nbsp;l)</code>, but is tail-recursive and\n   more efficient.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "rev_char_set", "CamlinternalFormat.html#VALrev_char_set", ""],
["List", "List.html", "rev_append", "List.html#VALrev_append", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_append&nbsp;l1&nbsp;l2</code> reverses <code class=\"code\">l1</code> and concatenates it to <code class=\"code\">l2</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "rev_append", "ListLabels.html#VALrev_append", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.rev_append&nbsp;l1&nbsp;l2</code> reverses <code class=\"code\">l1</code> and concatenates it with <code class=\"code\">l2</code>.</p>\n\n</div>"],
["List", "List.html", "rev", "List.html#VALrev", "<div class=\"info\">\n<p>List reversal.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "rev", "ListLabels.html#VALrev", "<div class=\"info\">\n<p>List reversal.</p>\n\n</div>"],
["Seq", "Seq.html", "return", "Seq.html#VALreturn", "<div class=\"info\">\n<p>The singleton sequence containing only the given element.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "reshape_3", "Bigarray.html#VALreshape_3", "<div class=\"info\">\n<p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to\n   three-dimensional arrays.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "reshape_2", "Bigarray.html#VALreshape_2", "<div class=\"info\">\n<p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to\n   two-dimensional arrays.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "reshape_1", "Bigarray.html#VALreshape_1", "<div class=\"info\">\n<p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to\n   one-dimensional arrays.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "reshape_0", "Bigarray.html#VALreshape_0", "<div class=\"info\">\n<p>Specialized version of <a href=\"Bigarray.html#VALreshape\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.reshape</code></a> for reshaping to\n   zero-dimensional arrays.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "reshape", "Bigarray.html#VALreshape", "<div class=\"info\">\n<p><code class=\"code\">reshape&nbsp;b&nbsp;[|d1;...;dN|]</code> converts the Bigarray <code class=\"code\">b</code> to a\n   <code class=\"code\"><span class=\"constructor\">N</span></code>-dimensional array of dimensions <code class=\"code\">d1</code>...</p>\n\n</div>"],
["Buffer", "Buffer.html", "reset", "Buffer.html#VALreset", "<div class=\"info\">\n<p>Empty the buffer and deallocate the internal byte sequence holding the\n   buffer contents, replacing it with the initial internal byte sequence\n   of length <code class=\"code\">n</code> that was allocated by <a href=\"Buffer.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Buffer</span>.create</code></a> <code class=\"code\">n</code>.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "reset", "Hashtbl.html#VALreset", "<div class=\"info\">\n<p>Empty a hash table and shrink the size of the bucket table\n    to its initial size.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "reset", "Hashtbl.S.html#VALreset", "<div class=\"info\">\n</div>"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "reset", "Hashtbl.SeededS.html#VALreset", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "reset", "MoreLabels.Hashtbl.html#VALreset", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "reset", "MoreLabels.Hashtbl.S.html#VALreset", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "reset", "MoreLabels.Hashtbl.SeededS.html#VALreset", ""],
["Obj", "Obj.html", "repr", "Obj.html#VALrepr", ""],
["Hashtbl", "Hashtbl.html", "replace_seq", "Hashtbl.html#VALreplace_seq", "<div class=\"info\">\n<p>Add the given bindings to the table, using <a href=\"Hashtbl.html#VALreplace\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.replace</code></a></p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "replace_seq", "Hashtbl.S.html#VALreplace_seq", "<div class=\"info\">\n</div>"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "replace_seq", "Hashtbl.SeededS.html#VALreplace_seq", "<div class=\"info\">\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "replace_seq", "MoreLabels.Hashtbl.html#VALreplace_seq", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "replace_seq", "MoreLabels.Hashtbl.S.html#VALreplace_seq", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "replace_seq", "MoreLabels.Hashtbl.SeededS.html#VALreplace_seq", ""],
["Str", "Str.html", "replace_matched", "Str.html#VALreplace_matched", "<div class=\"info\">\n<p><code class=\"code\">replace_matched&nbsp;repl&nbsp;s</code> returns the replacement text <code class=\"code\">repl</code>\n   in which <code class=\"code\">\\1</code>, <code class=\"code\">\\2</code>, etc.</p>\n\n</div>"],
["Str", "Str.html", "replace_first", "Str.html#VALreplace_first", "<div class=\"info\">\n<p>Same as <a href=\"Str.html#VALglobal_replace\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_replace</code></a>, except that only the first substring\n   matching the regular expression is replaced.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "replace", "Hashtbl.html#VALreplace", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.replace&nbsp;tbl&nbsp;x&nbsp;y</code> replaces the current binding of <code class=\"code\">x</code>\n   in <code class=\"code\">tbl</code> by a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "replace", "Hashtbl.S.html#VALreplace", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "replace", "Hashtbl.SeededS.html#VALreplace", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "replace", "MoreLabels.Hashtbl.html#VALreplace", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "replace", "MoreLabels.Hashtbl.S.html#VALreplace", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "replace", "MoreLabels.Hashtbl.SeededS.html#VALreplace", ""],
["Uchar", "Uchar.html", "rep", "Uchar.html#VALrep", "<div class=\"info\">\n<p><code class=\"code\">rep</code> is U+FFFD, the\n    <a href=\"http://unicode.org/glossary/#replacement_character\">replacement</a>\n    character.</p>\n\n</div>"],
["Sys", "Sys.html", "rename", "Sys.html#VALrename", "<div class=\"info\">\n<p>Rename a file.</p>\n\n</div>"],
["Unix", "Unix.html", "rename", "Unix.html#VALrename", "<div class=\"info\">\n<p><code class=\"code\">rename&nbsp;old&nbsp;<span class=\"keyword\">new</span></code> changes the name of a file from <code class=\"code\">old</code> to <code class=\"code\"><span class=\"keyword\">new</span></code>,\n    moving it between directories if needed.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "rename", "UnixLabels.html#VALrename", "<div class=\"info\">\n<p><code class=\"code\">rename&nbsp;old&nbsp;<span class=\"keyword\">new</span></code> changes the name of a file from <code class=\"code\">old</code> to <code class=\"code\"><span class=\"keyword\">new</span></code>.</p>\n\n</div>"],
["Filename", "Filename.html", "remove_extension", "Filename.html#VALremove_extension", "<div class=\"info\">\n<p>Return the given file name without its extension, as defined\n    in <a href=\"Filename.html#VALextension\"><code class=\"code\"><span class=\"constructor\">Filename</span>.extension</code></a>.</p>\n\n</div>"],
["List", "List.html", "remove_assq", "List.html#VALremove_assq", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.remove_assoc</code></a>, but uses physical equality instead\n   of structural equality to compare keys.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "remove_assq", "ListLabels.html#VALremove_assq", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALremove_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.remove_assoc</code></a>, but uses physical equality instead\n   of structural equality to compare keys.</p>\n\n</div>"],
["List", "List.html", "remove_assoc", "List.html#VALremove_assoc", "<div class=\"info\">\n<p><code class=\"code\">remove_assoc&nbsp;a&nbsp;l</code> returns the list of\n   pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "remove_assoc", "ListLabels.html#VALremove_assoc", "<div class=\"info\">\n<p><code class=\"code\">remove_assoc&nbsp;a&nbsp;l</code> returns the list of\n   pairs <code class=\"code\">l</code> without the first pair with key <code class=\"code\">a</code>, if any.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "remove", "Hashtbl.html#VALremove", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.remove&nbsp;tbl&nbsp;x</code> removes the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>,\n   restoring the previous binding if it exists.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "remove", "Hashtbl.S.html#VALremove", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "remove", "Hashtbl.SeededS.html#VALremove", ""],
["Map.S", "Map.S.html", "remove", "Map.S.html#VALremove", "<div class=\"info\">\n<p><code class=\"code\">remove&nbsp;x&nbsp;m</code> returns a map containing the same bindings as\n       <code class=\"code\">m</code>, except for <code class=\"code\">x</code> which is unbound in the returned map.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "remove", "MoreLabels.Hashtbl.html#VALremove", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "remove", "MoreLabels.Hashtbl.S.html#VALremove", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "remove", "MoreLabels.Hashtbl.SeededS.html#VALremove", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "remove", "MoreLabels.Map.S.html#VALremove", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "remove", "MoreLabels.Set.S.html#VALremove", ""],
["Set.S", "Set.S.html", "remove", "Set.S.html#VALremove", "<div class=\"info\">\n<p><code class=\"code\">remove&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>,\n       except <code class=\"code\">x</code>.</p>\n\n</div>"],
["Sys", "Sys.html", "remove", "Sys.html#VALremove", "<div class=\"info\">\n<p>Remove the given file name from the file system.</p>\n\n</div>"],
["Weak.S", "Weak.S.html", "remove", "Weak.S.html#VALremove", "<div class=\"info\">\n<p><code class=\"code\">remove&nbsp;t&nbsp;x</code> removes from <code class=\"code\">t</code> one instance of <code class=\"code\">x</code>.</p>\n\n</div>"],
["Float", "Float.html", "rem", "Float.html#VALrem", "<div class=\"info\">\n<p><code class=\"code\">rem&nbsp;a&nbsp;b</code> returns the remainder of <code class=\"code\">a</code> with respect to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Int", "Int.html", "rem", "Int.html#VALrem", "<div class=\"info\">\n<p><code class=\"code\">rem&nbsp;x&nbsp;y</code> is the remainder <code class=\"code\">x&nbsp;<span class=\"keyword\">mod</span>&nbsp;y</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "rem", "Int32.html#VALrem", "<div class=\"info\">\n<p>Integer remainder.</p>\n\n</div>"],
["Int64", "Int64.html", "rem", "Int64.html#VALrem", "<div class=\"info\">\n<p>Integer remainder.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "rem", "Nativeint.html#VALrem", "<div class=\"info\">\n<p>Integer remainder.</p>\n\n</div>"],
["Printexc", "Printexc.html", "register_printer", "Printexc.html#VALregister_printer", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.register_printer&nbsp;fn</code> registers <code class=\"code\">fn</code> as an exception\n    printer.</p>\n\n</div>"],
["Callback", "Callback.html", "register_exception", "Callback.html#VALregister_exception", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Callback</span>.register_exception&nbsp;n&nbsp;exn</code> registers the\n   exception contained in the exception value <code class=\"code\">exn</code>\n   under the name <code class=\"code\">n</code>.</p>\n\n</div>"],
["Callback", "Callback.html", "register", "Callback.html#VALregister", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Callback</span>.register&nbsp;n&nbsp;v</code> registers the value <code class=\"code\">v</code> under\n   the name <code class=\"code\">n</code>.</p>\n\n</div>"],
["Str", "Str.html", "regexp_string_case_fold", "Str.html#VALregexp_string_case_fold", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string_case_fold</code> is similar to <a href=\"Str.html#VALregexp_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string</code></a>,\n   but the regexp matches in a case-insensitive way.</p>\n\n</div>"],
["Str", "Str.html", "regexp_string", "Str.html#VALregexp_string", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Str</span>.regexp_string&nbsp;s</code> returns a regular expression\n   that matches exactly <code class=\"code\">s</code> and nothing else.</p>\n\n</div>"],
["Str", "Str.html", "regexp_case_fold", "Str.html#VALregexp_case_fold", "<div class=\"info\">\n<p>Same as <code class=\"code\">regexp</code>, but the compiled expression will match text\n    in a case-insensitive way: uppercase and lowercase letters will\n    be considered equivalent.</p>\n\n</div>"],
["Str", "Str.html", "regexp", "Str.html#VALregexp", "<div class=\"info\">\n<p>Compile a regular expression.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "ref", "Pervasives.html#VALref", ""],
["ThreadUnix", "ThreadUnix.html", "recvfrom", "ThreadUnix.html#VALrecvfrom", ""],
["Unix", "Unix.html", "recvfrom", "Unix.html#VALrecvfrom", "<div class=\"info\">\n<p>Receive data from an unconnected socket.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "recvfrom", "UnixLabels.html#VALrecvfrom", "<div class=\"info\">\n<p>Receive data from an unconnected socket.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "recv", "ThreadUnix.html#VALrecv", ""],
["Unix", "Unix.html", "recv", "Unix.html#VALrecv", "<div class=\"info\">\n<p>Receive data from a connected socket.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "recv", "UnixLabels.html#VALrecv", "<div class=\"info\">\n<p>Receive data from a connected socket.</p>\n\n</div>"],
["Printexc", "Printexc.html", "record_backtrace", "Printexc.html#VALrecord_backtrace", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.record_backtrace&nbsp;b</code> turns recording of exception backtraces\n    on (if <code class=\"code\">b&nbsp;=&nbsp;<span class=\"keyword\">true</span></code>) or off (if <code class=\"code\">b&nbsp;=&nbsp;<span class=\"keyword\">false</span></code>).</p>\n\n</div>"],
["Event", "Event.html", "receive", "Event.html#VALreceive", "<div class=\"info\">\n<p><code class=\"code\">receive&nbsp;ch</code> returns the event consisting in receiving a value\n   from the channel <code class=\"code\">ch</code>.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "recast", "CamlinternalFormat.html#VALrecast", ""],
["Pervasives", "Pervasives.html", "really_input_string", "Pervasives.html#VALreally_input_string", ""],
["Pervasives", "Pervasives.html", "really_input", "Pervasives.html#VALreally_input", ""],
["Unix", "Unix.html", "readlink", "Unix.html#VALreadlink", "<div class=\"info\">\n<p>Read the contents of a symbolic link.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "readlink", "UnixLabels.html#VALreadlink", "<div class=\"info\">\n<p>Read the contents of a link.</p>\n\n</div>"],
["Sys", "Sys.html", "readdir", "Sys.html#VALreaddir", "<div class=\"info\">\n<p>Return the names of all files present in the given directory.</p>\n\n</div>"],
["Unix", "Unix.html", "readdir", "Unix.html#VALreaddir", "<div class=\"info\">\n<p>Return the next entry in a directory.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "readdir", "UnixLabels.html#VALreaddir", "<div class=\"info\">\n<p>Return the next entry in a directory.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "read_line", "Pervasives.html#VALread_line", ""],
["Pervasives", "Pervasives.html", "read_int_opt", "Pervasives.html#VALread_int_opt", ""],
["Pervasives", "Pervasives.html", "read_int", "Pervasives.html#VALread_int", ""],
["Pervasives", "Pervasives.html", "read_float_opt", "Pervasives.html#VALread_float_opt", ""],
["Pervasives", "Pervasives.html", "read_float", "Pervasives.html#VALread_float", ""],
["Arg", "Arg.html", "read_arg0", "Arg.html#VALread_arg0", "<div class=\"info\">\n<p>Identical to <a href=\"Arg.html#VALread_arg\"><code class=\"code\"><span class=\"constructor\">Arg</span>.read_arg</code></a> but assumes null character terminated command\n    line arguments.</p>\n\n</div>"],
["Arg", "Arg.html", "read_arg", "Arg.html#VALread_arg", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.read_arg&nbsp;file</code> reads newline-terminated command line arguments from\n    file <code class=\"code\">file</code>.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "read", "ThreadUnix.html#VALread", ""],
["Unix", "Unix.html", "read", "Unix.html#VALread", "<div class=\"info\">\n<p><code class=\"code\">read&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> reads <code class=\"code\">len</code> bytes from descriptor <code class=\"code\">fd</code>,\n    storing them in byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in\n    <code class=\"code\">buff</code>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "read", "UnixLabels.html#VALread", "<div class=\"info\">\n<p><code class=\"code\">read&nbsp;fd&nbsp;buff&nbsp;ofs&nbsp;len</code> reads <code class=\"code\">len</code> bytes from descriptor <code class=\"code\">fd</code>,\n    storing them in byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code> in\n    <code class=\"code\">buff</code>.</p>\n\n</div>"],
["Obj", "Obj.html", "reachable_words", "Obj.html#VALreachable_words", "<div class=\"info\">\n<p>Computes the total size (in words, including the headers) of all\n     heap blocks accessible from the argument.</p>\n\n</div>"],
["Bytes", "Bytes.html", "rcontains_from", "Bytes.html#VALrcontains_from", "<div class=\"info\">\n<p><code class=\"code\">rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before\n    position <code class=\"code\">stop+1</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "rcontains_from", "BytesLabels.html#VALrcontains_from", "<div class=\"info\">\n<p><code class=\"code\">rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> before\n    position <code class=\"code\">stop+1</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "rcontains_from", "StringLabels.html#VALrcontains_from", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p>\n\n</div>"],
["String", "String.html", "rcontains_from", "String.html#VALrcontains_from", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.rcontains_from&nbsp;s&nbsp;stop&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> before position <code class=\"code\">stop+1</code>.</p>\n\n</div>"],
["Printexc", "Printexc.html", "raw_backtrace_to_string", "Printexc.html#VALraw_backtrace_to_string", "<div class=\"info\">\n<p>Return a string from a raw backtrace, in the same format\n    <code class=\"code\"><span class=\"constructor\">Printexc</span>.get_backtrace</code> uses.</p>\n\n</div>"],
["Printexc", "Printexc.html", "raw_backtrace_length", "Printexc.html#VALraw_backtrace_length", "<div class=\"info\">\n<p><code class=\"code\">raw_backtrace_length&nbsp;bckt</code> returns the number of slots in the\n    backtrace <code class=\"code\">bckt</code>.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "randomize", "Hashtbl.html#VALrandomize", "<div class=\"info\">\n<p>After a call to <code class=\"code\"><span class=\"constructor\">Hashtbl</span>.randomize()</code>, hash tables are created in\n    randomized mode by default: <a href=\"Hashtbl.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create</code></a> returns randomized\n    hash tables, unless the <code class=\"code\">~random:<span class=\"keyword\">false</span></code> optional parameter is given.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "randomize", "MoreLabels.Hashtbl.html#VALrandomize", ""],
["Printexc", "Printexc.html", "raise_with_backtrace", "Printexc.html#VALraise_with_backtrace", "<div class=\"info\">\n<p>Reraise the exception using the given raw_backtrace for the\n    origin of the exception</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "raise_notrace", "Pervasives.html#VALraise_notrace", ""],
["Pervasives", "Pervasives.html", "raise", "Pervasives.html#VALraise", ""],
["Filename", "Filename.html", "quote", "Filename.html#VALquote", "<div class=\"info\">\n<p>Return a quoted version of a file name, suitable for use as\n    one argument in a command line, escaping all meta-characters.</p>\n\n</div>"],
["Str", "Str.html", "quote", "Str.html#VALquote", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Str</span>.quote&nbsp;s</code> returns a regexp string that matches exactly\n   <code class=\"code\">s</code> and nothing else.</p>\n\n</div>"],
["Gc", "Gc.html", "quick_stat", "Gc.html#VALquick_stat", "<div class=\"info\">\n<p>Same as <code class=\"code\">stat</code> except that <code class=\"code\">live_words</code>, <code class=\"code\">live_blocks</code>, <code class=\"code\">free_words</code>,\n    <code class=\"code\">free_blocks</code>, <code class=\"code\">largest_free</code>, and <code class=\"code\">fragments</code> are set to 0.</p>\n\n</div>"],
["Unix", "Unix.html", "putenv", "Unix.html#VALputenv", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Unix</span>.putenv&nbsp;name&nbsp;value</code> sets the value associated to a\n   variable in the process environment.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "putenv", "UnixLabels.html#VALputenv", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Unix</span>.putenv&nbsp;name&nbsp;value</code> sets the value associated to a\n   variable in the process environment.</p>\n\n</div>"],
["Queue", "Queue.html", "push", "Queue.html#VALpush", "<div class=\"info\">\n<p><code class=\"code\">push</code> is a synonym for <code class=\"code\">add</code>.</p>\n\n</div>"],
["Stack", "Stack.html", "push", "Stack.html#VALpush", "<div class=\"info\">\n<p><code class=\"code\">push&nbsp;x&nbsp;s</code> adds the element <code class=\"code\">x</code> at the top of stack <code class=\"code\">s</code>.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "public_method_label", "CamlinternalOO.html#VALpublic_method_label", ""],
["Dynlink", "Dynlink.html", "public_dynamically_loaded_units", "Dynlink.html#VALpublic_dynamically_loaded_units", "<div class=\"info\">\n<p>Return the list of compilation units that have been dynamically loaded via\n    <code class=\"code\">loadfile</code> (and not via <code class=\"code\">loadfile_private</code>).</p>\n\n</div>"],
["Fun", "Fun.html", "protect", "Fun.html#VALprotect", "<div class=\"info\">\n<p><code class=\"code\">protect&nbsp;~finally&nbsp;work</code> invokes <code class=\"code\">work&nbsp;()</code> and then <code class=\"code\">finally&nbsp;()</code>\n    before <code class=\"code\">work&nbsp;()</code> returns with its value or an exception.</p>\n\n</div>"],
["Dynlink", "Dynlink.html", "prohibit", "Dynlink.html#VALprohibit", "<div class=\"info\">\n<p><code class=\"code\">prohibit&nbsp;units</code> prohibits dynamically-linked units from referencing\n    the units named in list <code class=\"code\">units</code> by removing such units from the allowed\n    units list.</p>\n\n</div>"],
["Unix", "Unix.html", "process_pid", "Unix.html#VALprocess_pid", "<div class=\"info\">\n<p>Return the pid of a process opened via <a href=\"Unix.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process</code></a> or\n   <a href=\"Unix.html#VALopen_process_args\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_args</code></a>.</p>\n\n</div>"],
["Unix", "Unix.html", "process_out_pid", "Unix.html#VALprocess_out_pid", "<div class=\"info\">\n<p>Return the pid of a process opened via <a href=\"Unix.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_out</code></a> or\n   <a href=\"Unix.html#VALopen_process_args_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_args_out</code></a>.</p>\n\n</div>"],
["Unix", "Unix.html", "process_in_pid", "Unix.html#VALprocess_in_pid", "<div class=\"info\">\n<p>Return the pid of a process opened via <a href=\"Unix.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_in</code></a> or\n   <a href=\"Unix.html#VALopen_process_args_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_args_in</code></a>.</p>\n\n</div>"],
["Unix", "Unix.html", "process_full_pid", "Unix.html#VALprocess_full_pid", "<div class=\"info\">\n<p>Return the pid of a process opened via <a href=\"Unix.html#VALopen_process_full\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_full</code></a> or\n   <a href=\"Unix.html#VALopen_process_args_full\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_args_full</code></a>.</p>\n\n</div>"],
["Format", "Format.html", "printf", "Format.html#VALprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">fprintf</code> above, but output on <code class=\"code\">std_formatter</code>.</p>\n\n</div>"],
["Printf", "Printf.html", "printf", "Printf.html#VALprintf", "<div class=\"info\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but output on <code class=\"code\">stdout</code>.</p>\n\n</div>"],
["Format", "Format.html", "print_tbreak", "Format.html#VALprint_tbreak", "<div class=\"info\">\n<p><code class=\"code\">print_tbreak&nbsp;nspaces&nbsp;offset</code> emits a 'full' tabulation break hint.</p>\n\n</div>"],
["Format", "Format.html", "print_tab", "Format.html#VALprint_tab", "<div class=\"info\">\n<p><code class=\"code\">print_tab&nbsp;()</code> emits a 'next' tabulation break hint: if not already set on\n  a tabulation marker, the insertion point moves to the first tabulation\n  marker on the right, or the pretty-printer splits the line and insertion\n  point moves to the leftmost tabulation marker.</p>\n\n</div>"],
["Format", "Format.html", "print_string", "Format.html#VALprint_string", "<div class=\"info\">\n<p><code class=\"code\">pp_print_string&nbsp;ppf&nbsp;s</code> prints <code class=\"code\">s</code> in the current pretty-printing box.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "print_string", "Pervasives.html#VALprint_string", ""],
["Gc", "Gc.html", "print_stat", "Gc.html#VALprint_stat", "<div class=\"info\">\n<p>Print the current values of the memory management counters (in\n   human-readable form) into the channel argument.</p>\n\n</div>"],
["Format", "Format.html", "print_space", "Format.html#VALprint_space", "<div class=\"info\">\n<p><code class=\"code\">pp_print_space&nbsp;ppf&nbsp;()</code> emits a 'space' break hint:\n  the pretty-printer may split the line at this point,\n  otherwise it prints one space.</p>\n\n</div>"],
["Printexc", "Printexc.html", "print_raw_backtrace", "Printexc.html#VALprint_raw_backtrace", "<div class=\"info\">\n<p>Print a raw backtrace in the same format\n    <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> uses.</p>\n\n</div>"],
["Format", "Format.html", "print_newline", "Format.html#VALprint_newline", "<div class=\"info\">\n<p>End of pretty-printing: resets the pretty-printer to initial state.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "print_newline", "Pervasives.html#VALprint_newline", ""],
["Format", "Format.html", "print_int", "Format.html#VALprint_int", "<div class=\"info\">\n<p>Print an integer in the current pretty-printing box.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "print_int", "Pervasives.html#VALprint_int", ""],
["Format", "Format.html", "print_if_newline", "Format.html#VALprint_if_newline", "<div class=\"info\">\n<p>Execute the next formatting command if the preceding line\n  has just been split.</p>\n\n</div>"],
["Format", "Format.html", "print_flush", "Format.html#VALprint_flush", "<div class=\"info\">\n<p>End of pretty-printing: resets the pretty-printer to initial state.</p>\n\n</div>"],
["Format", "Format.html", "print_float", "Format.html#VALprint_float", "<div class=\"info\">\n<p>Print a floating point number in the current pretty-printing box.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "print_float", "Pervasives.html#VALprint_float", ""],
["Pervasives", "Pervasives.html", "print_endline", "Pervasives.html#VALprint_endline", ""],
["Format", "Format.html", "print_cut", "Format.html#VALprint_cut", "<div class=\"info\">\n<p><code class=\"code\">pp_print_cut&nbsp;ppf&nbsp;()</code> emits a 'cut' break hint:\n  the pretty-printer may split the line at this point,\n  otherwise it prints nothing.</p>\n\n</div>"],
["Format", "Format.html", "print_char", "Format.html#VALprint_char", "<div class=\"info\">\n<p>Print a character in the current pretty-printing box.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "print_char", "Pervasives.html#VALprint_char", ""],
["Pervasives", "Pervasives.html", "print_bytes", "Pervasives.html#VALprint_bytes", ""],
["Format", "Format.html", "print_break", "Format.html#VALprint_break", "<div class=\"info\">\n<p><code class=\"code\">pp_print_break&nbsp;ppf&nbsp;nspaces&nbsp;offset</code> emits a 'full' break hint:\n  the pretty-printer may split the line at this point,\n  otherwise it prints <code class=\"code\">nspaces</code> spaces.</p>\n\n</div>"],
["Format", "Format.html", "print_bool", "Format.html#VALprint_bool", "<div class=\"info\">\n<p>Print a boolean in the current pretty-printing box.</p>\n\n</div>"],
["Printexc", "Printexc.html", "print_backtrace", "Printexc.html#VALprint_backtrace", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace&nbsp;oc</code> prints an exception backtrace\n    on the output channel <code class=\"code\">oc</code>.</p>\n\n</div>"],
["Format", "Format.html", "print_as", "Format.html#VALprint_as", "<div class=\"info\">\n<p><code class=\"code\">pp_print_as&nbsp;ppf&nbsp;len&nbsp;s</code> prints <code class=\"code\">s</code> in the current pretty-printing box.</p>\n\n</div>"],
["Printexc", "Printexc.html", "print", "Printexc.html#VALprint", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.print&nbsp;fn&nbsp;x</code> applies <code class=\"code\">fn</code> to <code class=\"code\">x</code> and returns the result.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "prerr_string", "Pervasives.html#VALprerr_string", ""],
["Pervasives", "Pervasives.html", "prerr_newline", "Pervasives.html#VALprerr_newline", ""],
["Pervasives", "Pervasives.html", "prerr_int", "Pervasives.html#VALprerr_int", ""],
["Pervasives", "Pervasives.html", "prerr_float", "Pervasives.html#VALprerr_float", ""],
["Pervasives", "Pervasives.html", "prerr_endline", "Pervasives.html#VALprerr_endline", ""],
["Pervasives", "Pervasives.html", "prerr_char", "Pervasives.html#VALprerr_char", ""],
["Pervasives", "Pervasives.html", "prerr_bytes", "Pervasives.html#VALprerr_bytes", ""],
["Float", "Float.html", "pred", "Float.html#VALpred", "<div class=\"info\">\n<p><code class=\"code\">pred&nbsp;x</code> returns the floating-point number right before <code class=\"code\">x</code> i.e.,\n   the greatest floating-point number smaller than <code class=\"code\">x</code>.</p>\n\n</div>"],
["Int", "Int.html", "pred", "Int.html#VALpred", "<div class=\"info\">\n<p><code class=\"code\">pred&nbsp;x</code> is <code class=\"code\">sub&nbsp;x&nbsp;1</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "pred", "Int32.html#VALpred", "<div class=\"info\">\n<p>Predecessor.</p>\n\n</div>"],
["Int64", "Int64.html", "pred", "Int64.html#VALpred", "<div class=\"info\">\n<p>Predecessor.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "pred", "Nativeint.html#VALpred", "<div class=\"info\">\n<p>Predecessor.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "pred", "Pervasives.html#VALpred", ""],
["Uchar", "Uchar.html", "pred", "Uchar.html#VALpred", "<div class=\"info\">\n<p><code class=\"code\">pred&nbsp;u</code> is the scalar value before <code class=\"code\">u</code> in the set of Unicode scalar\n    values.</p>\n\n</div>"],
["Format", "Format.html", "pp_set_tags", "Format.html#VALpp_set_tags", ""],
["Format", "Format.html", "pp_set_tab", "Format.html#VALpp_set_tab", ""],
["Format", "Format.html", "pp_set_print_tags", "Format.html#VALpp_set_print_tags", ""],
["Format", "Format.html", "pp_set_max_indent", "Format.html#VALpp_set_max_indent", ""],
["Format", "Format.html", "pp_set_max_boxes", "Format.html#VALpp_set_max_boxes", ""],
["Format", "Format.html", "pp_set_mark_tags", "Format.html#VALpp_set_mark_tags", ""],
["Format", "Format.html", "pp_set_margin", "Format.html#VALpp_set_margin", ""],
["Format", "Format.html", "pp_set_geometry", "Format.html#VALpp_set_geometry", ""],
["Format", "Format.html", "pp_set_formatter_tag_functions", "Format.html#VALpp_set_formatter_tag_functions", "<div class=\"info\">\n<span class=\"deprecated\"><p>This function will erase non-string tag formatting functions.</p>\n\n</span></div>"],
["Format", "Format.html", "pp_set_formatter_stag_functions", "Format.html#VALpp_set_formatter_stag_functions", ""],
["Format", "Format.html", "pp_set_formatter_output_functions", "Format.html#VALpp_set_formatter_output_functions", ""],
["Format", "Format.html", "pp_set_formatter_out_functions", "Format.html#VALpp_set_formatter_out_functions", ""],
["Format", "Format.html", "pp_set_formatter_out_channel", "Format.html#VALpp_set_formatter_out_channel", "<div class=\"info\">\n<p>Redirecting the standard formatter output</p>\n\n</div>"],
["Format", "Format.html", "pp_set_ellipsis_text", "Format.html#VALpp_set_ellipsis_text", ""],
["Format", "Format.html", "pp_set_all_formatter_output_functions", "Format.html#VALpp_set_all_formatter_output_functions", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Format", "Format.html", "pp_safe_set_geometry", "Format.html#VALpp_safe_set_geometry", ""],
["Format", "Format.html", "pp_print_text", "Format.html#VALpp_print_text", "<div class=\"info\">\n<p><code class=\"code\">pp_print_text&nbsp;ppf&nbsp;s</code> prints <code class=\"code\">s</code> with spaces and newlines respectively\n  printed using <a href=\"Format.html#VALpp_print_space\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_print_space</code></a> and <a href=\"Format.html#VALpp_force_newline\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_force_newline</code></a>.</p>\n\n</div>"],
["Format", "Format.html", "pp_print_tbreak", "Format.html#VALpp_print_tbreak", ""],
["Format", "Format.html", "pp_print_tab", "Format.html#VALpp_print_tab", ""],
["Format", "Format.html", "pp_print_string", "Format.html#VALpp_print_string", ""],
["Format", "Format.html", "pp_print_space", "Format.html#VALpp_print_space", ""],
["Format", "Format.html", "pp_print_result", "Format.html#VALpp_print_result", "<div class=\"info\">\n<p><code class=\"code\">pp_print_result&nbsp;~ok&nbsp;~error&nbsp;ppf&nbsp;r</code> prints <code class=\"code\">r</code> on <code class=\"code\">ppf</code> using\n    <code class=\"code\">ok</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;_</code> and <code class=\"code\">error</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;_</code>.</p>\n\n</div>"],
["Format", "Format.html", "pp_print_option", "Format.html#VALpp_print_option", "<div class=\"info\">\n<p><code class=\"code\">pp_print_option&nbsp;?none&nbsp;pp_v&nbsp;ppf&nbsp;o</code> prints <code class=\"code\">o</code> on <code class=\"code\">ppf</code>\n    using <code class=\"code\">pp_v</code> if <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> and <code class=\"code\">none</code> if it is <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n\n</div>"],
["Format", "Format.html", "pp_print_newline", "Format.html#VALpp_print_newline", ""],
["Format", "Format.html", "pp_print_list", "Format.html#VALpp_print_list", "<div class=\"info\">\n<p><code class=\"code\">pp_print_list&nbsp;?pp_sep&nbsp;pp_v&nbsp;ppf&nbsp;l</code> prints items of list <code class=\"code\">l</code>,\n  using <code class=\"code\">pp_v</code> to print each item, and calling <code class=\"code\">pp_sep</code>\n  between items (<code class=\"code\">pp_sep</code> defaults to <a href=\"Format.html#VALpp_print_cut\"><code class=\"code\"><span class=\"constructor\">Format</span>.pp_print_cut</code></a>.</p>\n\n</div>"],
["Format", "Format.html", "pp_print_int", "Format.html#VALpp_print_int", ""],
["Format", "Format.html", "pp_print_if_newline", "Format.html#VALpp_print_if_newline", ""],
["Format", "Format.html", "pp_print_flush", "Format.html#VALpp_print_flush", ""],
["Format", "Format.html", "pp_print_float", "Format.html#VALpp_print_float", ""],
["Format", "Format.html", "pp_print_cut", "Format.html#VALpp_print_cut", ""],
["Format", "Format.html", "pp_print_custom_break", "Format.html#VALpp_print_custom_break", "<div class=\"info\">\n<p><code class=\"code\">pp_print_custom_break&nbsp;ppf&nbsp;~fits:(s1,&nbsp;n,&nbsp;s2)&nbsp;~breaks:(s3,&nbsp;m,&nbsp;s4)</code> emits a\n   custom break hint: the pretty-printer may split the line at this point.</p>\n\n</div>"],
["Format", "Format.html", "pp_print_char", "Format.html#VALpp_print_char", ""],
["Format", "Format.html", "pp_print_break", "Format.html#VALpp_print_break", ""],
["Format", "Format.html", "pp_print_bool", "Format.html#VALpp_print_bool", ""],
["Format", "Format.html", "pp_print_as", "Format.html#VALpp_print_as", ""],
["Format", "Format.html", "pp_over_max_boxes", "Format.html#VALpp_over_max_boxes", ""],
["Format", "Format.html", "pp_open_vbox", "Format.html#VALpp_open_vbox", ""],
["Format", "Format.html", "pp_open_tbox", "Format.html#VALpp_open_tbox", ""],
["Format", "Format.html", "pp_open_tag", "Format.html#VALpp_open_tag", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Format", "Format.html", "pp_open_stag", "Format.html#VALpp_open_stag", ""],
["Format", "Format.html", "pp_open_hvbox", "Format.html#VALpp_open_hvbox", ""],
["Format", "Format.html", "pp_open_hovbox", "Format.html#VALpp_open_hovbox", ""],
["Format", "Format.html", "pp_open_hbox", "Format.html#VALpp_open_hbox", ""],
["Format", "Format.html", "pp_open_box", "Format.html#VALpp_open_box", ""],
["Format", "Format.html", "pp_get_print_tags", "Format.html#VALpp_get_print_tags", ""],
["Format", "Format.html", "pp_get_max_indent", "Format.html#VALpp_get_max_indent", ""],
["Format", "Format.html", "pp_get_max_boxes", "Format.html#VALpp_get_max_boxes", ""],
["Format", "Format.html", "pp_get_mark_tags", "Format.html#VALpp_get_mark_tags", ""],
["Format", "Format.html", "pp_get_margin", "Format.html#VALpp_get_margin", ""],
["Format", "Format.html", "pp_get_geometry", "Format.html#VALpp_get_geometry", ""],
["Format", "Format.html", "pp_get_formatter_tag_functions", "Format.html#VALpp_get_formatter_tag_functions", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Format", "Format.html", "pp_get_formatter_stag_functions", "Format.html#VALpp_get_formatter_stag_functions", ""],
["Format", "Format.html", "pp_get_formatter_output_functions", "Format.html#VALpp_get_formatter_output_functions", ""],
["Format", "Format.html", "pp_get_formatter_out_functions", "Format.html#VALpp_get_formatter_out_functions", ""],
["Format", "Format.html", "pp_get_ellipsis_text", "Format.html#VALpp_get_ellipsis_text", ""],
["Format", "Format.html", "pp_get_all_formatter_output_functions", "Format.html#VALpp_get_all_formatter_output_functions", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Format", "Format.html", "pp_force_newline", "Format.html#VALpp_force_newline", ""],
["Format", "Format.html", "pp_close_tbox", "Format.html#VALpp_close_tbox", ""],
["Format", "Format.html", "pp_close_tag", "Format.html#VALpp_close_tag", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Format", "Format.html", "pp_close_stag", "Format.html#VALpp_close_stag", ""],
["Format", "Format.html", "pp_close_box", "Format.html#VALpp_close_box", ""],
["Complex", "Complex.html", "pow", "Complex.html#VALpow", "<div class=\"info\">\n<p>Power function.</p>\n\n</div>"],
["Float", "Float.html", "pow", "Float.html#VALpow", "<div class=\"info\">\n<p>Exponentiation.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "pos_out", "Pervasives.html#VALpos_out", ""],
["Stdlib.LargeFile", "Stdlib.LargeFile.html", "pos_out", "Stdlib.LargeFile.html#VALpos_out", ""],
["Pervasives", "Pervasives.html", "pos_in", "Pervasives.html#VALpos_in", ""],
["Stdlib.LargeFile", "Stdlib.LargeFile.html", "pos_in", "Stdlib.LargeFile.html#VALpos_in", ""],
["Stack", "Stack.html", "pop_opt", "Stack.html#VALpop_opt", "<div class=\"info\">\n<p><code class=\"code\">pop_opt&nbsp;s</code> removes and returns the topmost element in stack <code class=\"code\">s</code>,\n   or returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the stack is empty.</p>\n\n</div>"],
["Queue", "Queue.html", "pop", "Queue.html#VALpop", "<div class=\"info\">\n<p><code class=\"code\">pop</code> is a synonym for <code class=\"code\">take</code>.</p>\n\n</div>"],
["Stack", "Stack.html", "pop", "Stack.html#VALpop", "<div class=\"info\">\n<p><code class=\"code\">pop&nbsp;s</code> removes and returns the topmost element in stack <code class=\"code\">s</code>,\n   or raises <a href=\"Stack.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Stack</span>.<span class=\"constructor\">Empty</span></code></a> if the stack is empty.</p>\n\n</div>"],
["Event", "Event.html", "poll", "Event.html#VALpoll", "<div class=\"info\">\n<p>Non-blocking version of <a href=\"Event.html#VALsync\"><code class=\"code\"><span class=\"constructor\">Event</span>.sync</code></a>: offer all the communication\n   possibilities specified in the event to the outside world,\n   and if one can take place immediately, perform it and return\n   <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;r</code> where <code class=\"code\">r</code> is the result value of that communication.</p>\n\n</div>"],
["Complex", "Complex.html", "polar", "Complex.html#VALpolar", "<div class=\"info\">\n<p><code class=\"code\">polar&nbsp;norm&nbsp;arg</code> returns the complex having norm <code class=\"code\">norm</code>\n    and argument <code class=\"code\">arg</code>.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "pipe", "ThreadUnix.html#VALpipe", ""],
["Unix", "Unix.html", "pipe", "Unix.html#VALpipe", "<div class=\"info\">\n<p>Create a pipe.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "pipe", "UnixLabels.html#VALpipe", "<div class=\"info\">\n<p>Create a pipe.</p>\n\n</div>"],
["Float", "Float.html", "pi", "Float.html#VALpi", "<div class=\"info\">\n<p>The constant pi.</p>\n\n</div>"],
["Queue", "Queue.html", "peek_opt", "Queue.html#VALpeek_opt", "<div class=\"info\">\n<p><code class=\"code\">peek_opt&nbsp;q</code> returns the first element in queue <code class=\"code\">q</code>, without removing\n   it from the queue, or returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the queue is empty.</p>\n\n</div>"],
["Queue", "Queue.html", "peek", "Queue.html#VALpeek", "<div class=\"info\">\n<p><code class=\"code\">peek&nbsp;q</code> returns the first element in queue <code class=\"code\">q</code>, without removing\n   it from the queue, or raises <a href=\"Queue.html#EXCEPTIONEmpty\"><code class=\"code\"><span class=\"constructor\">Queue</span>.<span class=\"constructor\">Empty</span></code></a> if the queue is empty.</p>\n\n</div>"],
["Stream", "Stream.html", "peek", "Stream.html#VALpeek", "<div class=\"info\">\n<p>Return <code class=\"code\"><span class=\"constructor\">Some</span></code> of \"the first element\" of the stream, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n   the stream is empty.</p>\n\n</div>"],
["Unix", "Unix.html", "pause", "Unix.html#VALpause", "<div class=\"info\">\n<p>Wait until a non-ignored, non-blocked signal is delivered.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "pause", "UnixLabels.html#VALpause", "<div class=\"info\">\n<p>Wait until a non-ignored, non-blocked signal is delivered.</p>\n\n</div>"],
["List", "List.html", "partition", "List.html#VALpartition", "<div class=\"info\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;l</code> returns a pair of lists <code class=\"code\">(l1,&nbsp;l2)</code>, where\n   <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that\n   satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the\n   elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "partition", "ListLabels.html#VALpartition", "<div class=\"info\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;l</code> returns a pair of lists <code class=\"code\">(l1,&nbsp;l2)</code>, where\n   <code class=\"code\">l1</code> is the list of all the elements of <code class=\"code\">l</code> that\n   satisfy the predicate <code class=\"code\">p</code>, and <code class=\"code\">l2</code> is the list of all the\n   elements of <code class=\"code\">l</code> that do not satisfy <code class=\"code\">p</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "partition", "Map.S.html#VALpartition", "<div class=\"info\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;m</code> returns a pair of maps <code class=\"code\">(m1,&nbsp;m2)</code>, where\n        <code class=\"code\">m1</code> contains all the bindings of <code class=\"code\">s</code> that satisfy the\n        predicate <code class=\"code\">p</code>, and <code class=\"code\">m2</code> is the map with all the bindings of\n        <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "partition", "MoreLabels.Map.S.html#VALpartition", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "partition", "MoreLabels.Set.S.html#VALpartition", ""],
["Set.S", "Set.S.html", "partition", "Set.S.html#VALpartition", "<div class=\"info\">\n<p><code class=\"code\">partition&nbsp;p&nbsp;s</code> returns a pair of sets <code class=\"code\">(s1,&nbsp;s2)</code>, where\n       <code class=\"code\">s1</code> is the set of all the elements of <code class=\"code\">s</code> that satisfy the\n       predicate <code class=\"code\">p</code>, and <code class=\"code\">s2</code> is the set of all the elements of\n       <code class=\"code\">s</code> that do not satisfy <code class=\"code\">p</code>.</p>\n\n</div>"],
["Arg", "Arg.html", "parse_expand", "Arg.html#VALparse_expand", "<div class=\"info\">\n<p>Same as <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a>, except that the <code class=\"code\"><span class=\"constructor\">Expand</span></code> arguments are allowed and\n    the <a href=\"Arg.html#VALcurrent\"><code class=\"code\"><span class=\"constructor\">Arg</span>.current</code></a> reference is not updated.</p>\n\n</div>"],
["Arg", "Arg.html", "parse_dynamic", "Arg.html#VALparse_dynamic", "<div class=\"info\">\n<p>Same as <a href=\"Arg.html#VALparse\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse</code></a>, except that the <code class=\"code\">speclist</code> argument is a reference\n    and may be updated during the parsing.</p>\n\n</div>"],
["Arg", "Arg.html", "parse_argv_dynamic", "Arg.html#VALparse_argv_dynamic", "<div class=\"info\">\n<p>Same as <a href=\"Arg.html#VALparse_argv\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv</code></a>, except that the <code class=\"code\">speclist</code> argument is a\n    reference and may be updated during the parsing.</p>\n\n</div>"],
["Arg", "Arg.html", "parse_argv", "Arg.html#VALparse_argv", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv&nbsp;~current&nbsp;args&nbsp;speclist&nbsp;anon_fun&nbsp;usage_msg</code> parses\n  the array <code class=\"code\">args</code> as if it were the command line.</p>\n\n</div>"],
["Arg", "Arg.html", "parse_and_expand_argv_dynamic", "Arg.html#VALparse_and_expand_argv_dynamic", "<div class=\"info\">\n<p>Same as <a href=\"Arg.html#VALparse_argv_dynamic\"><code class=\"code\"><span class=\"constructor\">Arg</span>.parse_argv_dynamic</code></a>, except that the <code class=\"code\">argv</code> argument is a\n    reference and may be updated during the parsing of <code class=\"code\"><span class=\"constructor\">Expand</span></code> arguments.</p>\n\n</div>"],
["Arg", "Arg.html", "parse", "Arg.html#VALparse", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Arg</span>.parse&nbsp;speclist&nbsp;anon_fun&nbsp;usage_msg</code> parses the command line.</p>\n\n</div>"],
["Filename", "Filename.html", "parent_dir_name", "Filename.html#VALparent_dir_name", "<div class=\"info\">\n<p>The conventional name for the parent of the current directory\n   (e.g.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "params", "CamlinternalOO.html#VALparams", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "param_format_of_ignored_format", "CamlinternalFormat.html#VALparam_format_of_ignored_format", ""],
["Format", "Format.html", "over_max_boxes", "Format.html#VALover_max_boxes", "<div class=\"info\">\n<p>Tests if the maximum number of pretty-printing boxes allowed have already\n  been opened.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "output_value", "Pervasives.html#VALoutput_value", ""],
["Pervasives", "Pervasives.html", "output_substring", "Pervasives.html#VALoutput_substring", ""],
["Pervasives", "Pervasives.html", "output_string", "Pervasives.html#VALoutput_string", ""],
["Pervasives", "Pervasives.html", "output_char", "Pervasives.html#VALoutput_char", ""],
["Pervasives", "Pervasives.html", "output_bytes", "Pervasives.html#VALoutput_bytes", ""],
["Pervasives", "Pervasives.html", "output_byte", "Pervasives.html#VALoutput_byte", ""],
["Buffer", "Buffer.html", "output_buffer", "Buffer.html#VALoutput_buffer", "<div class=\"info\">\n<p><code class=\"code\">output_buffer&nbsp;oc&nbsp;b</code> writes the current contents of buffer <code class=\"code\">b</code>\n   on the output channel <code class=\"code\">oc</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "output_binary_int", "Pervasives.html#VALoutput_binary_int", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "output_acc", "CamlinternalFormat.html#VALoutput_acc", ""],
["Digest", "Digest.html", "output", "Digest.html#VALoutput", "<div class=\"info\">\n<p>Write a digest on the given output channel.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "output", "Pervasives.html#VALoutput", ""],
["Obj", "Obj.html", "out_of_heap_tag", "Obj.html#VALout_of_heap_tag", ""],
["Unix", "Unix.html", "out_channel_of_descr", "Unix.html#VALout_channel_of_descr", "<div class=\"info\">\n<p>Create an output channel writing on the given descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "out_channel_of_descr", "UnixLabels.html#VALout_channel_of_descr", "<div class=\"info\">\n<p>Create an output channel writing on the given descriptor.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "out_channel_length", "Pervasives.html#VALout_channel_length", ""],
["Stdlib.LargeFile", "Stdlib.LargeFile.html", "out_channel_length", "Stdlib.LargeFile.html#VALout_channel_length", ""],
["Sys", "Sys.html", "os_type", "Sys.html#VALos_type", "<div class=\"info\">\n<p>Operating system currently executing the OCaml program.</p>\n\n</div>"],
["Unix", "Unix.html", "openfile", "Unix.html#VALopenfile", "<div class=\"info\">\n<p>Open the named file with the given flags.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "openfile", "UnixLabels.html#VALopenfile", "<div class=\"info\">\n<p>Open the named file with the given flags.</p>\n\n</div>"],
["Unix", "Unix.html", "opendir", "Unix.html#VALopendir", "<div class=\"info\">\n<p>Open a descriptor on a directory</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "opendir", "UnixLabels.html#VALopendir", "<div class=\"info\">\n<p>Open a descriptor on a directory</p>\n\n</div>"],
["Format", "Format.html", "open_vbox", "Format.html#VALopen_vbox", "<div class=\"info\">\n<p><code class=\"code\">pp_open_vbox&nbsp;ppf&nbsp;d</code> opens a new 'vertical' pretty-printing box\n  with offset <code class=\"code\">d</code>.</p>\n\n</div>"],
["Filename", "Filename.html", "open_temp_file", "Filename.html#VALopen_temp_file", "<div class=\"info\">\n<p>Same as <a href=\"Filename.html#VALtemp_file\"><code class=\"code\"><span class=\"constructor\">Filename</span>.temp_file</code></a>, but returns both the name of a fresh\n   temporary file, and an output channel opened (atomically) on\n   this file.</p>\n\n</div>"],
["Format", "Format.html", "open_tbox", "Format.html#VALopen_tbox", "<div class=\"info\">\n<p><code class=\"code\">open_tbox&nbsp;()</code> opens a new tabulation box.</p>\n\n</div>"],
["Format", "Format.html", "open_tag", "Format.html#VALopen_tag", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Format", "Format.html", "open_stag", "Format.html#VALopen_stag", "<div class=\"info\">\n<p><code class=\"code\">pp_open_stag&nbsp;ppf&nbsp;t</code> opens the semantic tag named <code class=\"code\">t</code>.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "open_process_out", "ThreadUnix.html#VALopen_process_out", ""],
["Unix", "Unix.html", "open_process_out", "Unix.html#VALopen_process_out", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_in</code></a>, but redirect the standard input of\n   the command to a pipe.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "open_process_out", "UnixLabels.html#VALopen_process_out", "<div class=\"info\">\n<p>Same as <a href=\"UnixLabels.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_in</code></a>, but redirect the standard input of\n   the command to a pipe.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "open_process_in", "ThreadUnix.html#VALopen_process_in", ""],
["Unix", "Unix.html", "open_process_in", "Unix.html#VALopen_process_in", "<div class=\"info\">\n<p>High-level pipe and process management.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "open_process_in", "UnixLabels.html#VALopen_process_in", "<div class=\"info\">\n<p>High-level pipe and process management.</p>\n\n</div>"],
["Unix", "Unix.html", "open_process_full", "Unix.html#VALopen_process_full", "<div class=\"info\">\n<p>Similar to <a href=\"Unix.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process</code></a>, but the second argument specifies\n   the environment passed to the command.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "open_process_full", "UnixLabels.html#VALopen_process_full", "<div class=\"info\">\n<p>Similar to <a href=\"UnixLabels.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process</code></a>, but the second argument specifies\n   the environment passed to the command.</p>\n\n</div>"],
["Unix", "Unix.html", "open_process_args_out", "Unix.html#VALopen_process_args_out", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALopen_process_args_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_args_in</code></a>, but redirect the standard input of the\n   command to a pipe.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "open_process_args_out", "UnixLabels.html#VALopen_process_args_out", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALopen_process_args_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_args_in</code></a>, but redirect the standard input of the\n   command to a pipe.</p>\n\n</div>"],
["Unix", "Unix.html", "open_process_args_in", "Unix.html#VALopen_process_args_in", "<div class=\"info\">\n<p>High-level pipe and process management.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "open_process_args_in", "UnixLabels.html#VALopen_process_args_in", "<div class=\"info\">\n<p>High-level pipe and process management.</p>\n\n</div>"],
["Unix", "Unix.html", "open_process_args_full", "Unix.html#VALopen_process_args_full", "<div class=\"info\">\n<p>Similar to <a href=\"Unix.html#VALopen_process_args\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_args</code></a>, but the third argument specifies the\n   environment passed to the command.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "open_process_args_full", "UnixLabels.html#VALopen_process_args_full", "<div class=\"info\">\n<p>Similar to <a href=\"Unix.html#VALopen_process_args\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_args</code></a>, but the third argument specifies the\n   environment passed to the command.</p>\n\n</div>"],
["Unix", "Unix.html", "open_process_args", "Unix.html#VALopen_process_args", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALopen_process_args_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_args_out</code></a>, but redirects both the standard input\n   and standard output of the command to pipes connected to the two returned\n   channels.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "open_process_args", "UnixLabels.html#VALopen_process_args", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALopen_process_args_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_args_out</code></a>, but redirects both the standard input\n   and standard output of the command to pipes connected to the two returned\n   channels.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "open_process", "ThreadUnix.html#VALopen_process", ""],
["Unix", "Unix.html", "open_process", "Unix.html#VALopen_process", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_out</code></a>, but redirects both the standard input\n   and standard output of the command to pipes connected to the two\n   returned channels.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "open_process", "UnixLabels.html#VALopen_process", "<div class=\"info\">\n<p>Same as <a href=\"UnixLabels.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_out</code></a>, but redirects both the standard\n   input and standard output of the command to pipes connected to the two\n   returned channels.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "open_out_gen", "Pervasives.html#VALopen_out_gen", ""],
["Pervasives", "Pervasives.html", "open_out_bin", "Pervasives.html#VALopen_out_bin", ""],
["Pervasives", "Pervasives.html", "open_out", "Pervasives.html#VALopen_out", ""],
["Pervasives", "Pervasives.html", "open_in_gen", "Pervasives.html#VALopen_in_gen", ""],
["Pervasives", "Pervasives.html", "open_in_bin", "Pervasives.html#VALopen_in_bin", ""],
["Scanf.Scanning", "Scanf.Scanning.html", "open_in_bin", "Scanf.Scanning.html#VALopen_in_bin", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.open_in_bin&nbsp;fname</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted\n    input channel for bufferized reading in binary mode from file <code class=\"code\">fname</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "open_in", "Pervasives.html#VALopen_in", ""],
["Scanf.Scanning", "Scanf.Scanning.html", "open_in", "Scanf.Scanning.html#VALopen_in", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.open_in&nbsp;fname</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input\n    channel for bufferized reading in text mode from file <code class=\"code\">fname</code>.</p>\n\n</div>"],
["Format", "Format.html", "open_hvbox", "Format.html#VALopen_hvbox", "<div class=\"info\">\n<p><code class=\"code\">pp_open_hvbox&nbsp;ppf&nbsp;d</code> opens a new 'horizontal/vertical' pretty-printing box\n  with offset <code class=\"code\">d</code>.</p>\n\n</div>"],
["Format", "Format.html", "open_hovbox", "Format.html#VALopen_hovbox", "<div class=\"info\">\n<p><code class=\"code\">pp_open_hovbox&nbsp;ppf&nbsp;d</code> opens a new 'horizontal-or-vertical'\n  pretty-printing box with offset <code class=\"code\">d</code>.</p>\n\n</div>"],
["Format", "Format.html", "open_hbox", "Format.html#VALopen_hbox", "<div class=\"info\">\n<p><code class=\"code\">pp_open_hbox&nbsp;ppf&nbsp;()</code> opens a new 'horizontal' pretty-printing box.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "open_connection", "ThreadUnix.html#VALopen_connection", ""],
["Unix", "Unix.html", "open_connection", "Unix.html#VALopen_connection", "<div class=\"info\">\n<p>Connect to a server at the given address.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "open_connection", "UnixLabels.html#VALopen_connection", "<div class=\"info\">\n<p>Connect to a server at the given address.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "open_box_of_string", "CamlinternalFormat.html#VALopen_box_of_string", ""],
["Format", "Format.html", "open_box", "Format.html#VALopen_box", "<div class=\"info\">\n<p><code class=\"code\">pp_open_box&nbsp;ppf&nbsp;d</code> opens a new compacting pretty-printing box with\n    offset <code class=\"code\">d</code> in the formatter <code class=\"code\">ppf</code>.</p>\n\n</div>"],
["Sys", "Sys.html", "opaque_identity", "Sys.html#VALopaque_identity", "<div class=\"info\">\n<p>For the purposes of optimization, <code class=\"code\">opaque_identity</code> behaves like an\n    unknown (and thus possibly side-effecting) function.</p>\n\n</div>"],
["Complex", "Complex.html", "one", "Complex.html#VALone", "<div class=\"info\">\n<p>The complex number <code class=\"code\">1</code>.</p>\n\n</div>"],
["Float", "Float.html", "one", "Float.html#VALone", "<div class=\"info\">\n<p>The floating-point 1.</p>\n\n</div>"],
["Int", "Int.html", "one", "Int.html#VALone", "<div class=\"info\">\n<p><code class=\"code\">one</code> is the integer <code class=\"code\">1</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "one", "Int32.html#VALone", "<div class=\"info\">\n<p>The 32-bit integer 1.</p>\n\n</div>"],
["Int64", "Int64.html", "one", "Int64.html#VALone", "<div class=\"info\">\n<p>The 64-bit integer 1.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "one", "Nativeint.html#VALone", "<div class=\"info\">\n<p>The native integer 1.</p>\n\n</div>"],
["Result", "Result.html", "ok", "Result.html#VALok", "<div class=\"info\">\n<p><code class=\"code\">ok&nbsp;v</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;v</code>.</p>\n\n</div>"],
["Bigarray.Array0", "Bigarray.Array0.html", "of_value", "Bigarray.Array0.html#VALof_value", "<div class=\"info\">\n<p>Build a zero-dimensional Bigarray initialized from the\n     given value.</p>\n\n</div>"],
["Obj.Extension_constructor", "Obj.Extension_constructor.html", "of_val", "Obj.Extension_constructor.html#VALof_val", ""],
["Float", "Float.html", "of_string_opt", "Float.html#VALof_string_opt", "<div class=\"info\">\n<p>Same as <code class=\"code\">of_string</code>, but returns <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n\n</div>"],
["Int32", "Int32.html", "of_string_opt", "Int32.html#VALof_string_opt", "<div class=\"info\">\n<p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n\n</div>"],
["Int64", "Int64.html", "of_string_opt", "Int64.html#VALof_string_opt", "<div class=\"info\">\n<p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "of_string_opt", "Nativeint.html#VALof_string_opt", "<div class=\"info\">\n<p>Same as <code class=\"code\">of_string</code>, but return <code class=\"code\"><span class=\"constructor\">None</span></code> instead of raising.</p>\n\n</div>"],
["Bytes", "Bytes.html", "of_string", "Bytes.html#VALof_string", "<div class=\"info\">\n<p>Return a new byte sequence that contains the same bytes as the\n    given string.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "of_string", "BytesLabels.html#VALof_string", "<div class=\"info\">\n<p>Return a new byte sequence that contains the same bytes as the\n    given string.</p>\n\n</div>"],
["Float", "Float.html", "of_string", "Float.html#VALof_string", "<div class=\"info\">\n<p>Convert the given string to a float.</p>\n\n</div>"],
["Int32", "Int32.html", "of_string", "Int32.html#VALof_string", "<div class=\"info\">\n<p>Convert the given string to a 32-bit integer.</p>\n\n</div>"],
["Int64", "Int64.html", "of_string", "Int64.html#VALof_string", "<div class=\"info\">\n<p>Convert the given string to a 64-bit integer.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "of_string", "Nativeint.html#VALof_string", "<div class=\"info\">\n<p>Convert the given string to a native integer.</p>\n\n</div>"],
["Stream", "Stream.html", "of_string", "Stream.html#VALof_string", "<div class=\"info\">\n<p>Return the stream of the characters of the string parameter.</p>\n\n</div>"],
["Array", "Array.html", "of_seq", "Array.html#VALof_seq", "<div class=\"info\">\n<p>Create an array from the generator</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "of_seq", "ArrayLabels.html#VALof_seq", "<div class=\"info\">\n<p>Create an array from the generator</p>\n\n</div>"],
["Buffer", "Buffer.html", "of_seq", "Buffer.html#VALof_seq", "<div class=\"info\">\n<p>Create a buffer from the generator</p>\n\n</div>"],
["Bytes", "Bytes.html", "of_seq", "Bytes.html#VALof_seq", "<div class=\"info\">\n<p>Create a string from the generator</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "of_seq", "BytesLabels.html#VALof_seq", "<div class=\"info\">\n<p>Create a string from the generator</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "of_seq", "Float.Array.html#VALof_seq", "<div class=\"info\">\n<p>Create an array from the generator.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "of_seq", "Float.ArrayLabels.html#VALof_seq", ""],
["Hashtbl", "Hashtbl.html", "of_seq", "Hashtbl.html#VALof_seq", "<div class=\"info\">\n<p>Build a table from the given bindings.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "of_seq", "Hashtbl.S.html#VALof_seq", "<div class=\"info\">\n</div>"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "of_seq", "Hashtbl.SeededS.html#VALof_seq", "<div class=\"info\">\n</div>"],
["List", "List.html", "of_seq", "List.html#VALof_seq", "<div class=\"info\">\n<p>Create a list from the iterator</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "of_seq", "ListLabels.html#VALof_seq", "<div class=\"info\">\n<p>Create a list from the iterator</p>\n\n</div>"],
["Map.S", "Map.S.html", "of_seq", "Map.S.html#VALof_seq", "<div class=\"info\">\n<p>Build a map from the given bindings</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "of_seq", "MoreLabels.Hashtbl.html#VALof_seq", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "of_seq", "MoreLabels.Hashtbl.S.html#VALof_seq", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "of_seq", "MoreLabels.Hashtbl.SeededS.html#VALof_seq", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "of_seq", "MoreLabels.Map.S.html#VALof_seq", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "of_seq", "MoreLabels.Set.S.html#VALof_seq", ""],
["Queue", "Queue.html", "of_seq", "Queue.html#VALof_seq", "<div class=\"info\">\n<p>Create a queue from the generator</p>\n\n</div>"],
["Set.S", "Set.S.html", "of_seq", "Set.S.html#VALof_seq", "<div class=\"info\">\n<p>Build a set from the given bindings</p>\n\n</div>"],
["Stack", "Stack.html", "of_seq", "Stack.html#VALof_seq", "<div class=\"info\">\n<p>Create a stack from the iterator</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "of_seq", "StringLabels.html#VALof_seq", "<div class=\"info\">\n<p>Create a string from the generator</p>\n\n</div>"],
["String", "String.html", "of_seq", "String.html#VALof_seq", "<div class=\"info\">\n<p>Create a string from the generator</p>\n\n</div>"],
["Int64", "Int64.html", "of_nativeint", "Int64.html#VALof_nativeint", "<div class=\"info\">\n<p>Convert the given native integer (type <code class=\"code\">nativeint</code>)\n   to a 64-bit integer (type <code class=\"code\">int64</code>).</p>\n\n</div>"],
["Array", "Array.html", "of_list", "Array.html#VALof_list", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.of_list&nbsp;l</code> returns a fresh array containing the elements\n   of <code class=\"code\">l</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "of_list", "ArrayLabels.html#VALof_list", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.of_list&nbsp;l</code> returns a fresh array containing the elements\n   of <code class=\"code\">l</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "of_list", "Float.Array.html#VALof_list", "<div class=\"info\">\n<p><code class=\"code\">of_list&nbsp;l</code> returns a fresh floatarray containing the elements\n      of <code class=\"code\">l</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "of_list", "Float.ArrayLabels.html#VALof_list", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "of_list", "MoreLabels.Set.S.html#VALof_list", ""],
["Set.S", "Set.S.html", "of_list", "Set.S.html#VALof_list", "<div class=\"info\">\n<p><code class=\"code\">of_list&nbsp;l</code> creates a set from a list of elements.</p>\n\n</div>"],
["Stream", "Stream.html", "of_list", "Stream.html#VALof_list", "<div class=\"info\">\n<p>Return the stream holding the elements of the list in the same\n   order.</p>\n\n</div>"],
["Int64", "Int64.html", "of_int32", "Int64.html#VALof_int32", "<div class=\"info\">\n<p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>)\n   to a 64-bit integer (type <code class=\"code\">int64</code>).</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "of_int32", "Nativeint.html#VALof_int32", "<div class=\"info\">\n<p>Convert the given 32-bit integer (type <code class=\"code\">int32</code>)\n   to a native integer.</p>\n\n</div>"],
["Float", "Float.html", "of_int", "Float.html#VALof_int", "<div class=\"info\">\n<p>Convert an integer to floating-point.</p>\n\n</div>"],
["Int32", "Int32.html", "of_int", "Int32.html#VALof_int", "<div class=\"info\">\n<p>Convert the given integer (type <code class=\"code\">int</code>) to a 32-bit integer\n    (type <code class=\"code\">int32</code>).</p>\n\n</div>"],
["Int64", "Int64.html", "of_int", "Int64.html#VALof_int", "<div class=\"info\">\n<p>Convert the given integer (type <code class=\"code\">int</code>) to a 64-bit integer\n    (type <code class=\"code\">int64</code>).</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "of_int", "Nativeint.html#VALof_int", "<div class=\"info\">\n<p>Convert the given integer (type <code class=\"code\">int</code>) to a native integer\n   (type <code class=\"code\">nativeint</code>).</p>\n\n</div>"],
["Uchar", "Uchar.html", "of_int", "Uchar.html#VALof_int", "<div class=\"info\">\n<p><code class=\"code\">of_int&nbsp;i</code> is <code class=\"code\">i</code> as a Unicode character.</p>\n\n</div>"],
["Int", "Int.html", "of_float", "Int.html#VALof_float", "<div class=\"info\">\n<p><code class=\"code\">of_float&nbsp;x</code> truncates <code class=\"code\">x</code> to an integer.</p>\n\n</div>"],
["Int32", "Int32.html", "of_float", "Int32.html#VALof_float", "<div class=\"info\">\n<p>Convert the given floating-point number to a 32-bit integer,\n   discarding the fractional part (truncate towards 0).</p>\n\n</div>"],
["Int64", "Int64.html", "of_float", "Int64.html#VALof_float", "<div class=\"info\">\n<p>Convert the given floating-point number to a 64-bit integer,\n   discarding the fractional part (truncate towards 0).</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "of_float", "Nativeint.html#VALof_float", "<div class=\"info\">\n<p>Convert the given floating-point number to a native integer,\n   discarding the fractional part (truncate towards 0).</p>\n\n</div>"],
["Uchar", "Uchar.html", "of_char", "Uchar.html#VALof_char", "<div class=\"info\">\n<p><code class=\"code\">of_char&nbsp;c</code> is <code class=\"code\">c</code> as a Unicode character.</p>\n\n</div>"],
["Stream", "Stream.html", "of_channel", "Stream.html#VALof_channel", "<div class=\"info\">\n<p>Return the stream of the characters read from the input channel.</p>\n\n</div>"],
["Stream", "Stream.html", "of_bytes", "Stream.html#VALof_bytes", "<div class=\"info\">\n<p>Return the stream of the characters of the bytes parameter.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "of_array", "Bigarray.Array1.html#VALof_array", "<div class=\"info\">\n<p>Build a one-dimensional Bigarray initialized from the\n     given array.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "of_array", "Bigarray.Array2.html#VALof_array", "<div class=\"info\">\n<p>Build a two-dimensional Bigarray initialized from the\n     given array of arrays.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "of_array", "Bigarray.Array3.html#VALof_array", "<div class=\"info\">\n<p>Build a three-dimensional Bigarray initialized from the\n     given array of arrays of arrays.</p>\n\n</div>"],
["Sys", "Sys.html", "ocaml_version", "Sys.html#VALocaml_version", "<div class=\"info\">\n<p><code class=\"code\">ocaml_version</code> is the version of OCaml.</p>\n\n</div>"],
["Obj", "Obj.html", "object_tag", "Obj.html#VALobject_tag", ""],
["Obj", "Obj.html", "obj", "Obj.html#VALobj", ""],
["Bigarray.Genarray", "Bigarray.Genarray.html", "num_dims", "Bigarray.Genarray.html#VALnum_dims", "<div class=\"info\">\n<p>Return the number of dimensions of the given Bigarray.</p>\n\n</div>"],
["List", "List.html", "nth_opt", "List.html#VALnth_opt", "<div class=\"info\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "nth_opt", "ListLabels.html#VALnth_opt", "<div class=\"info\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "nth_dim", "Bigarray.Genarray.html#VALnth_dim", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.nth_dim&nbsp;a&nbsp;n</code> returns the <code class=\"code\">n</code>-th dimension of the\n     Bigarray <code class=\"code\">a</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "nth", "Buffer.html#VALnth", "<div class=\"info\">\n<p>Get the n-th character of the buffer.</p>\n\n</div>"],
["List", "List.html", "nth", "List.html#VALnth", "<div class=\"info\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "nth", "ListLabels.html#VALnth", "<div class=\"info\">\n<p>Return the <code class=\"code\">n</code>-th element of the given list.</p>\n\n</div>"],
["Stream", "Stream.html", "npeek", "Stream.html#VALnpeek", "<div class=\"info\">\n<p><code class=\"code\">npeek&nbsp;n</code> returns the list of the <code class=\"code\">n</code> first elements of\n   the stream, or all its remaining elements if less than <code class=\"code\">n</code>\n   elements are available.</p>\n\n</div>"],
["Bool", "Bool.html", "not", "Bool.html#VALnot", "<div class=\"info\">\n<p><code class=\"code\">not&nbsp;b</code> is the boolean negation of <code class=\"code\">b</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "not", "Pervasives.html#VALnot", ""],
["Complex", "Complex.html", "norm2", "Complex.html#VALnorm2", "<div class=\"info\">\n<p>Norm squared: given <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">x^2&nbsp;+&nbsp;y^2</code>.</p>\n\n</div>"],
["Complex", "Complex.html", "norm", "Complex.html#VALnorm", "<div class=\"info\">\n<p>Norm: given <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">sqrt(x^2&nbsp;+&nbsp;y^2)</code>.</p>\n\n</div>"],
["Option", "Option.html", "none", "Option.html#VALnone", "<div class=\"info\">\n<p><code class=\"code\">none</code> is <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n\n</div>"],
["Obj", "Obj.html", "no_scan_tag", "Obj.html#VALno_scan_tag", ""],
["Unix", "Unix.html", "nice", "Unix.html#VALnice", "<div class=\"info\">\n<p>Change the process priority.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "nice", "UnixLabels.html#VALnice", "<div class=\"info\">\n<p>Change the process priority.</p>\n\n</div>"],
["Float", "Float.html", "next_after", "Float.html#VALnext_after", "<div class=\"info\">\n<p><code class=\"code\">next_after&nbsp;x&nbsp;y</code> returns the next representable floating-point\n   value following <code class=\"code\">x</code> in the direction of <code class=\"code\">y</code>.</p>\n\n</div>"],
["Stream", "Stream.html", "next", "Stream.html#VALnext", "<div class=\"info\">\n<p>Return the first element of the stream and remove it from the\n   stream.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "new_variable", "CamlinternalOO.html#VALnew_variable", ""],
["CamlinternalOO", "CamlinternalOO.html", "new_methods_variables", "CamlinternalOO.html#VALnew_methods_variables", ""],
["CamlinternalOO", "CamlinternalOO.html", "new_method", "CamlinternalOO.html#VALnew_method", ""],
["Lexing", "Lexing.html", "new_line", "Lexing.html#VALnew_line", "<div class=\"info\">\n<p>Update the <code class=\"code\">lex_curr_p</code> field of the lexbuf to reflect the start\n    of a new line.</p>\n\n</div>"],
["Event", "Event.html", "new_channel", "Event.html#VALnew_channel", "<div class=\"info\">\n<p>Return a new channel.</p>\n\n</div>"],
["Obj", "Obj.html", "new_block", "Obj.html#VALnew_block", ""],
["Fun", "Fun.html", "negate", "Fun.html#VALnegate", "<div class=\"info\">\n<p><code class=\"code\">negate&nbsp;p</code> is the negation of the predicate function <code class=\"code\">p</code>.</p>\n\n</div>"],
["Float", "Float.html", "neg_infinity", "Float.html#VALneg_infinity", "<div class=\"info\">\n<p>Negative infinity.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "neg_infinity", "Pervasives.html#VALneg_infinity", ""],
["Complex", "Complex.html", "neg", "Complex.html#VALneg", "<div class=\"info\">\n<p>Unary negation.</p>\n\n</div>"],
["Float", "Float.html", "neg", "Float.html#VALneg", "<div class=\"info\">\n<p>Unary negation.</p>\n\n</div>"],
["Int", "Int.html", "neg", "Int.html#VALneg", "<div class=\"info\">\n<p><code class=\"code\">neg&nbsp;x</code> is <code class=\"code\"><span class=\"keywordsign\">~-</span>x</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "neg", "Int32.html#VALneg", "<div class=\"info\">\n<p>Unary negation.</p>\n\n</div>"],
["Int64", "Int64.html", "neg", "Int64.html#VALneg", "<div class=\"info\">\n<p>Unary negation.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "neg", "Nativeint.html#VALneg", "<div class=\"info\">\n<p>Unary negation.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "nativeint", "Bigarray.html#VALnativeint", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["Random", "Random.html", "nativeint", "Random.html#VALnativeint", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.nativeint&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).</p>\n\n</div>"],
["Random.State", "Random.State.html", "nativeint", "Random.State.html#VALnativeint", ""],
["CamlinternalOO", "CamlinternalOO.html", "narrow", "CamlinternalOO.html#VALnarrow", ""],
["Float", "Float.html", "nan", "Float.html#VALnan", "<div class=\"info\">\n<p>A special floating-point value denoting the result of an\n    undefined operation such as <code class=\"code\">0.0&nbsp;/.&nbsp;0.0</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "nan", "Pervasives.html#VALnan", ""],
["Scanf.Scanning", "Scanf.Scanning.html", "name_of_input", "Scanf.Scanning.html#VALname_of_input", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.name_of_input&nbsp;ic</code> returns the name of the character source\n    for the given <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p>\n\n</div>"],
["Obj.Extension_constructor", "Obj.Extension_constructor.html", "name", "Obj.Extension_constructor.html#VALname", ""],
["Complex", "Complex.html", "mul", "Complex.html#VALmul", "<div class=\"info\">\n<p>Multiplication</p>\n\n</div>"],
["Float", "Float.html", "mul", "Float.html#VALmul", "<div class=\"info\">\n<p>Floating-point multiplication.</p>\n\n</div>"],
["Int", "Int.html", "mul", "Int.html#VALmul", "<div class=\"info\">\n<p><code class=\"code\">mul&nbsp;x&nbsp;y</code> is the multiplication <code class=\"code\">x&nbsp;*&nbsp;y</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "mul", "Int32.html#VALmul", "<div class=\"info\">\n<p>Multiplication.</p>\n\n</div>"],
["Int64", "Int64.html", "mul", "Int64.html#VALmul", "<div class=\"info\">\n<p>Multiplication.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "mul", "Nativeint.html#VALmul", "<div class=\"info\">\n<p>Multiplication.</p>\n\n</div>"],
["Float", "Float.html", "modf", "Float.html#VALmodf", "<div class=\"info\">\n<p><code class=\"code\">modf&nbsp;f</code> returns the pair of the fractional and integral\n    part of <code class=\"code\">f</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "modf", "Pervasives.html#VALmodf", ""],
["Pervasives", "Pervasives.html", "mod_float", "Pervasives.html#VALmod_float", ""],
["Unix", "Unix.html", "mktime", "Unix.html#VALmktime", "<div class=\"info\">\n<p>Convert a date and time, specified by the <code class=\"code\">tm</code> argument, into\n   a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "mktime", "UnixLabels.html#VALmktime", "<div class=\"info\">\n<p>Convert a date and time, specified by the <code class=\"code\">tm</code> argument, into\n   a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>.</p>\n\n</div>"],
["Unix", "Unix.html", "mkfifo", "Unix.html#VALmkfifo", "<div class=\"info\">\n<p>Create a named pipe with the given permissions (see <a href=\"Unix.html#VALumask\"><code class=\"code\"><span class=\"constructor\">Unix</span>.umask</code></a>).</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "mkfifo", "UnixLabels.html#VALmkfifo", "<div class=\"info\">\n<p>Create a named pipe with the given permissions.</p>\n\n</div>"],
["Unix", "Unix.html", "mkdir", "Unix.html#VALmkdir", "<div class=\"info\">\n<p>Create a directory with the given permissions (see <a href=\"Unix.html#VALumask\"><code class=\"code\"><span class=\"constructor\">Unix</span>.umask</code></a>).</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "mkdir", "UnixLabels.html#VALmkdir", "<div class=\"info\">\n<p>Create a directory with the given permissions.</p>\n\n</div>"],
["Float", "Float.html", "minus_one", "Float.html#VALminus_one", "<div class=\"info\">\n<p>The floating-point -1.</p>\n\n</div>"],
["Int", "Int.html", "minus_one", "Int.html#VALminus_one", "<div class=\"info\">\n<p><code class=\"code\">minus_one</code> is the integer <code class=\"code\">-1</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "minus_one", "Int32.html#VALminus_one", "<div class=\"info\">\n<p>The 32-bit integer -1.</p>\n\n</div>"],
["Int64", "Int64.html", "minus_one", "Int64.html#VALminus_one", "<div class=\"info\">\n<p>The 64-bit integer -1.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "minus_one", "Nativeint.html#VALminus_one", "<div class=\"info\">\n<p>The native integer -1.</p>\n\n</div>"],
["Gc", "Gc.html", "minor_words", "Gc.html#VALminor_words", "<div class=\"info\">\n<p>Number of words allocated in the minor heap since the program was\n    started.</p>\n\n</div>"],
["Gc", "Gc.html", "minor", "Gc.html#VALminor", "<div class=\"info\">\n<p>Trigger a minor collection.</p>\n\n</div>"],
["Float", "Float.html", "min_num", "Float.html#VALmin_num", "<div class=\"info\">\n<p><code class=\"code\">min_num&nbsp;x&nbsp;y</code> returns the minimum of <code class=\"code\">x</code> and <code class=\"code\">y</code> treating <code class=\"code\">nan</code> as\n   missing values.</p>\n\n</div>"],
["Float", "Float.html", "min_max_num", "Float.html#VALmin_max_num", "<div class=\"info\">\n<p><code class=\"code\">min_max_num&nbsp;x&nbsp;y</code> is <code class=\"code\">(min_num&nbsp;x&nbsp;y,&nbsp;max_num&nbsp;x&nbsp;y)</code>, just more\n   efficient.</p>\n\n</div>"],
["Float", "Float.html", "min_max", "Float.html#VALmin_max", "<div class=\"info\">\n<p><code class=\"code\">min_max&nbsp;x&nbsp;y</code> is <code class=\"code\">(min&nbsp;x&nbsp;y,&nbsp;max&nbsp;x&nbsp;y)</code>, just more efficient.</p>\n\n</div>"],
["Int", "Int.html", "min_int", "Int.html#VALmin_int", "<div class=\"info\">\n<p><code class=\"code\">min_int</code> is the smallest representable integer,\n    <code class=\"code\">-2{^[<span class=\"constructor\">Sys</span>.int_size&nbsp;-&nbsp;1]}</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "min_int", "Int32.html#VALmin_int", "<div class=\"info\">\n<p>The smallest representable 32-bit integer, -2<sup class=\"superscript\">31</sup>.</p>\n\n</div>"],
["Int64", "Int64.html", "min_int", "Int64.html#VALmin_int", "<div class=\"info\">\n<p>The smallest representable 64-bit integer, -2<sup class=\"superscript\">63</sup>.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "min_int", "Nativeint.html#VALmin_int", "<div class=\"info\">\n<p>The smallest representable native integer,\n   either -2<sup class=\"superscript\">31</sup> on a 32-bit platform,\n   or -2<sup class=\"superscript\">63</sup> on a 64-bit platform.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "min_int", "Pervasives.html#VALmin_int", ""],
["Float", "Float.html", "min_float", "Float.html#VALmin_float", "<div class=\"info\">\n<p>The smallest positive, non-zero, non-denormalized value of type <code class=\"code\">float</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "min_float", "Pervasives.html#VALmin_float", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "min_elt_opt", "MoreLabels.Set.S.html#VALmin_elt_opt", ""],
["Set.S", "Set.S.html", "min_elt_opt", "Set.S.html#VALmin_elt_opt", "<div class=\"info\">\n<p>Return the smallest element of the given set\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code>\n       if the set is empty.</p>\n\n</div>"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "min_elt", "MoreLabels.Set.S.html#VALmin_elt", ""],
["Set.S", "Set.S.html", "min_elt", "Set.S.html#VALmin_elt", "<div class=\"info\">\n<p>Return the smallest element of the given set\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise\n       <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the set is empty.</p>\n\n</div>"],
["Map.S", "Map.S.html", "min_binding_opt", "Map.S.html#VALmin_binding_opt", "<div class=\"info\">\n<p>Return the binding with the smallest key in the given map\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or <code class=\"code\"><span class=\"constructor\">None</span></code>\n       if the map is empty.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "min_binding_opt", "MoreLabels.Map.S.html#VALmin_binding_opt", ""],
["Map.S", "Map.S.html", "min_binding", "Map.S.html#VALmin_binding", "<div class=\"info\">\n<p>Return the binding with the smallest key in a given map\n       (with respect to the <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code> ordering), or raise\n       <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the map is empty.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "min_binding", "MoreLabels.Map.S.html#VALmin_binding", ""],
["Float", "Float.html", "min", "Float.html#VALmin", "<div class=\"info\">\n<p><code class=\"code\">min&nbsp;x&nbsp;y</code> returns the minimum of <code class=\"code\">x</code> and <code class=\"code\">y</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "min", "Pervasives.html#VALmin", ""],
["Uchar", "Uchar.html", "min", "Uchar.html#VALmin", "<div class=\"info\">\n<p><code class=\"code\">min</code> is U+0000.</p>\n\n</div>"],
["List", "List.html", "merge", "List.html#VALmerge", "<div class=\"info\">\n<p>Merge two lists:\n    Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the\n    comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge&nbsp;cmp&nbsp;l1&nbsp;l2</code> will return a\n    sorted list containing all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "merge", "ListLabels.html#VALmerge", "<div class=\"info\">\n<p>Merge two lists:\n    Assuming that <code class=\"code\">l1</code> and <code class=\"code\">l2</code> are sorted according to the\n    comparison function <code class=\"code\">cmp</code>, <code class=\"code\">merge&nbsp;cmp&nbsp;l1&nbsp;l2</code> will return a\n    sorted list containing all the elements of <code class=\"code\">l1</code> and <code class=\"code\">l2</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "merge", "Map.S.html#VALmerge", "<div class=\"info\">\n<p><code class=\"code\">merge&nbsp;f&nbsp;m1&nbsp;m2</code> computes a map whose keys is a subset of keys of <code class=\"code\">m1</code>\n        and of <code class=\"code\">m2</code>.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "merge", "MoreLabels.Map.S.html#VALmerge", ""],
["Weak.S", "Weak.S.html", "merge", "Weak.S.html#VALmerge", "<div class=\"info\">\n<p><code class=\"code\">merge&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code> if any,\n        or else adds <code class=\"code\">x</code> to <code class=\"code\">t</code> and return <code class=\"code\">x</code>.</p>\n\n</div>"],
["Array", "Array.html", "memq", "Array.html#VALmemq", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALmem\"><code class=\"code\"><span class=\"constructor\">Array</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare elements.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "memq", "ArrayLabels.html#VALmemq", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALmem\"><code class=\"code\"><span class=\"constructor\">Array</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare list elements.</p>\n\n</div>"],
["List", "List.html", "memq", "List.html#VALmemq", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALmem\"><code class=\"code\"><span class=\"constructor\">List</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare list elements.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "memq", "ListLabels.html#VALmemq", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALmem\"><code class=\"code\"><span class=\"constructor\">List</span>.mem</code></a>, but uses physical equality instead of structural\n   equality to compare list elements.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "mem_ieee", "Float.Array.html#VALmem_ieee", "<div class=\"info\">\n<p>Same as <a href=\"Float.Array.html#VALmem\"><code class=\"code\"><span class=\"constructor\">Float</span>.<span class=\"constructor\">Array</span>.mem</code></a>, but uses IEEE equality instead of structural equality.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "mem_ieee", "Float.ArrayLabels.html#VALmem_ieee", ""],
["List", "List.html", "mem_assq", "List.html#VALmem_assq", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.mem_assoc</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "mem_assq", "ListLabels.html#VALmem_assq", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALmem_assoc\"><code class=\"code\"><span class=\"constructor\">List</span>.mem_assoc</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n\n</div>"],
["List", "List.html", "mem_assoc", "List.html#VALmem_assoc", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but simply return true if a binding exists,\n   and false if no bindings exist for the given key.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "mem_assoc", "ListLabels.html#VALmem_assoc", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but simply return true if a binding exists,\n   and false if no bindings exist for the given key.</p>\n\n</div>"],
["Array", "Array.html", "mem", "Array.html#VALmem", "<div class=\"info\">\n<p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is structurally equal\n    to an element of <code class=\"code\">l</code> (i.e.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "mem", "ArrayLabels.html#VALmem", "<div class=\"info\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;a</code> is true if and only if <code class=\"code\">x</code> is equal\n   to an element of <code class=\"code\">a</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "mem", "Float.Array.html#VALmem", "<div class=\"info\">\n<p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if there is an element of <code class=\"code\">l</code> that is\n      structurally equal to <code class=\"code\">a</code>, i.e.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "mem", "Float.ArrayLabels.html#VALmem", ""],
["Hashtbl", "Hashtbl.html", "mem", "Hashtbl.html#VALmem", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.mem&nbsp;tbl&nbsp;x</code> checks if <code class=\"code\">x</code> is bound in <code class=\"code\">tbl</code>.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "mem", "Hashtbl.S.html#VALmem", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "mem", "Hashtbl.SeededS.html#VALmem", ""],
["List", "List.html", "mem", "List.html#VALmem", "<div class=\"info\">\n<p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal\n   to an element of <code class=\"code\">l</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "mem", "ListLabels.html#VALmem", "<div class=\"info\">\n<p><code class=\"code\">mem&nbsp;a&nbsp;l</code> is true if and only if <code class=\"code\">a</code> is equal\n   to an element of <code class=\"code\">l</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "mem", "Map.S.html#VALmem", "<div class=\"info\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">m</code> contains a binding for <code class=\"code\">x</code>,\n       and <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "mem", "MoreLabels.Hashtbl.html#VALmem", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "mem", "MoreLabels.Hashtbl.S.html#VALmem", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "mem", "MoreLabels.Hashtbl.SeededS.html#VALmem", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "mem", "MoreLabels.Map.S.html#VALmem", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "mem", "MoreLabels.Set.S.html#VALmem", ""],
["Set.S", "Set.S.html", "mem", "Set.S.html#VALmem", "<div class=\"info\">\n<p><code class=\"code\">mem&nbsp;x&nbsp;s</code> tests whether <code class=\"code\">x</code> belongs to the set <code class=\"code\">s</code>.</p>\n\n</div>"],
["Weak.S", "Weak.S.html", "mem", "Weak.S.html#VALmem", "<div class=\"info\">\n<p><code class=\"code\">mem&nbsp;t&nbsp;x</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if there is at least one instance\n        of <code class=\"code\">x</code> in <code class=\"code\">t</code>, false otherwise.</p>\n\n</div>"],
["Sys", "Sys.html", "max_string_length", "Sys.html#VALmax_string_length", "<div class=\"info\">\n<p>Maximum length of strings and byte sequences.</p>\n\n</div>"],
["Float", "Float.html", "max_num", "Float.html#VALmax_num", "<div class=\"info\">\n<p><code class=\"code\">max_num&nbsp;x&nbsp;y</code> returns the maximum of <code class=\"code\">x</code> and <code class=\"code\">y</code> treating <code class=\"code\">nan</code> as\n   missing values.</p>\n\n</div>"],
["Int", "Int.html", "max_int", "Int.html#VALmax_int", "<div class=\"info\">\n<p><code class=\"code\">max_int</code> is the greatest representable integer,\n    <code class=\"code\">2{^[<span class=\"constructor\">Sys</span>.int_size&nbsp;-&nbsp;1]}&nbsp;-&nbsp;1</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "max_int", "Int32.html#VALmax_int", "<div class=\"info\">\n<p>The greatest representable 32-bit integer, 2<sup class=\"superscript\">31</sup> - 1.</p>\n\n</div>"],
["Int64", "Int64.html", "max_int", "Int64.html#VALmax_int", "<div class=\"info\">\n<p>The greatest representable 64-bit integer, 2<sup class=\"superscript\">63</sup> - 1.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "max_int", "Nativeint.html#VALmax_int", "<div class=\"info\">\n<p>The greatest representable native integer,\n   either 2<sup class=\"superscript\">31</sup> - 1 on a 32-bit platform,\n   or 2<sup class=\"superscript\">63</sup> - 1 on a 64-bit platform.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "max_int", "Pervasives.html#VALmax_int", ""],
["Sys", "Sys.html", "max_floatarray_length", "Sys.html#VALmax_floatarray_length", "<div class=\"info\">\n<p>Maximum length of a floatarray.</p>\n\n</div>"],
["Float", "Float.html", "max_float", "Float.html#VALmax_float", "<div class=\"info\">\n<p>The largest positive finite value of type <code class=\"code\">float</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "max_float", "Pervasives.html#VALmax_float", ""],
["Obj.Ephemeron", "Obj.Ephemeron.html", "max_ephe_length", "Obj.Ephemeron.html#VALmax_ephe_length", "<div class=\"info\">\n<p>Maximum length of an ephemeron, ie the maximum number of keys an\n      ephemeron could contain</p>\n\n</div>"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "max_elt_opt", "MoreLabels.Set.S.html#VALmax_elt_opt", ""],
["Set.S", "Set.S.html", "max_elt_opt", "Set.S.html#VALmax_elt_opt", "<div class=\"info\">\n<p>Same as <a href=\"Set.S.html#VALmin_elt_opt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt_opt</code></a>, but returns the largest element of the\n        given set.</p>\n\n</div>"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "max_elt", "MoreLabels.Set.S.html#VALmax_elt", ""],
["Set.S", "Set.S.html", "max_elt", "Set.S.html#VALmax_elt", "<div class=\"info\">\n<p>Same as <a href=\"Set.S.html#VALmin_elt\"><code class=\"code\"><span class=\"constructor\">Set</span>.<span class=\"constructor\">S</span>.min_elt</code></a>, but returns the largest element of the\n       given set.</p>\n\n</div>"],
["Map.S", "Map.S.html", "max_binding_opt", "Map.S.html#VALmax_binding_opt", "<div class=\"info\">\n<p>Same as <a href=\"Map.S.html#VALmin_binding_opt\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding_opt</code></a>, but returns the binding with\n        the largest key in the given map.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "max_binding_opt", "MoreLabels.Map.S.html#VALmax_binding_opt", ""],
["Map.S", "Map.S.html", "max_binding", "Map.S.html#VALmax_binding", "<div class=\"info\">\n<p>Same as <a href=\"Map.S.html#VALmin_binding\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.min_binding</code></a>, but returns the binding with\n        the largest key in the given map.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "max_binding", "MoreLabels.Map.S.html#VALmax_binding", ""],
["Sys", "Sys.html", "max_array_length", "Sys.html#VALmax_array_length", "<div class=\"info\">\n<p>Maximum length of a normal array (i.e.</p>\n\n</div>"],
["Float", "Float.html", "max", "Float.html#VALmax", "<div class=\"info\">\n<p><code class=\"code\">max&nbsp;x&nbsp;y</code> returns the maximum of <code class=\"code\">x</code> and <code class=\"code\">y</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "max", "Pervasives.html#VALmax", ""],
["Uchar", "Uchar.html", "max", "Uchar.html#VALmax", "<div class=\"info\">\n<p><code class=\"code\">max</code> is U+10FFFF.</p>\n\n</div>"],
["Str", "Str.html", "matched_string", "Str.html#VALmatched_string", "<div class=\"info\">\n<p><code class=\"code\">matched_string&nbsp;s</code> returns the substring of <code class=\"code\">s</code> that was matched\n   by the last call to one of the following matching or searching\n   functions: <a href=\"Str.html#VALstring_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_match</code></a>, <a href=\"Str.html#VALsearch_forward\"><code class=\"code\"><span class=\"constructor\">Str</span>.search_forward</code></a>, <a href=\"Str.html#VALsearch_backward\"><code class=\"code\"><span class=\"constructor\">Str</span>.search_backward</code></a>, <a href=\"Str.html#VALstring_partial_match\"><code class=\"code\"><span class=\"constructor\">Str</span>.string_partial_match</code></a>, <a href=\"Str.html#VALglobal_substitute\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_substitute</code></a>, <a href=\"Str.html#VALsubstitute_first\"><code class=\"code\"><span class=\"constructor\">Str</span>.substitute_first</code></a>\n   provided that none of the following functions was called in between: <a href=\"Str.html#VALglobal_replace\"><code class=\"code\"><span class=\"constructor\">Str</span>.global_replace</code></a>, <a href=\"Str.html#VALreplace_first\"><code class=\"code\"><span class=\"constructor\">Str</span>.replace_first</code></a>, <a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a>, <a href=\"Str.html#VALbounded_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split</code></a>, <a href=\"Str.html#VALsplit_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.split_delim</code></a>, <a href=\"Str.html#VALbounded_split_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split_delim</code></a>, <a href=\"Str.html#VALfull_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.full_split</code></a>, <a href=\"Str.html#VALbounded_full_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_full_split</code></a>\n   Note: in the case of <code class=\"code\">global_substitute</code> and <code class=\"code\">substitute_first</code>,\n   a call to <code class=\"code\">matched_string</code> is only valid within the <code class=\"code\">subst</code> argument,\n   not after <code class=\"code\">global_substitute</code> or <code class=\"code\">substitute_first</code> returns.</p>\n\n</div>"],
["Str", "Str.html", "matched_group", "Str.html#VALmatched_group", "<div class=\"info\">\n<p><code class=\"code\">matched_group&nbsp;n&nbsp;s</code> returns the substring of <code class=\"code\">s</code> that was matched\n   by the <code class=\"code\">n</code>th group <code class=\"code\">\\(...\\)</code> of the regular expression that was\n   matched by the last call to a matching or searching function (see\n   <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p>\n\n</div>"],
["Str", "Str.html", "match_end", "Str.html#VALmatch_end", "<div class=\"info\">\n<p><code class=\"code\">match_end()</code> returns the position of the character following the\n   last character of the substring that was matched by the last call\n   to a matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for\n   details).</p>\n\n</div>"],
["Str", "Str.html", "match_beginning", "Str.html#VALmatch_beginning", "<div class=\"info\">\n<p><code class=\"code\">match_beginning()</code> returns the position of the first character\n   of the substring that was matched by the last call to a matching\n   or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p>\n\n</div>"],
["Obj", "Obj.html", "marshal", "Obj.html#VALmarshal", ""],
["Array", "Array.html", "mapi", "Array.html#VALmapi", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Array</span>.map</code></a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "mapi", "ArrayLabels.html#VALmapi", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Array</span>.map</code></a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument.</p>\n\n</div>"],
["Bytes", "Bytes.html", "mapi", "Bytes.html#VALmapi", "<div class=\"info\">\n<p><code class=\"code\">mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the resulting bytes\n    in a new sequence that is returned as the result.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "mapi", "BytesLabels.html#VALmapi", "<div class=\"info\">\n<p><code class=\"code\">mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the resulting bytes\n    in a new sequence that is returned as the result.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "mapi", "Float.Array.html#VALmapi", "<div class=\"info\">\n<p>Same as <a href=\"Float.Array.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Float</span>.<span class=\"constructor\">Array</span>.map</code></a>, but the\n      function is applied to the index of the element as first argument,\n      and the element itself as second argument.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "mapi", "Float.ArrayLabels.html#VALmapi", ""],
["List", "List.html", "mapi", "List.html#VALmapi", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "mapi", "ListLabels.html#VALmapi", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALmap\"><code class=\"code\"><span class=\"constructor\">List</span>.map</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n\n</div>"],
["Map.S", "Map.S.html", "mapi", "Map.S.html#VALmapi", "<div class=\"info\">\n<p>Same as <a href=\"Map.S.html#VALmap\"><code class=\"code\"><span class=\"constructor\">Map</span>.<span class=\"constructor\">S</span>.map</code></a>, but the function receives as arguments both the\n       key and the associated value for each binding of the map.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "mapi", "MoreLabels.Map.S.html#VALmapi", ""],
["StringLabels", "StringLabels.html", "mapi", "StringLabels.html#VALmapi", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the results in a new\n    string that is returned.</p>\n\n</div>"],
["String", "String.html", "mapi", "String.html#VALmapi", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.mapi&nbsp;f&nbsp;s</code> calls <code class=\"code\">f</code> with each character of <code class=\"code\">s</code> and its\n    index (in increasing index order) and stores the results in a new\n    string that is returned.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "map_to_array", "Float.Array.html#VALmap_to_array", "<div class=\"info\">\n<p><code class=\"code\">map_to_array&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>,\n      and builds an array with the results returned by <code class=\"code\">f</code>:\n      <code class=\"code\">[|&nbsp;f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(length&nbsp;a&nbsp;-&nbsp;1)&nbsp;|]</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "map_to_array", "Float.ArrayLabels.html#VALmap_to_array", ""],
["Float.Array", "Float.Array.html", "map_from_array", "Float.Array.html#VALmap_from_array", "<div class=\"info\">\n<p><code class=\"code\">map_from_array&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>,\n      and builds a floatarray with the results returned by <code class=\"code\">f</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "map_from_array", "Float.ArrayLabels.html#VALmap_from_array", ""],
["Unix", "Unix.html", "map_file", "Unix.html#VALmap_file", "<div class=\"info\">\n<p>Memory mapping of a file as a Bigarray.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "map_file", "UnixLabels.html#VALmap_file", "<div class=\"info\">\n<p>Memory mapping of a file as a Bigarray.</p>\n\n</div>"],
["Result", "Result.html", "map_error", "Result.html#VALmap_error", "<div class=\"info\">\n<p><code class=\"code\">map_error&nbsp;f&nbsp;r</code> is <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;(f&nbsp;e)</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;e</code> and <code class=\"code\">r</code> if\n    <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;_</code>.</p>\n\n</div>"],
["Array", "Array.html", "map2", "Array.html#VALmap2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>, and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0)&nbsp;b.(0);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;b.(<span class=\"constructor\">Array</span>.length&nbsp;b&nbsp;-&nbsp;1)|]</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "map2", "ArrayLabels.html#VALmap2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>, and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0)&nbsp;b.(0);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;b.(<span class=\"constructor\">Array</span>.length&nbsp;b&nbsp;-&nbsp;1)|]</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "map2", "Float.Array.html#VALmap2", "<div class=\"info\">\n<p><code class=\"code\">map2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n      and <code class=\"code\">b</code>, and builds a floatarray with the results returned by <code class=\"code\">f</code>:\n      <code class=\"code\">[|&nbsp;f&nbsp;a.(0)&nbsp;b.(0);&nbsp;...;&nbsp;f&nbsp;a.(length&nbsp;a&nbsp;-&nbsp;1)&nbsp;b.(length&nbsp;b&nbsp;-&nbsp;1)|]</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "map2", "Float.ArrayLabels.html#VALmap2", ""],
["List", "List.html", "map2", "List.html#VALmap2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn]</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "map2", "ListLabels.html#VALmap2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn]</code>.</p>\n\n</div>"],
["Array", "Array.html", "map", "Array.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>,\n   and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;|]</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "map", "ArrayLabels.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.map&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>,\n   and builds an array with the results returned by <code class=\"code\">f</code>:\n   <code class=\"code\">[|&nbsp;f&nbsp;a.(0);&nbsp;f&nbsp;a.(1);&nbsp;...;&nbsp;f&nbsp;a.(<span class=\"constructor\">Array</span>.length&nbsp;a&nbsp;-&nbsp;1)&nbsp;|]</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "map", "Bytes.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>\n    (in increasing index order) and stores the resulting bytes in\n    a new sequence that is returned as the result.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "map", "BytesLabels.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code> and\n    stores the resulting bytes in a new sequence that is returned as\n    the result.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "map", "Float.Array.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\">map&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>,\n      and builds a floatarray with the results returned by <code class=\"code\">f</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "map", "Float.ArrayLabels.html#VALmap", ""],
["List", "List.html", "map", "List.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1,&nbsp;...,&nbsp;an</code>,\n   and builds the list <code class=\"code\">[f&nbsp;a1;&nbsp;...;&nbsp;f&nbsp;an]</code>\n   with the results returned by <code class=\"code\">f</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "map", "ListLabels.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.map&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> to <code class=\"code\">a1,&nbsp;...,&nbsp;an</code>,\n   and builds the list <code class=\"code\">[f&nbsp;a1;&nbsp;...;&nbsp;f&nbsp;an]</code>\n   with the results returned by <code class=\"code\">f</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "map", "Map.S.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\">map&nbsp;f&nbsp;m</code> returns a map with same domain as <code class=\"code\">m</code>, where the\n       associated value <code class=\"code\">a</code> of all bindings of <code class=\"code\">m</code> has been\n       replaced by the result of the application of <code class=\"code\">f</code> to <code class=\"code\">a</code>.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "map", "MoreLabels.Map.S.html#VALmap", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "map", "MoreLabels.Set.S.html#VALmap", ""],
["Option", "Option.html", "map", "Option.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\">map&nbsp;f&nbsp;o</code> is <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">None</span></code> and <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;(f&nbsp;v)</code> is <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code>.</p>\n\n</div>"],
["Result", "Result.html", "map", "Result.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\">map&nbsp;f&nbsp;r</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;(f&nbsp;v)</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;v</code> and <code class=\"code\">r</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;_</code>.</p>\n\n</div>"],
["Seq", "Seq.html", "map", "Seq.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\">map&nbsp;f&nbsp;seq</code> returns a new sequence whose elements are the elements of\n    <code class=\"code\">seq</code>, transformed by <code class=\"code\">f</code>.</p>\n\n</div>"],
["Set.S", "Set.S.html", "map", "Set.S.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\">map&nbsp;f&nbsp;s</code> is the set whose elements are <code class=\"code\">f&nbsp;a0</code>,<code class=\"code\">f&nbsp;a1</code>...</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "map", "StringLabels.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all\n   the characters of <code class=\"code\">s</code> and stores the results in a new string that\n   is returned.</p>\n\n</div>"],
["String", "String.html", "map", "String.html#VALmap", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.map&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the\n    characters of <code class=\"code\">s</code> (in increasing index order) and stores the\n    results in a new string that is returned.</p>\n\n</div>"],
["Format", "Format.html", "make_symbolic_output_buffer", "Format.html#VALmake_symbolic_output_buffer", "<div class=\"info\">\n<p><code class=\"code\">make_symbolic_output_buffer&nbsp;()</code> returns a fresh buffer for\n  symbolic output.</p>\n\n</div>"],
["Random.State", "Random.State.html", "make_self_init", "Random.State.html#VALmake_self_init", "<div class=\"info\">\n<p>Create a new state and initialize it with a system-dependent\n      low-entropy seed.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "make_printf", "CamlinternalFormat.html#VALmake_printf", ""],
["Array", "Array.html", "make_matrix", "Array.html#VALmake_matrix", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix&nbsp;dimx&nbsp;dimy&nbsp;e</code> returns a two-dimensional array\n   (an array of arrays) with first dimension <code class=\"code\">dimx</code> and\n   second dimension <code class=\"code\">dimy</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "make_matrix", "ArrayLabels.html#VALmake_matrix", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make_matrix&nbsp;dimx&nbsp;dimy&nbsp;e</code> returns a two-dimensional array\n   (an array of arrays) with first dimension <code class=\"code\">dimx</code> and\n   second dimension <code class=\"code\">dimy</code>.</p>\n\n</div>"],
["Genlex", "Genlex.html", "make_lexer", "Genlex.html#VALmake_lexer", "<div class=\"info\">\n<p>Construct the lexer function.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "make_iprintf", "CamlinternalFormat.html#VALmake_iprintf", ""],
["Format", "Format.html", "make_formatter", "Format.html#VALmake_formatter", "<div class=\"info\">\n<p><code class=\"code\">make_formatter&nbsp;out&nbsp;flush</code> returns a new formatter that outputs with\n  function <code class=\"code\">out</code>, and flushes with function <code class=\"code\">flush</code>.</p>\n\n</div>"],
["Array", "Array.html", "make_float", "Array.html#VALmake_float", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["ArrayLabels", "ArrayLabels.html", "make_float", "ArrayLabels.html#VALmake_float", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["CamlinternalOO", "CamlinternalOO.html", "make_class_store", "CamlinternalOO.html#VALmake_class_store", ""],
["CamlinternalOO", "CamlinternalOO.html", "make_class", "CamlinternalOO.html#VALmake_class", ""],
["Array", "Array.html", "make", "Array.html#VALmake", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make&nbsp;n&nbsp;x</code> returns a fresh array of length <code class=\"code\">n</code>,\n   initialized with <code class=\"code\">x</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "make", "ArrayLabels.html#VALmake", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.make&nbsp;n&nbsp;x</code> returns a fresh array of length <code class=\"code\">n</code>,\n   initialized with <code class=\"code\">x</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "make", "Bytes.html#VALmake", "<div class=\"info\">\n<p><code class=\"code\">make&nbsp;n&nbsp;c</code> returns a new byte sequence of length <code class=\"code\">n</code>, filled with\n    the byte <code class=\"code\">c</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "make", "BytesLabels.html#VALmake", "<div class=\"info\">\n<p><code class=\"code\">make&nbsp;n&nbsp;c</code> returns a new byte sequence of length <code class=\"code\">n</code>, filled with\n    the byte <code class=\"code\">c</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "make", "Float.Array.html#VALmake", "<div class=\"info\">\n<p><code class=\"code\">make&nbsp;n&nbsp;x</code> returns a fresh floatarray of length <code class=\"code\">n</code>, initialized with <code class=\"code\">x</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "make", "Float.ArrayLabels.html#VALmake", ""],
["Random.State", "Random.State.html", "make", "Random.State.html#VALmake", "<div class=\"info\">\n<p>Create a new state and initialize it with the given seed.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "make", "StringLabels.html#VALmake", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.make&nbsp;n&nbsp;c</code> returns a fresh string of length <code class=\"code\">n</code>,\n   filled with the character <code class=\"code\">c</code>.</p>\n\n</div>"],
["String", "String.html", "make", "String.html#VALmake", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.make&nbsp;n&nbsp;c</code> returns a fresh string of length <code class=\"code\">n</code>,\n   filled with the character <code class=\"code\">c</code>.</p>\n\n</div>"],
["Gc", "Gc.html", "major_slice", "Gc.html#VALmajor_slice", "<div class=\"info\">\n<p><code class=\"code\">major_slice&nbsp;n</code>\n    Do a minor collection and a slice of major collection.</p>\n\n</div>"],
["Gc", "Gc.html", "major", "Gc.html#VALmajor", "<div class=\"info\">\n<p>Do a minor collection and finish the current major collection cycle.</p>\n\n</div>"],
["Dynlink", "Dynlink.html", "main_program_units", "Dynlink.html#VALmain_program_units", "<div class=\"info\">\n<p>Return the list of compilation units that form the main program (i.e.</p>\n\n</div>"],
["Obj", "Obj.html", "magic", "Obj.html#VALmagic", ""],
["Unix", "Unix.html", "lstat", "Unix.html#VALlstat", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALstat\"><code class=\"code\"><span class=\"constructor\">Unix</span>.stat</code></a>, but in case the file is a symbolic link,\n   return the information for the link itself.</p>\n\n</div>"],
["Unix.LargeFile", "Unix.LargeFile.html", "lstat", "Unix.LargeFile.html#VALlstat", ""],
["UnixLabels", "UnixLabels.html", "lstat", "UnixLabels.html#VALlstat", "<div class=\"info\">\n<p>Same as <a href=\"UnixLabels.html#VALstat\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.stat</code></a>, but in case the file is a symbolic link,\n   return the information for the link itself.</p>\n\n</div>"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "lstat", "UnixLabels.LargeFile.html#VALlstat", ""],
["Unix", "Unix.html", "lseek", "Unix.html#VALlseek", "<div class=\"info\">\n<p>Set the current position for a file descriptor, and return the resulting\n    offset (from the beginning of the file).</p>\n\n</div>"],
["Unix.LargeFile", "Unix.LargeFile.html", "lseek", "Unix.LargeFile.html#VALlseek", "<div class=\"info\">\n<p>See <a href=\"Unix.html#VALlseek\"><code class=\"code\"><span class=\"constructor\">Unix</span>.lseek</code></a>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "lseek", "UnixLabels.html#VALlseek", "<div class=\"info\">\n<p>Set the current position for a file descriptor, and return the resulting\n    offset (from the beginning of the file).</p>\n\n</div>"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "lseek", "UnixLabels.LargeFile.html#VALlseek", ""],
["Bytes", "Bytes.html", "lowercase_ascii", "Bytes.html#VALlowercase_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "lowercase_ascii", "BytesLabels.html#VALlowercase_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n\n</div>"],
["Char", "Char.html", "lowercase_ascii", "Char.html#VALlowercase_ascii", "<div class=\"info\">\n<p>Convert the given character to its equivalent lowercase character,\n   using the US-ASCII character set.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "lowercase_ascii", "StringLabels.html#VALlowercase_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n\n</div>"],
["String", "String.html", "lowercase_ascii", "String.html#VALlowercase_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, using the US-ASCII character set.</p>\n\n</div>"],
["Bytes", "Bytes.html", "lowercase", "Bytes.html#VALlowercase", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n\n</span></div>"],
["BytesLabels", "BytesLabels.html", "lowercase", "BytesLabels.html#VALlowercase", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n\n</span></div>"],
["Char", "Char.html", "lowercase", "Char.html#VALlowercase", "<div class=\"info\">\n<span class=\"deprecated\"><p>Convert the given character to its equivalent lowercase character,\n   using the ISO Latin-1 (8859-1) character set.</p>\n\n</span></div>"],
["StringLabels", "StringLabels.html", "lowercase", "StringLabels.html#VALlowercase", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n\n</span></div>"],
["String", "String.html", "lowercase", "String.html#VALlowercase", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with all uppercase letters\n   translated to lowercase, including accented letters of the ISO\n   Latin-1 (8859-1) character set.</p>\n\n</span></div>"],
["CamlinternalOO", "CamlinternalOO.html", "lookup_tables", "CamlinternalOO.html#VALlookup_tables", ""],
["Int", "Int.html", "logxor", "Int.html#VALlogxor", "<div class=\"info\">\n<p><code class=\"code\">logxor&nbsp;x&nbsp;y</code> is the bitwise logical exclusive or of <code class=\"code\">x</code> and <code class=\"code\">y</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "logxor", "Int32.html#VALlogxor", "<div class=\"info\">\n<p>Bitwise logical exclusive or.</p>\n\n</div>"],
["Int64", "Int64.html", "logxor", "Int64.html#VALlogxor", "<div class=\"info\">\n<p>Bitwise logical exclusive or.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "logxor", "Nativeint.html#VALlogxor", "<div class=\"info\">\n<p>Bitwise logical exclusive or.</p>\n\n</div>"],
["Int", "Int.html", "logor", "Int.html#VALlogor", "<div class=\"info\">\n<p><code class=\"code\">logor&nbsp;x&nbsp;y</code> is the bitwise logical or of <code class=\"code\">x</code> and <code class=\"code\">y</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "logor", "Int32.html#VALlogor", "<div class=\"info\">\n<p>Bitwise logical or.</p>\n\n</div>"],
["Int64", "Int64.html", "logor", "Int64.html#VALlogor", "<div class=\"info\">\n<p>Bitwise logical or.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "logor", "Nativeint.html#VALlogor", "<div class=\"info\">\n<p>Bitwise logical or.</p>\n\n</div>"],
["Int", "Int.html", "lognot", "Int.html#VALlognot", "<div class=\"info\">\n<p><code class=\"code\">lognot&nbsp;x</code> is the bitwise logical negation of <code class=\"code\">x</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "lognot", "Int32.html#VALlognot", "<div class=\"info\">\n<p>Bitwise logical negation.</p>\n\n</div>"],
["Int64", "Int64.html", "lognot", "Int64.html#VALlognot", "<div class=\"info\">\n<p>Bitwise logical negation.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "lognot", "Nativeint.html#VALlognot", "<div class=\"info\">\n<p>Bitwise logical negation.</p>\n\n</div>"],
["Int", "Int.html", "logand", "Int.html#VALlogand", "<div class=\"info\">\n<p><code class=\"code\">logand&nbsp;x&nbsp;y</code> is the bitwise logical and of <code class=\"code\">x</code> and <code class=\"code\">y</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "logand", "Int32.html#VALlogand", "<div class=\"info\">\n<p>Bitwise logical and.</p>\n\n</div>"],
["Int64", "Int64.html", "logand", "Int64.html#VALlogand", "<div class=\"info\">\n<p>Bitwise logical and.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "logand", "Nativeint.html#VALlogand", "<div class=\"info\">\n<p>Bitwise logical and.</p>\n\n</div>"],
["Float", "Float.html", "log1p", "Float.html#VALlog1p", "<div class=\"info\">\n<p><code class=\"code\">log1p&nbsp;x</code> computes <code class=\"code\">log(1.0&nbsp;+.&nbsp;x)</code> (natural logarithm),\n    giving numerically-accurate results even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "log1p", "Pervasives.html#VALlog1p", ""],
["Float", "Float.html", "log10", "Float.html#VALlog10", "<div class=\"info\">\n<p>Base 10 logarithm.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "log10", "Pervasives.html#VALlog10", ""],
["Complex", "Complex.html", "log", "Complex.html#VALlog", "<div class=\"info\">\n<p>Natural logarithm (in base <code class=\"code\">e</code>).</p>\n\n</div>"],
["Float", "Float.html", "log", "Float.html#VALlog", "<div class=\"info\">\n<p>Natural logarithm.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "log", "Pervasives.html#VALlog", ""],
["Unix", "Unix.html", "lockf", "Unix.html#VALlockf", "<div class=\"info\">\n<p><code class=\"code\">lockf&nbsp;fd&nbsp;cmd&nbsp;size</code> puts a lock on a region of the file opened\n   as <code class=\"code\">fd</code>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "lockf", "UnixLabels.html#VALlockf", "<div class=\"info\">\n<p><code class=\"code\">lockf&nbsp;fd&nbsp;cmd&nbsp;size</code> puts a lock on a region of the file opened\n   as <code class=\"code\">fd</code>.</p>\n\n</div>"],
["Mutex", "Mutex.html", "lock", "Mutex.html#VALlock", "<div class=\"info\">\n<p>Lock the given mutex.</p>\n\n</div>"],
["Printexc.Slot", "Printexc.Slot.html", "location", "Printexc.Slot.html#VALlocation", "<div class=\"info\">\n<p><code class=\"code\">location&nbsp;slot</code> returns the location information of the slot,\n      if available, and <code class=\"code\"><span class=\"constructor\">None</span></code> otherwise.</p>\n\n</div>"],
["Unix", "Unix.html", "localtime", "Unix.html#VALlocaltime", "<div class=\"info\">\n<p>Convert a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, into a date and\n   a time.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "localtime", "UnixLabels.html#VALlocaltime", "<div class=\"info\">\n<p>Convert a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, into a date\n   and a time.</p>\n\n</div>"],
["Dynlink", "Dynlink.html", "loadfile_private", "Dynlink.html#VALloadfile_private", "<div class=\"info\">\n<p>Same as <code class=\"code\">loadfile</code>, except that the compilation units just loaded\n    are hidden (cannot be referenced) from other modules dynamically\n    loaded afterwards.</p>\n\n</div>"],
["Dynlink", "Dynlink.html", "loadfile", "Dynlink.html#VALloadfile", "<div class=\"info\">\n<p>In bytecode: load the given bytecode object file (<code class=\"code\">.cmo</code> file) or\n    bytecode library file (<code class=\"code\">.cma</code> file), and link it with the running\n    program.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "lnot", "Pervasives.html#VALlnot", ""],
["Unix", "Unix.html", "listen", "Unix.html#VALlisten", "<div class=\"info\">\n<p>Set up a socket for receiving connection requests.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "listen", "UnixLabels.html#VALlisten", "<div class=\"info\">\n<p>Set up a socket for receiving connection requests.</p>\n\n</div>"],
["Unix", "Unix.html", "link", "Unix.html#VALlink", "<div class=\"info\">\n<p><code class=\"code\">link&nbsp;?follow&nbsp;source&nbsp;dest</code> creates a hard link named <code class=\"code\">dest</code> to the file\n   named <code class=\"code\">source</code>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "link", "UnixLabels.html#VALlink", "<div class=\"info\">\n<p><code class=\"code\">link&nbsp;?follow&nbsp;source&nbsp;dest</code> creates a hard link named <code class=\"code\">dest</code> to the file\n   named <code class=\"code\">source</code>.</p>\n\n</div>"],
["Lexing", "Lexing.html", "lexeme_start_p", "Lexing.html#VALlexeme_start_p", "<div class=\"info\">\n<p>Like <code class=\"code\">lexeme_start</code>, but return a complete <code class=\"code\">position</code> instead\n    of an offset.</p>\n\n</div>"],
["Lexing", "Lexing.html", "lexeme_start", "Lexing.html#VALlexeme_start", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_start&nbsp;lexbuf</code> returns the offset in the\n   input stream of the first character of the matched string.</p>\n\n</div>"],
["Lexing", "Lexing.html", "lexeme_end_p", "Lexing.html#VALlexeme_end_p", "<div class=\"info\">\n<p>Like <code class=\"code\">lexeme_end</code>, but return a complete <code class=\"code\">position</code> instead\n    of an offset.</p>\n\n</div>"],
["Lexing", "Lexing.html", "lexeme_end", "Lexing.html#VALlexeme_end", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_end&nbsp;lexbuf</code> returns the offset in the input stream\n   of the character following the last character of the matched\n   string.</p>\n\n</div>"],
["Lexing", "Lexing.html", "lexeme_char", "Lexing.html#VALlexeme_char", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme_char&nbsp;lexbuf&nbsp;i</code> returns character number <code class=\"code\">i</code> in\n   the matched string.</p>\n\n</div>"],
["Lexing", "Lexing.html", "lexeme", "Lexing.html#VALlexeme", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Lexing</span>.lexeme&nbsp;lexbuf</code> returns the string matched by\n           the regular expression.</p>\n\n</div>"],
["Array", "Array.html", "length", "Array.html#VALlength", "<div class=\"info\">\n<p>Return the length (number of elements) of the given array.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "length", "ArrayLabels.html#VALlength", "<div class=\"info\">\n<p>Return the length (number of elements) of the given array.</p>\n\n</div>"],
["Buffer", "Buffer.html", "length", "Buffer.html#VALlength", "<div class=\"info\">\n<p>Return the number of characters currently contained in the buffer.</p>\n\n</div>"],
["Bytes", "Bytes.html", "length", "Bytes.html#VALlength", "<div class=\"info\">\n<p>Return the length (number of bytes) of the argument.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "length", "BytesLabels.html#VALlength", "<div class=\"info\">\n<p>Return the length (number of bytes) of the argument.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "length", "Float.Array.html#VALlength", "<div class=\"info\">\n<p>Return the length (number of elements) of the given floatarray.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "length", "Float.ArrayLabels.html#VALlength", ""],
["Hashtbl", "Hashtbl.html", "length", "Hashtbl.html#VALlength", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.length&nbsp;tbl</code> returns the number of bindings in <code class=\"code\">tbl</code>.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "length", "Hashtbl.S.html#VALlength", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "length", "Hashtbl.SeededS.html#VALlength", ""],
["List", "List.html", "length", "List.html#VALlength", "<div class=\"info\">\n<p>Return the length (number of elements) of the given list.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "length", "ListLabels.html#VALlength", "<div class=\"info\">\n<p>Return the length (number of elements) of the given list.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "length", "MoreLabels.Hashtbl.html#VALlength", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "length", "MoreLabels.Hashtbl.S.html#VALlength", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "length", "MoreLabels.Hashtbl.SeededS.html#VALlength", ""],
["Obj.Ephemeron", "Obj.Ephemeron.html", "length", "Obj.Ephemeron.html#VALlength", "<div class=\"info\">\n<p>return the number of keys</p>\n\n</div>"],
["Queue", "Queue.html", "length", "Queue.html#VALlength", "<div class=\"info\">\n<p>Return the number of elements in a queue.</p>\n\n</div>"],
["Stack", "Stack.html", "length", "Stack.html#VALlength", "<div class=\"info\">\n<p>Return the number of elements in a stack.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "length", "StringLabels.html#VALlength", "<div class=\"info\">\n<p>Return the length (number of characters) of the given string.</p>\n\n</div>"],
["String", "String.html", "length", "String.html#VALlength", "<div class=\"info\">\n<p>Return the length (number of characters) of the given string.</p>\n\n</div>"],
["Weak", "Weak.html", "length", "Weak.html#VALlength", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.length&nbsp;ar</code> returns the length (number of elements) of\n   <code class=\"code\">ar</code>.</p>\n\n</div>"],
["Float", "Float.html", "ldexp", "Float.html#VALldexp", "<div class=\"info\">\n<p><code class=\"code\">ldexp&nbsp;x&nbsp;n</code> returns <code class=\"code\">x&nbsp;*.&nbsp;2&nbsp;**&nbsp;n</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "ldexp", "Pervasives.html#VALldexp", ""],
["Obj", "Obj.html", "lazy_tag", "Obj.html#VALlazy_tag", ""],
["Lazy", "Lazy.html", "lazy_is_val", "Lazy.html#VALlazy_is_val", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Lazy", "Lazy.html", "lazy_from_val", "Lazy.html#VALlazy_from_val", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Lazy", "Lazy.html", "lazy_from_fun", "Lazy.html#VALlazy_from_fun", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "layout", "Bigarray.Genarray.html#VALlayout", "<div class=\"info\">\n<p>Return the layout of the given Bigarray.</p>\n\n</div>"],
["Bigarray.Array0", "Bigarray.Array0.html", "layout", "Bigarray.Array0.html#VALlayout", "<div class=\"info\">\n<p>Return the layout of the given Bigarray.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "layout", "Bigarray.Array1.html#VALlayout", "<div class=\"info\">\n<p>Return the layout of the given Bigarray.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "layout", "Bigarray.Array2.html#VALlayout", "<div class=\"info\">\n<p>Return the layout of the given Bigarray.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "layout", "Bigarray.Array3.html#VALlayout", "<div class=\"info\">\n<p>Return the layout of the given Bigarray.</p>\n\n</div>"],
["Obj", "Obj.html", "last_non_constant_constructor_tag", "Obj.html#VALlast_non_constant_constructor_tag", ""],
["Str", "Str.html", "last_chars", "Str.html#VALlast_chars", "<div class=\"info\">\n<p><code class=\"code\">last_chars&nbsp;s&nbsp;n</code> returns the last <code class=\"code\">n</code> characters of <code class=\"code\">s</code>.</p>\n\n</div>"],
["Scanf", "Scanf.html", "ksscanf", "Scanf.html#VALksscanf", "<div class=\"info\">\n<p>Same as <a href=\"Scanf.html#VALkscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.kscanf</code></a> but reads from the given string.</p>\n\n</div>"],
["Format", "Format.html", "ksprintf", "Format.html#VALksprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">sprintf</code> above, but instead of returning the string,\n  passes it to the first argument.</p>\n\n</div>"],
["Printf", "Printf.html", "ksprintf", "Printf.html#VALksprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">sprintf</code> above, but instead of returning the string,\n   passes it to the first argument.</p>\n\n</div>"],
["Scanf", "Scanf.html", "kscanf", "Scanf.html#VALkscanf", "<div class=\"info\">\n<p>Same as <a href=\"Scanf.html#VALbscanf\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.bscanf</code></a>, but takes an additional function argument\n    <code class=\"code\">ef</code> that is called in case of error: if the scanning process or\n    some conversion fails, the scanning function aborts and calls the\n    error handling function <code class=\"code\">ef</code> with the formatted input channel and the\n    exception that aborted the scanning process as arguments.</p>\n\n</div>"],
["Format", "Format.html", "kprintf", "Format.html#VALkprintf", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Printf", "Printf.html", "kprintf", "Printf.html#VALkprintf", "<div class=\"info\">\n<p>A deprecated synonym for <code class=\"code\">ksprintf</code>.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "kind_size_in_bytes", "Bigarray.html#VALkind_size_in_bytes", "<div class=\"info\">\n<p><code class=\"code\">kind_size_in_bytes&nbsp;k</code> is the number of bytes used to store\n   an element of type <code class=\"code\">k</code>.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "kind", "Bigarray.Genarray.html#VALkind", "<div class=\"info\">\n<p>Return the kind of the given Bigarray.</p>\n\n</div>"],
["Bigarray.Array0", "Bigarray.Array0.html", "kind", "Bigarray.Array0.html#VALkind", "<div class=\"info\">\n<p>Return the kind of the given Bigarray.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "kind", "Bigarray.Array1.html#VALkind", "<div class=\"info\">\n<p>Return the kind of the given Bigarray.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "kind", "Bigarray.Array2.html#VALkind", "<div class=\"info\">\n<p>Return the kind of the given Bigarray.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "kind", "Bigarray.Array3.html#VALkind", "<div class=\"info\">\n<p>Return the kind of the given Bigarray.</p>\n\n</div>"],
["Thread", "Thread.html", "kill", "Thread.html#VALkill", "<div class=\"info\">\n<p>Terminate prematurely the thread whose handle is given.</p>\n\n</div>"],
["Unix", "Unix.html", "kill", "Unix.html#VALkill", "<div class=\"info\">\n<p><code class=\"code\">kill&nbsp;pid&nbsp;<span class=\"keyword\">sig</span></code> sends signal number <code class=\"code\"><span class=\"keyword\">sig</span></code> to the process\n   with id <code class=\"code\">pid</code>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "kill", "UnixLabels.html#VALkill", "<div class=\"info\">\n<p><code class=\"code\">kill&nbsp;pid&nbsp;<span class=\"keyword\">sig</span></code> sends signal number <code class=\"code\"><span class=\"keyword\">sig</span></code> to the process\n   with id <code class=\"code\">pid</code>.</p>\n\n</div>"],
["Scanf", "Scanf.html", "kfscanf", "Scanf.html#VALkfscanf", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Format", "Format.html", "kfprintf", "Format.html#VALkfprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">fprintf</code> above, but instead of returning immediately,\n  passes the formatter to its first argument at the end of printing.</p>\n\n</div>"],
["Printf", "Printf.html", "kfprintf", "Printf.html#VALkfprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">fprintf</code>, but instead of returning immediately,\n   passes the out channel to its first argument at the end of printing.</p>\n\n</div>"],
["Format", "Format.html", "kdprintf", "Format.html#VALkdprintf", "<div class=\"info\">\n<p>Same as <a href=\"Format.html#VALdprintf\"><code class=\"code\"><span class=\"constructor\">Format</span>.dprintf</code></a> above, but instead of returning immediately,\n  passes the suspended printer to its first argument at the end of printing.</p>\n\n</div>"],
["Printf", "Printf.html", "kbprintf", "Printf.html#VALkbprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">bprintf</code>, but instead of returning immediately,\n   passes the buffer to its first argument at the end of printing.</p>\n\n</div>"],
["Format", "Format.html", "kasprintf", "Format.html#VALkasprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">asprintf</code> above, but instead of returning the string,\n  passes it to the first argument.</p>\n\n</div>"],
["Stream", "Stream.html", "junk", "Stream.html#VALjunk", "<div class=\"info\">\n<p>Remove the first element of the stream, possibly unfreezing\n   it before.</p>\n\n</div>"],
["Option", "Option.html", "join", "Option.html#VALjoin", "<div class=\"info\">\n<p><code class=\"code\">join&nbsp;oo</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if <code class=\"code\">oo</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;(<span class=\"constructor\">Some</span>&nbsp;v)</code> and <code class=\"code\"><span class=\"constructor\">None</span></code> otherwise.</p>\n\n</div>"],
["Result", "Result.html", "join", "Result.html#VALjoin", "<div class=\"info\">\n<p><code class=\"code\">join&nbsp;rr</code> is <code class=\"code\">r</code> if <code class=\"code\">rr</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;r</code> and <code class=\"code\">rr</code> if <code class=\"code\">rr</code> is <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;_</code>.</p>\n\n</div>"],
["Thread", "Thread.html", "join", "Thread.html#VALjoin", "<div class=\"info\">\n<p><code class=\"code\">join&nbsp;th</code> suspends the execution of the calling thread\n   until the thread <code class=\"code\">th</code> has terminated.</p>\n\n</div>"],
["Array", "Array.html", "iteri", "Array.html#VALiteri", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Array</span>.iter</code></a>, but the\n   function is applied with the index of the element as first argument,\n   and the element itself as second argument.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "iteri", "ArrayLabels.html#VALiteri", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Array</span>.iter</code></a>, but the\n   function is applied to the index of the element as first argument,\n   and the element itself as second argument.</p>\n\n</div>"],
["Bytes", "Bytes.html", "iteri", "Bytes.html#VALiteri", "<div class=\"info\">\n<p>Same as <a href=\"Bytes.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.iter</code></a>, but the function is applied to the index of\n    the byte as first argument and the byte itself as second\n    argument.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "iteri", "BytesLabels.html#VALiteri", "<div class=\"info\">\n<p>Same as <a href=\"Bytes.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.iter</code></a>, but the function is applied to the index of\n    the byte as first argument and the byte itself as second\n    argument.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "iteri", "Float.Array.html#VALiteri", "<div class=\"info\">\n<p>Same as <a href=\"Float.Array.html#VALiter\"><code class=\"code\"><span class=\"constructor\">Float</span>.<span class=\"constructor\">Array</span>.iter</code></a>, but the\n      function is applied with the index of the element as first argument,\n      and the element itself as second argument.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "iteri", "Float.ArrayLabels.html#VALiteri", ""],
["List", "List.html", "iteri", "List.html#VALiteri", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "iteri", "ListLabels.html#VALiteri", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALiter\"><code class=\"code\"><span class=\"constructor\">List</span>.iter</code></a>, but the function is applied to the index of\n   the element as first argument (counting from 0), and the element\n   itself as second argument.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "iteri", "StringLabels.html#VALiteri", "<div class=\"info\">\n<p>Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the\n   function is applied to the index of the element as first argument\n   (counting from 0), and the character itself as second argument.</p>\n\n</div>"],
["String", "String.html", "iteri", "String.html#VALiteri", "<div class=\"info\">\n<p>Same as <a href=\"String.html#VALiter\"><code class=\"code\"><span class=\"constructor\">String</span>.iter</code></a>, but the\n   function is applied to the index of the element as first argument\n   (counting from 0), and the character itself as second argument.</p>\n\n</div>"],
["Result", "Result.html", "iter_error", "Result.html#VALiter_error", "<div class=\"info\">\n<p><code class=\"code\">iter_error&nbsp;f&nbsp;r</code> is <code class=\"code\">f&nbsp;e</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;e</code> and <code class=\"code\">()</code> otherwise.</p>\n\n</div>"],
["Array", "Array.html", "iter2", "Array.html#VALiter2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "iter2", "ArrayLabels.html#VALiter2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n   and <code class=\"code\">b</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "iter2", "Float.Array.html#VALiter2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter2&nbsp;f&nbsp;a&nbsp;b</code> applies function <code class=\"code\">f</code> to all the elements of <code class=\"code\">a</code>\n      and <code class=\"code\">b</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "iter2", "Float.ArrayLabels.html#VALiter2", ""],
["List", "List.html", "iter2", "List.html#VALiter2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> calls in turn\n   <code class=\"code\">f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "iter2", "ListLabels.html#VALiter2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> calls in turn\n   <code class=\"code\">f&nbsp;a1&nbsp;b1;&nbsp;...;&nbsp;f&nbsp;an&nbsp;bn</code>.</p>\n\n</div>"],
["Array", "Array.html", "iter", "Array.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> in turn to all\n   the elements of <code class=\"code\">a</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "iter", "ArrayLabels.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.iter&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> in turn to all\n   the elements of <code class=\"code\">a</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "iter", "Bytes.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "iter", "BytesLabels.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all the bytes of <code class=\"code\">s</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "iter", "Float.Array.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;a</code> applies function <code class=\"code\">f</code> in turn to all\n      the elements of <code class=\"code\">a</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "iter", "Float.ArrayLabels.html#VALiter", ""],
["Hashtbl", "Hashtbl.html", "iter", "Hashtbl.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.iter&nbsp;f&nbsp;tbl</code> applies <code class=\"code\">f</code> to all bindings in table <code class=\"code\">tbl</code>.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "iter", "Hashtbl.S.html#VALiter", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "iter", "Hashtbl.SeededS.html#VALiter", ""],
["List", "List.html", "iter", "List.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> in turn to\n   <code class=\"code\">a1;&nbsp;...;&nbsp;an</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "iter", "ListLabels.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.iter&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]</code> applies function <code class=\"code\">f</code> in turn to\n   <code class=\"code\">a1;&nbsp;...;&nbsp;an</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "iter", "Map.S.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;m</code> applies <code class=\"code\">f</code> to all bindings in map <code class=\"code\">m</code>.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "iter", "MoreLabels.Hashtbl.html#VALiter", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "iter", "MoreLabels.Hashtbl.S.html#VALiter", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "iter", "MoreLabels.Hashtbl.SeededS.html#VALiter", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "iter", "MoreLabels.Map.S.html#VALiter", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "iter", "MoreLabels.Set.S.html#VALiter", ""],
["Option", "Option.html", "iter", "Option.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;o</code> is <code class=\"code\">f&nbsp;v</code> if <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> and <code class=\"code\">()</code> otherwise.</p>\n\n</div>"],
["Queue", "Queue.html", "iter", "Queue.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;q</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">q</code>,\n   from the least recently entered to the most recently entered.</p>\n\n</div>"],
["Result", "Result.html", "iter", "Result.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;r</code> is <code class=\"code\">f&nbsp;v</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;v</code> and <code class=\"code\">()</code> otherwise.</p>\n\n</div>"],
["Seq", "Seq.html", "iter", "Seq.html#VALiter", "<div class=\"info\">\n<p>Iterate on the sequence, calling the (imperative) function on every element.</p>\n\n</div>"],
["Set.S", "Set.S.html", "iter", "Set.S.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>.</p>\n\n</div>"],
["Stack", "Stack.html", "iter", "Stack.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;s</code> applies <code class=\"code\">f</code> in turn to all elements of <code class=\"code\">s</code>,\n   from the element at the top of the stack to the element at the\n   bottom of the stack.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "iter", "StringLabels.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all\n   the characters of <code class=\"code\">s</code>.</p>\n\n</div>"],
["Stream", "Stream.html", "iter", "Stream.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Stream</span>.iter&nbsp;f&nbsp;s</code> scans the whole stream s, applying function <code class=\"code\">f</code>\n   in turn to each stream element encountered.</p>\n\n</div>"],
["String", "String.html", "iter", "String.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.iter&nbsp;f&nbsp;s</code> applies function <code class=\"code\">f</code> in turn to all\n   the characters of <code class=\"code\">s</code>.</p>\n\n</div>"],
["Weak.S", "Weak.S.html", "iter", "Weak.S.html#VALiter", "<div class=\"info\">\n<p><code class=\"code\">iter&nbsp;f&nbsp;t</code> calls <code class=\"code\">f</code> on each element of <code class=\"code\">t</code>, in some unspecified\n        order.</p>\n\n</div>"],
["Unix", "Unix.html", "isatty", "Unix.html#VALisatty", "<div class=\"info\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given file descriptor refers to a terminal or\n   console window, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "isatty", "UnixLabels.html#VALisatty", "<div class=\"info\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given file descriptor refers to a terminal or\n   console window, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n\n</div>"],
["Uchar", "Uchar.html", "is_valid", "Uchar.html#VALis_valid", "<div class=\"info\">\n<p><code class=\"code\">is_valid&nbsp;n</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">n</code> is a Unicode scalar value\n    (i.e.</p>\n\n</div>"],
["Lazy", "Lazy.html", "is_val", "Lazy.html#VALis_val", "<div class=\"info\">\n<p><code class=\"code\">is_val&nbsp;x</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if <code class=\"code\">x</code> has already been forced and\n    did not raise an exception.</p>\n\n</div>"],
["Option", "Option.html", "is_some", "Option.html#VALis_some", "<div class=\"info\">\n<p><code class=\"code\">is_some&nbsp;o</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;o</code>.</p>\n\n</div>"],
["Filename", "Filename.html", "is_relative", "Filename.html#VALis_relative", "<div class=\"info\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the file name is relative to the current\n   directory, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is absolute (i.e.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "is_randomized", "Hashtbl.html#VALis_randomized", "<div class=\"info\">\n<p>return if the tables are currently created in randomized mode by default</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "is_randomized", "MoreLabels.Hashtbl.html#VALis_randomized", ""],
["Printexc.Slot", "Printexc.Slot.html", "is_raise", "Printexc.Slot.html#VALis_raise", "<div class=\"info\">\n<p><code class=\"code\">is_raise&nbsp;slot</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> when <code class=\"code\">slot</code> refers to a raising\n      point in the code, and <code class=\"code\"><span class=\"keyword\">false</span></code> when it comes from a simple\n      function call.</p>\n\n</div>"],
["Result", "Result.html", "is_ok", "Result.html#VALis_ok", "<div class=\"info\">\n<p><code class=\"code\">is_ok&nbsp;r</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;_</code>.</p>\n\n</div>"],
["Option", "Option.html", "is_none", "Option.html#VALis_none", "<div class=\"info\">\n<p><code class=\"code\">is_none&nbsp;o</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n\n</div>"],
["Dynlink", "Dynlink.html", "is_native", "Dynlink.html#VALis_native", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"keyword\">true</span></code> if the program is native,\n    <code class=\"code\"><span class=\"keyword\">false</span></code> if the program is bytecode.</p>\n\n</div>"],
["Float", "Float.html", "is_nan", "Float.html#VALis_nan", "<div class=\"info\">\n<p><code class=\"code\">is_nan&nbsp;x</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">x</code> is not a number (see <a href=\"Float.html#VALnan\"><code class=\"code\"><span class=\"constructor\">Float</span>.nan</code></a>).</p>\n\n</div>"],
["Float", "Float.html", "is_integer", "Float.html#VALis_integer", "<div class=\"info\">\n<p><code class=\"code\">is_integer&nbsp;x</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">x</code> is an integer.</p>\n\n</div>"],
["Obj", "Obj.html", "is_int", "Obj.html#VALis_int", ""],
["Printexc.Slot", "Printexc.Slot.html", "is_inline", "Printexc.Slot.html#VALis_inline", "<div class=\"info\">\n<p><code class=\"code\">is_inline&nbsp;slot</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> when <code class=\"code\">slot</code> refers to a call\n      that got inlined by the compiler, and <code class=\"code\"><span class=\"keyword\">false</span></code> when it comes from\n      any other context.</p>\n\n</div>"],
["Float", "Float.html", "is_infinite", "Float.html#VALis_infinite", "<div class=\"info\">\n<p><code class=\"code\">is_infinite&nbsp;x</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">x</code> is <a href=\"Float.html#VALinfinity\"><code class=\"code\"><span class=\"constructor\">Float</span>.infinity</code></a> or <a href=\"Float.html#VALneg_infinity\"><code class=\"code\"><span class=\"constructor\">Float</span>.neg_infinity</code></a>.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "is_in_char_set", "CamlinternalFormat.html#VALis_in_char_set", ""],
["Filename", "Filename.html", "is_implicit", "Filename.html#VALis_implicit", "<div class=\"info\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the file name is relative and does not start\n   with an explicit reference to the current directory (<code class=\"code\">./</code> or\n   <code class=\"code\">../</code> in Unix), <code class=\"code\"><span class=\"keyword\">false</span></code> if it starts with an explicit reference\n   to the root directory or the current directory.</p>\n\n</div>"],
["Float", "Float.html", "is_finite", "Float.html#VALis_finite", "<div class=\"info\">\n<p><code class=\"code\">is_finite&nbsp;x</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">x</code> is finite i.e., not infinite and\n   not <a href=\"Float.html#VALnan\"><code class=\"code\"><span class=\"constructor\">Float</span>.nan</code></a>.</p>\n\n</div>"],
["Result", "Result.html", "is_error", "Result.html#VALis_error", "<div class=\"info\">\n<p><code class=\"code\">is_error&nbsp;r</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;_</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "is_empty", "Map.S.html#VALis_empty", "<div class=\"info\">\n<p>Test whether a map is empty or not.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "is_empty", "MoreLabels.Map.S.html#VALis_empty", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "is_empty", "MoreLabels.Set.S.html#VALis_empty", ""],
["Queue", "Queue.html", "is_empty", "Queue.html#VALis_empty", "<div class=\"info\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given queue is empty, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n\n</div>"],
["Set.S", "Set.S.html", "is_empty", "Set.S.html#VALis_empty", "<div class=\"info\">\n<p>Test whether a set is empty or not.</p>\n\n</div>"],
["Stack", "Stack.html", "is_empty", "Stack.html#VALis_empty", "<div class=\"info\">\n<p>Return <code class=\"code\"><span class=\"keyword\">true</span></code> if the given stack is empty, <code class=\"code\"><span class=\"keyword\">false</span></code> otherwise.</p>\n\n</div>"],
["Sys", "Sys.html", "is_directory", "Sys.html#VALis_directory", "<div class=\"info\">\n<p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the given name refers to a directory,\n    <code class=\"code\"><span class=\"keyword\">false</span></code> if it refers to another kind of file.</p>\n\n</div>"],
["Uchar", "Uchar.html", "is_char", "Uchar.html#VALis_char", "<div class=\"info\">\n<p><code class=\"code\">is_char&nbsp;u</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">u</code> is a latin1 OCaml character.</p>\n\n</div>"],
["Obj", "Obj.html", "is_block", "Obj.html#VALis_block", ""],
["Pervasives", "Pervasives.html", "invalid_arg", "Pervasives.html#VALinvalid_arg", ""],
["Complex", "Complex.html", "inv", "Complex.html#VALinv", "<div class=\"info\">\n<p>Multiplicative inverse (<code class=\"code\">1/z</code>).</p>\n\n</div>"],
["Sys", "Sys.html", "interactive", "Sys.html#VALinteractive", "<div class=\"info\">\n<p>This reference is initially set to <code class=\"code\"><span class=\"keyword\">false</span></code> in standalone\n   programs and to <code class=\"code\"><span class=\"keyword\">true</span></code> if the code is being executed under\n   the interactive toplevel system <code class=\"code\">ocaml</code>.</p>\n\n</div>"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "inter", "MoreLabels.Set.S.html#VALinter", ""],
["Set.S", "Set.S.html", "inter", "Set.S.html#VALinter", "<div class=\"info\">\n<p>Set intersection.</p>\n\n</div>"],
["Obj", "Obj.html", "int_tag", "Obj.html#VALint_tag", ""],
["Sys", "Sys.html", "int_size", "Sys.html#VALint_size", "<div class=\"info\">\n<p>Size of <code class=\"code\">int</code>, in bits.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "int_of_string_opt", "Pervasives.html#VALint_of_string_opt", ""],
["Pervasives", "Pervasives.html", "int_of_string", "Pervasives.html#VALint_of_string", ""],
["Pervasives", "Pervasives.html", "int_of_float", "Pervasives.html#VALint_of_float", ""],
["Pervasives", "Pervasives.html", "int_of_char", "Pervasives.html#VALint_of_char", ""],
["Bigarray", "Bigarray.html", "int8_unsigned", "Bigarray.html#VALint8_unsigned", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "int8_signed", "Bigarray.html#VALint8_signed", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "int64", "Bigarray.html#VALint64", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["Random", "Random.html", "int64", "Random.html#VALint64", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.int64&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).</p>\n\n</div>"],
["Random.State", "Random.State.html", "int64", "Random.State.html#VALint64", ""],
["Bigarray", "Bigarray.html", "int32", "Bigarray.html#VALint32", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["Random", "Random.html", "int32", "Random.html#VALint32", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.int32&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).</p>\n\n</div>"],
["Random.State", "Random.State.html", "int32", "Random.State.html#VALint32", ""],
["Bigarray", "Bigarray.html", "int16_unsigned", "Bigarray.html#VALint16_unsigned", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "int16_signed", "Bigarray.html#VALint16_signed", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "int", "Bigarray.html#VALint", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["Random", "Random.html", "int", "Random.html#VALint", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.int&nbsp;bound</code> returns a random integer between 0 (inclusive)\n     and <code class=\"code\">bound</code> (exclusive).</p>\n\n</div>"],
["Random.State", "Random.State.html", "int", "Random.State.html#VALint", ""],
["Pervasives", "Pervasives.html", "input_value", "Pervasives.html#VALinput_value", ""],
["Pervasives", "Pervasives.html", "input_line", "Pervasives.html#VALinput_line", ""],
["Pervasives", "Pervasives.html", "input_char", "Pervasives.html#VALinput_char", ""],
["Pervasives", "Pervasives.html", "input_byte", "Pervasives.html#VALinput_byte", ""],
["Pervasives", "Pervasives.html", "input_binary_int", "Pervasives.html#VALinput_binary_int", ""],
["Digest", "Digest.html", "input", "Digest.html#VALinput", "<div class=\"info\">\n<p>Read a digest from the given input channel.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "input", "Pervasives.html#VALinput", ""],
["Unix", "Unix.html", "initgroups", "Unix.html#VALinitgroups", "<div class=\"info\">\n<p><code class=\"code\">initgroups&nbsp;user&nbsp;group</code> initializes the group access list by\n    reading the group database /etc/group and using all groups of\n    which <code class=\"code\">user</code> is a member.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "initgroups", "UnixLabels.html#VALinitgroups", "<div class=\"info\">\n<p><code class=\"code\">initgroups&nbsp;user&nbsp;group</code> initializes the group access list by\n      reading the group database /etc/group and using all groups of\n      which <code class=\"code\">user</code> is a member.</p>\n\n</div>"],
["CamlinternalMod", "CamlinternalMod.html", "init_mod", "CamlinternalMod.html#VALinit_mod", ""],
["CamlinternalOO", "CamlinternalOO.html", "init_class", "CamlinternalOO.html#VALinit_class", ""],
["Array", "Array.html", "init", "Array.html#VALinit", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> returns a fresh array of length <code class=\"code\">n</code>,\n   with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "init", "ArrayLabels.html#VALinit", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.init&nbsp;n&nbsp;f</code> returns a fresh array of length <code class=\"code\">n</code>,\n   with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "init", "Bytes.html#VALinit", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Bytes</span>.init&nbsp;n&nbsp;f</code> returns a fresh byte sequence of length <code class=\"code\">n</code>, with\n    character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code> (in increasing\n    index order).</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "init", "BytesLabels.html#VALinit", "<div class=\"info\">\n<p><code class=\"code\">init&nbsp;n&nbsp;f</code> returns a fresh byte sequence of length <code class=\"code\">n</code>,\n    with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "init", "Float.Array.html#VALinit", "<div class=\"info\">\n<p><code class=\"code\">init&nbsp;n&nbsp;f</code> returns a fresh floatarray of length <code class=\"code\">n</code>,\n     with element number <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "init", "Float.ArrayLabels.html#VALinit", ""],
["List", "List.html", "init", "List.html#VALinit", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.init&nbsp;len&nbsp;f</code> is <code class=\"code\">[f&nbsp;0;&nbsp;f&nbsp;1;&nbsp;...;&nbsp;f&nbsp;(len-1)]</code>, evaluated left to right.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "init", "ListLabels.html#VALinit", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.init&nbsp;len&nbsp;f</code> is <code class=\"code\">f&nbsp;0;&nbsp;f&nbsp;1;&nbsp;...;&nbsp;f&nbsp;(len-1)</code>, evaluated left to right.</p>\n\n</div>"],
["Random", "Random.html", "init", "Random.html#VALinit", "<div class=\"info\">\n<p>Initialize the generator, using the argument as a seed.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "init", "StringLabels.html#VALinit", "<div class=\"info\">\n<p><code class=\"code\">init&nbsp;n&nbsp;f</code> returns a string of length <code class=\"code\">n</code>,\n    with character <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code>.</p>\n\n</div>"],
["String", "String.html", "init", "String.html#VALinit", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.init&nbsp;n&nbsp;f</code> returns a string of length <code class=\"code\">n</code>, with character\n    <code class=\"code\">i</code> initialized to the result of <code class=\"code\">f&nbsp;i</code> (called in increasing\n    index order).</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "inherits", "CamlinternalOO.html#VALinherits", ""],
["Obj", "Obj.html", "infix_tag", "Obj.html#VALinfix_tag", ""],
["Float", "Float.html", "infinity", "Float.html#VALinfinity", "<div class=\"info\">\n<p>Positive infinity.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "infinity", "Pervasives.html#VALinfinity", ""],
["Unix", "Unix.html", "inet_addr_of_string", "Unix.html#VALinet_addr_of_string", "<div class=\"info\">\n<p>Conversion from the printable representation of an Internet\n    address to its internal representation.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "inet_addr_of_string", "UnixLabels.html#VALinet_addr_of_string", "<div class=\"info\">\n<p>Conversion from the printable representation of an Internet\n    address to its internal representation.</p>\n\n</div>"],
["Unix", "Unix.html", "inet_addr_loopback", "Unix.html#VALinet_addr_loopback", "<div class=\"info\">\n<p>A special IPv4 address representing the host machine (<code class=\"code\">127.0.0.1</code>).</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "inet_addr_loopback", "UnixLabels.html#VALinet_addr_loopback", "<div class=\"info\">\n<p>A special IPv4 address representing the host machine (<code class=\"code\">127.0.0.1</code>).</p>\n\n</div>"],
["Unix", "Unix.html", "inet_addr_any", "Unix.html#VALinet_addr_any", "<div class=\"info\">\n<p>A special IPv4 address, for use only with <code class=\"code\">bind</code>, representing\n   all the Internet addresses that the host machine possesses.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "inet_addr_any", "UnixLabels.html#VALinet_addr_any", "<div class=\"info\">\n<p>A special IPv4 address, for use only with <code class=\"code\">bind</code>, representing\n   all the Internet addresses that the host machine possesses.</p>\n\n</div>"],
["Unix", "Unix.html", "inet6_addr_loopback", "Unix.html#VALinet6_addr_loopback", "<div class=\"info\">\n<p>A special IPv6 address representing the host machine (<code class=\"code\">::1</code>).</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "inet6_addr_loopback", "UnixLabels.html#VALinet6_addr_loopback", "<div class=\"info\">\n<p>A special IPv6 address representing the host machine (<code class=\"code\">::1</code>).</p>\n\n</div>"],
["Unix", "Unix.html", "inet6_addr_any", "Unix.html#VALinet6_addr_any", "<div class=\"info\">\n<p>A special IPv6 address, for use only with <code class=\"code\">bind</code>, representing\n   all the Internet addresses that the host machine possesses.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "inet6_addr_any", "UnixLabels.html#VALinet6_addr_any", "<div class=\"info\">\n<p>A special IPv6 address, for use only with <code class=\"code\">bind</code>, representing\n   all the Internet addresses that the host machine possesses.</p>\n\n</div>"],
["Bytes", "Bytes.html", "index_opt", "Bytes.html#VALindex_opt", "<div class=\"info\">\n<p><code class=\"code\">index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "index_opt", "BytesLabels.html#VALindex_opt", "<div class=\"info\">\n<p><code class=\"code\">index_opt&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "index_opt", "StringLabels.html#VALindex_opt", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> returns the index of the first\n    occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or\n    <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n\n</div>"],
["String", "String.html", "index_opt", "String.html#VALindex_opt", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_opt&nbsp;s&nbsp;c</code> returns the index of the first\n    occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>, or\n    <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "index_from_opt", "Bytes.html#VALindex_from_opt", "<div class=\"info\">\n<p><code class=\"code\">index_from&nbsp;_opts&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>\n    after position <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "index_from_opt", "BytesLabels.html#VALindex_from_opt", "<div class=\"info\">\n<p><code class=\"code\">index_from&nbsp;_opts&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code> or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code>\n    after position <code class=\"code\">i</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "index_from_opt", "StringLabels.html#VALindex_from_opt", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n    first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>\n    or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n\n</div>"],
["String", "String.html", "index_from_opt", "String.html#VALindex_from_opt", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from_opt&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n    first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>\n    or <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">c</code> does not occur in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "index_from", "Bytes.html#VALindex_from", "<div class=\"info\">\n<p><code class=\"code\">index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "index_from", "BytesLabels.html#VALindex_from", "<div class=\"info\">\n<p><code class=\"code\">index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the first occurrence of\n    byte <code class=\"code\">c</code> in <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "index_from", "StringLabels.html#VALindex_from", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n\n</div>"],
["String", "String.html", "index_from", "String.html#VALindex_from", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index_from&nbsp;s&nbsp;i&nbsp;c</code> returns the index of the\n   first occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code> after position <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "index", "Bytes.html#VALindex", "<div class=\"info\">\n<p><code class=\"code\">index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "index", "BytesLabels.html#VALindex", "<div class=\"info\">\n<p><code class=\"code\">index&nbsp;s&nbsp;c</code> returns the index of the first occurrence of byte <code class=\"code\">c</code>\n    in <code class=\"code\">s</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "index", "StringLabels.html#VALindex", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> returns the index of the first\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n</div>"],
["String", "String.html", "index", "String.html#VALindex", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.index&nbsp;s&nbsp;c</code> returns the index of the first\n   occurrence of character <code class=\"code\">c</code> in string <code class=\"code\">s</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "incr", "Pervasives.html#VALincr", ""],
["Unix", "Unix.html", "in_channel_of_descr", "Unix.html#VALin_channel_of_descr", "<div class=\"info\">\n<p>Create an input channel reading from the given descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "in_channel_of_descr", "UnixLabels.html#VALin_channel_of_descr", "<div class=\"info\">\n<p>Create an input channel reading from the given descriptor.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "in_channel_length", "Pervasives.html#VALin_channel_length", ""],
["Stdlib.LargeFile", "Stdlib.LargeFile.html", "in_channel_length", "Stdlib.LargeFile.html#VALin_channel_length", ""],
["Format", "Format.html", "ikfprintf", "Format.html#VALikfprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">kfprintf</code> above, but does not print anything.</p>\n\n</div>"],
["Printf", "Printf.html", "ikfprintf", "Printf.html#VALikfprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">kfprintf</code> above, but does not print anything.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "ignore", "Pervasives.html#VALignore", ""],
["Format", "Format.html", "ifprintf", "Format.html#VALifprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">fprintf</code> above, but does not print anything.</p>\n\n</div>"],
["Printf", "Printf.html", "ifprintf", "Printf.html#VALifprintf", "<div class=\"info\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but does not print anything.</p>\n\n</div>"],
["Fun", "Fun.html", "id", "Fun.html#VALid", "<div class=\"info\">\n<p><code class=\"code\">id</code> is the identity function.</p>\n\n</div>"],
["Obj.Extension_constructor", "Obj.Extension_constructor.html", "id", "Obj.Extension_constructor.html#VALid", ""],
["Oo", "Oo.html", "id", "Oo.html#VALid", "<div class=\"info\">\n<p>Return an integer identifying this object, unique for\n    the current execution of the program.</p>\n\n</div>"],
["Thread", "Thread.html", "id", "Thread.html#VALid", "<div class=\"info\">\n<p>Return the identifier of the given thread.</p>\n\n</div>"],
["Complex", "Complex.html", "i", "Complex.html#VALi", "<div class=\"info\">\n<p>The complex number <code class=\"code\">i</code>.</p>\n\n</div>"],
["Float", "Float.html", "hypot", "Float.html#VALhypot", "<div class=\"info\">\n<p><code class=\"code\">hypot&nbsp;x&nbsp;y</code> returns <code class=\"code\">sqrt(x&nbsp;*.&nbsp;x&nbsp;+&nbsp;y&nbsp;*.&nbsp;y)</code>, that is, the length\n    of the hypotenuse of a right-angled triangle with sides of length\n    <code class=\"code\">x</code> and <code class=\"code\">y</code>, or, equivalently, the distance of the point <code class=\"code\">(x,y)</code>\n    to origin.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "hypot", "Pervasives.html#VALhypot", ""],
["Gc", "Gc.html", "huge_fallback_count", "Gc.html#VALhuge_fallback_count", "<div class=\"info\">\n<p>Return the number of times we tried to map huge pages and had to fall\n    back to small pages.</p>\n\n</div>"],
["Marshal", "Marshal.html", "header_size", "Marshal.html#VALheader_size", "<div class=\"info\">\n<p>The bytes representing a marshaled value are composed of\n   a fixed-size header and a variable-sized data part,\n   whose size can be determined from the header.</p>\n\n</div>"],
["List", "List.html", "hd", "List.html#VALhd", "<div class=\"info\">\n<p>Return the first element of the given list.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "hd", "ListLabels.html#VALhd", "<div class=\"info\">\n<p>Return the first element of the given list.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "hash_param", "Hashtbl.html#VALhash_param", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash_param&nbsp;meaningful&nbsp;total&nbsp;x</code> computes a hash value for <code class=\"code\">x</code>,\n   with the same properties as for <code class=\"code\">hash</code>.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "hash_param", "MoreLabels.Hashtbl.html#VALhash_param", ""],
["Float", "Float.html", "hash", "Float.html#VALhash", "<div class=\"info\">\n<p>The hash function for floating-point numbers.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "hash", "Hashtbl.html#VALhash", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.hash&nbsp;x</code> associates a nonnegative integer to any value of\n   any type.</p>\n\n</div>"],
["Hashtbl.HashedType", "Hashtbl.HashedType.html", "hash", "Hashtbl.HashedType.html#VALhash", "<div class=\"info\">\n<p>A hashing function on keys.</p>\n\n</div>"],
["Hashtbl.SeededHashedType", "Hashtbl.SeededHashedType.html", "hash", "Hashtbl.SeededHashedType.html#VALhash", "<div class=\"info\">\n<p>A seeded hashing function on keys.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "hash", "MoreLabels.Hashtbl.html#VALhash", ""],
["Uchar", "Uchar.html", "hash", "Uchar.html#VALhash", "<div class=\"info\">\n<p><code class=\"code\">hash&nbsp;u</code> associates a non-negative integer to <code class=\"code\">u</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "has_symlink", "Unix.html#VALhas_symlink", "<div class=\"info\">\n<p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the user is able to create symbolic links.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "has_symlink", "UnixLabels.html#VALhas_symlink", "<div class=\"info\">\n<p>Returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the user is able to create symbolic links.</p>\n\n</div>"],
["Unix", "Unix.html", "handle_unix_error", "Unix.html#VALhandle_unix_error", "<div class=\"info\">\n<p><code class=\"code\">handle_unix_error&nbsp;f&nbsp;x</code> applies <code class=\"code\">f</code> to <code class=\"code\">x</code> and returns the result.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "handle_unix_error", "UnixLabels.html#VALhandle_unix_error", "<div class=\"info\">\n<p><code class=\"code\">handle_unix_error&nbsp;f&nbsp;x</code> applies <code class=\"code\">f</code> to <code class=\"code\">x</code> and returns the result.</p>\n\n</div>"],
["Event", "Event.html", "guard", "Event.html#VALguard", "<div class=\"info\">\n<p><code class=\"code\">guard&nbsp;fn</code> returns the event that, when synchronized, computes\n   <code class=\"code\">fn()</code> and behaves as the resulting event.</p>\n\n</div>"],
["Str", "Str.html", "group_end", "Str.html#VALgroup_end", "<div class=\"info\">\n<p><code class=\"code\">group_end&nbsp;n</code> returns\n   the position of the character following the last character of\n   substring that was matched by the <code class=\"code\">n</code>th group of the regular\n   expression that was matched by the last call to a matching or\n   searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p>\n\n</div>"],
["Str", "Str.html", "group_beginning", "Str.html#VALgroup_beginning", "<div class=\"info\">\n<p><code class=\"code\">group_beginning&nbsp;n</code> returns the position of the first character\n   of the substring that was matched by the <code class=\"code\">n</code>th group of\n   the regular expression that was matched by the last call to a\n   matching or searching function (see <a href=\"Str.html#VALmatched_string\"><code class=\"code\"><span class=\"constructor\">Str</span>.matched_string</code></a> for details).</p>\n\n</div>"],
["Unix", "Unix.html", "gmtime", "Unix.html#VALgmtime", "<div class=\"info\">\n<p>Convert a time in seconds, as returned by <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, into a date and\n   a time.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "gmtime", "UnixLabels.html#VALgmtime", "<div class=\"info\">\n<p>Convert a time in seconds, as returned by <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, into a date\n   and a time.</p>\n\n</div>"],
["Str", "Str.html", "global_substitute", "Str.html#VALglobal_substitute", "<div class=\"info\">\n<p><code class=\"code\">global_substitute&nbsp;regexp&nbsp;subst&nbsp;s</code> returns a string identical\n   to <code class=\"code\">s</code>, except that all substrings of <code class=\"code\">s</code> that match <code class=\"code\">regexp</code>\n   have been replaced by the result of function <code class=\"code\">subst</code>.</p>\n\n</div>"],
["Str", "Str.html", "global_replace", "Str.html#VALglobal_replace", "<div class=\"info\">\n<p><code class=\"code\">global_replace&nbsp;regexp&nbsp;templ&nbsp;s</code> returns a string identical to <code class=\"code\">s</code>,\n   except that all substrings of <code class=\"code\">s</code> that match <code class=\"code\">regexp</code> have been\n   replaced by <code class=\"code\">templ</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "getuid", "Unix.html#VALgetuid", "<div class=\"info\">\n<p>Return the user id of the user executing the process.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getuid", "UnixLabels.html#VALgetuid", "<div class=\"info\">\n<p>Return the user id of the user executing the process.</p>\n\n</div>"],
["Unix", "Unix.html", "gettimeofday", "Unix.html#VALgettimeofday", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALtime\"><code class=\"code\"><span class=\"constructor\">Unix</span>.time</code></a>, but with resolution better than 1 second.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "gettimeofday", "UnixLabels.html#VALgettimeofday", "<div class=\"info\">\n<p>Same as <a href=\"UnixLabels.html#VALtime\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.time</code></a>, but with resolution better than 1 second.</p>\n\n</div>"],
["Unix", "Unix.html", "getsockopt_optint", "Unix.html#VALgetsockopt_optint", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is an\n   <code class=\"code\">int&nbsp;option</code>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getsockopt_optint", "UnixLabels.html#VALgetsockopt_optint", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is\n    an <code class=\"code\">int&nbsp;option</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "getsockopt_int", "Unix.html#VALgetsockopt_int", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for an integer-valued socket option.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getsockopt_int", "UnixLabels.html#VALgetsockopt_int", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for an integer-valued socket option.</p>\n\n</div>"],
["Unix", "Unix.html", "getsockopt_float", "Unix.html#VALgetsockopt_float", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is a\n   floating-point number.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getsockopt_float", "UnixLabels.html#VALgetsockopt_float", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALgetsockopt\"><code class=\"code\"><span class=\"constructor\">Unix</span>.getsockopt</code></a> for a socket option whose value is a\n    floating-point number.</p>\n\n</div>"],
["Unix", "Unix.html", "getsockopt_error", "Unix.html#VALgetsockopt_error", "<div class=\"info\">\n<p>Return the error condition associated with the given socket,\n    and clear it.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getsockopt_error", "UnixLabels.html#VALgetsockopt_error", "<div class=\"info\">\n<p>Return the error condition associated with the given socket,\n    and clear it.</p>\n\n</div>"],
["Unix", "Unix.html", "getsockopt", "Unix.html#VALgetsockopt", "<div class=\"info\">\n<p>Return the current status of a boolean-valued option\n   in the given socket.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getsockopt", "UnixLabels.html#VALgetsockopt", "<div class=\"info\">\n<p>Return the current status of a boolean-valued option\n   in the given socket.</p>\n\n</div>"],
["Unix", "Unix.html", "getsockname", "Unix.html#VALgetsockname", "<div class=\"info\">\n<p>Return the address of the given socket.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getsockname", "UnixLabels.html#VALgetsockname", "<div class=\"info\">\n<p>Return the address of the given socket.</p>\n\n</div>"],
["Unix", "Unix.html", "getservbyport", "Unix.html#VALgetservbyport", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">services</code> with the given service number.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getservbyport", "UnixLabels.html#VALgetservbyport", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">services</code> with the given service number,\n   or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n\n</div>"],
["Unix", "Unix.html", "getservbyname", "Unix.html#VALgetservbyname", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">services</code> with the given name.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getservbyname", "UnixLabels.html#VALgetservbyname", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">services</code> with the given name, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n\n</div>"],
["Unix", "Unix.html", "getpwuid", "Unix.html#VALgetpwuid", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">passwd</code> with the given user id.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getpwuid", "UnixLabels.html#VALgetpwuid", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">passwd</code> with the given user id, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p>\n\n</div>"],
["Unix", "Unix.html", "getpwnam", "Unix.html#VALgetpwnam", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">passwd</code> with the given name.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getpwnam", "UnixLabels.html#VALgetpwnam", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">passwd</code> with the given name, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p>\n\n</div>"],
["Unix", "Unix.html", "getprotobynumber", "Unix.html#VALgetprotobynumber", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">protocols</code> with the given protocol number.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getprotobynumber", "UnixLabels.html#VALgetprotobynumber", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">protocols</code> with the given protocol number,\n   or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n\n</div>"],
["Unix", "Unix.html", "getprotobyname", "Unix.html#VALgetprotobyname", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">protocols</code> with the given name.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getprotobyname", "UnixLabels.html#VALgetprotobyname", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">protocols</code> with the given name, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n\n</div>"],
["Unix", "Unix.html", "getppid", "Unix.html#VALgetppid", "<div class=\"info\">\n<p>Return the pid of the parent process.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getppid", "UnixLabels.html#VALgetppid", "<div class=\"info\">\n<p>Return the pid of the parent process.</p>\n\n</div>"],
["Unix", "Unix.html", "getpid", "Unix.html#VALgetpid", "<div class=\"info\">\n<p>Return the pid of the process.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getpid", "UnixLabels.html#VALgetpid", "<div class=\"info\">\n<p>Return the pid of the process.</p>\n\n</div>"],
["Unix", "Unix.html", "getpeername", "Unix.html#VALgetpeername", "<div class=\"info\">\n<p>Return the address of the host connected to the given socket.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getpeername", "UnixLabels.html#VALgetpeername", "<div class=\"info\">\n<p>Return the address of the host connected to the given socket.</p>\n\n</div>"],
["Unix", "Unix.html", "getnameinfo", "Unix.html#VALgetnameinfo", "<div class=\"info\">\n<p><code class=\"code\">getnameinfo&nbsp;addr&nbsp;opts</code> returns the host name and service name\n    corresponding to the socket address <code class=\"code\">addr</code>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getnameinfo", "UnixLabels.html#VALgetnameinfo", "<div class=\"info\">\n<p><code class=\"code\">getnameinfo&nbsp;addr&nbsp;opts</code> returns the host name and service name\n    corresponding to the socket address <code class=\"code\">addr</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "getlogin", "Unix.html#VALgetlogin", "<div class=\"info\">\n<p>Return the login name of the user executing the process.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getlogin", "UnixLabels.html#VALgetlogin", "<div class=\"info\">\n<p>Return the login name of the user executing the process.</p>\n\n</div>"],
["Unix", "Unix.html", "getitimer", "Unix.html#VALgetitimer", "<div class=\"info\">\n<p>Return the current status of the given interval timer.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getitimer", "UnixLabels.html#VALgetitimer", "<div class=\"info\">\n<p>Return the current status of the given interval timer.</p>\n\n</div>"],
["Unix", "Unix.html", "gethostname", "Unix.html#VALgethostname", "<div class=\"info\">\n<p>Return the name of the local host.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "gethostname", "UnixLabels.html#VALgethostname", "<div class=\"info\">\n<p>Return the name of the local host.</p>\n\n</div>"],
["Unix", "Unix.html", "gethostbyname", "Unix.html#VALgethostbyname", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">hosts</code> with the given name.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "gethostbyname", "UnixLabels.html#VALgethostbyname", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">hosts</code> with the given name, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n\n</div>"],
["Unix", "Unix.html", "gethostbyaddr", "Unix.html#VALgethostbyaddr", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">hosts</code> with the given address.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "gethostbyaddr", "UnixLabels.html#VALgethostbyaddr", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">hosts</code> with the given address, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code>.</p>\n\n</div>"],
["Unix", "Unix.html", "getgroups", "Unix.html#VALgetgroups", "<div class=\"info\">\n<p>Return the list of groups to which the user executing the process\n   belongs.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getgroups", "UnixLabels.html#VALgetgroups", "<div class=\"info\">\n<p>Return the list of groups to which the user executing the process\n   belongs.</p>\n\n</div>"],
["Unix", "Unix.html", "getgrnam", "Unix.html#VALgetgrnam", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">group</code> with the given name.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getgrnam", "UnixLabels.html#VALgetgrnam", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">group</code> with the given name, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p>\n\n</div>"],
["Unix", "Unix.html", "getgrgid", "Unix.html#VALgetgrgid", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">group</code> with the given group id.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getgrgid", "UnixLabels.html#VALgetgrgid", "<div class=\"info\">\n<p>Find an entry in <code class=\"code\">group</code> with the given group id, or raise\n   <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if the matching entry is not found.</p>\n\n</div>"],
["Unix", "Unix.html", "getgid", "Unix.html#VALgetgid", "<div class=\"info\">\n<p>Return the group id of the user executing the process.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getgid", "UnixLabels.html#VALgetgid", "<div class=\"info\">\n<p>Return the group id of the user executing the process.</p>\n\n</div>"],
["Unix", "Unix.html", "geteuid", "Unix.html#VALgeteuid", "<div class=\"info\">\n<p>Return the effective user id under which the process runs.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "geteuid", "UnixLabels.html#VALgeteuid", "<div class=\"info\">\n<p>Return the effective user id under which the process runs.</p>\n\n</div>"],
["Sys", "Sys.html", "getenv_opt", "Sys.html#VALgetenv_opt", "<div class=\"info\">\n<p>Return the value associated to a variable in the process\n    environment or <code class=\"code\"><span class=\"constructor\">None</span></code> if the variable is unbound.</p>\n\n</div>"],
["Sys", "Sys.html", "getenv", "Sys.html#VALgetenv", "<div class=\"info\">\n<p>Return the value associated to a variable in the process\n   environment.</p>\n\n</div>"],
["Unix", "Unix.html", "getenv", "Unix.html#VALgetenv", "<div class=\"info\">\n<p>Return the value associated to a variable in the process\n   environment, unless the process has special privileges.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getenv", "UnixLabels.html#VALgetenv", "<div class=\"info\">\n<p>Return the value associated to a variable in the process\n   environment.</p>\n\n</div>"],
["Unix", "Unix.html", "getegid", "Unix.html#VALgetegid", "<div class=\"info\">\n<p>Return the effective group id under which the process runs.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getegid", "UnixLabels.html#VALgetegid", "<div class=\"info\">\n<p>Return the effective group id under which the process runs.</p>\n\n</div>"],
["Sys", "Sys.html", "getcwd", "Sys.html#VALgetcwd", "<div class=\"info\">\n<p>Return the current working directory of the process.</p>\n\n</div>"],
["Unix", "Unix.html", "getcwd", "Unix.html#VALgetcwd", "<div class=\"info\">\n<p>Return the name of the current working directory.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getcwd", "UnixLabels.html#VALgetcwd", "<div class=\"info\">\n<p>Return the name of the current working directory.</p>\n\n</div>"],
["Unix", "Unix.html", "getaddrinfo", "Unix.html#VALgetaddrinfo", "<div class=\"info\">\n<p><code class=\"code\">getaddrinfo&nbsp;host&nbsp;service&nbsp;opts</code> returns a list of <a href=\"Unix.html#TYPEaddr_info\"><code class=\"code\"><span class=\"constructor\">Unix</span>.addr_info</code></a>\n    records describing socket parameters and addresses suitable for\n    communicating with the given host and service.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "getaddrinfo", "UnixLabels.html#VALgetaddrinfo", "<div class=\"info\">\n<p><code class=\"code\">getaddrinfo&nbsp;host&nbsp;service&nbsp;opts</code> returns a list of <a href=\"Unix.html#TYPEaddr_info\"><code class=\"code\"><span class=\"constructor\">Unix</span>.addr_info</code></a>\n    records describing socket parameters and addresses suitable for\n    communicating with the given host and service.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "get_variables", "CamlinternalOO.html#VALget_variables", ""],
["CamlinternalOO", "CamlinternalOO.html", "get_variable", "CamlinternalOO.html#VALget_variable", ""],
["Bytes", "Bytes.html", "get_uint8", "Bytes.html#VALget_uint8", "<div class=\"info\">\n<p><code class=\"code\">get_uint8&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s unsigned 8-bit integer starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_uint8", "BytesLabels.html#VALget_uint8", "<div class=\"info\">\n<p><code class=\"code\">get_uint8&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s unsigned 8-bit integer starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_uint16_ne", "Bytes.html#VALget_uint16_ne", "<div class=\"info\">\n<p><code class=\"code\">get_uint16_ne&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s native-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_uint16_ne", "BytesLabels.html#VALget_uint16_ne", "<div class=\"info\">\n<p><code class=\"code\">get_uint16_ne&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s native-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_uint16_le", "Bytes.html#VALget_uint16_le", "<div class=\"info\">\n<p><code class=\"code\">get_uint16_le&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s little-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_uint16_le", "BytesLabels.html#VALget_uint16_le", "<div class=\"info\">\n<p><code class=\"code\">get_uint16_le&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s little-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_uint16_be", "Bytes.html#VALget_uint16_be", "<div class=\"info\">\n<p><code class=\"code\">get_uint16_be&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s big-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_uint16_be", "BytesLabels.html#VALget_uint16_be", "<div class=\"info\">\n<p><code class=\"code\">get_uint16_be&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s big-endian unsigned 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Filename", "Filename.html", "get_temp_dir_name", "Filename.html#VALget_temp_dir_name", "<div class=\"info\">\n<p>The name of the temporary directory:\n    Under Unix, the value of the <code class=\"code\"><span class=\"constructor\">TMPDIR</span></code> environment variable, or \"/tmp\"\n    if the variable is not set.</p>\n\n</div>"],
["Format", "Format.html", "get_symbolic_output_buffer", "Format.html#VALget_symbolic_output_buffer", "<div class=\"info\">\n<p><code class=\"code\">get_symbolic_output_buffer&nbsp;sob</code> returns the contents of buffer <code class=\"code\">sob</code>.</p>\n\n</div>"],
["Random", "Random.html", "get_state", "Random.html#VALget_state", "<div class=\"info\">\n<p>Return the current state of the generator used by the basic functions.</p>\n\n</div>"],
["Printexc", "Printexc.html", "get_raw_backtrace_slot", "Printexc.html#VALget_raw_backtrace_slot", "<div class=\"info\">\n<p><code class=\"code\">get_raw_backtrace_slot&nbsp;bckt&nbsp;pos</code> returns the slot in position <code class=\"code\">pos</code> in the\n    backtrace <code class=\"code\">bckt</code>.</p>\n\n</div>"],
["Printexc", "Printexc.html", "get_raw_backtrace_next_slot", "Printexc.html#VALget_raw_backtrace_next_slot", "<div class=\"info\">\n<p><code class=\"code\">get_raw_backtrace_next_slot&nbsp;slot</code> returns the next slot inlined, if any.</p>\n\n</div>"],
["Printexc", "Printexc.html", "get_raw_backtrace", "Printexc.html#VALget_raw_backtrace", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_raw_backtrace&nbsp;()</code> returns the same exception\n    backtrace that <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> would print, but in\n    a raw format.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "get_public_method", "CamlinternalOO.html#VALget_public_method", ""],
["Format", "Format.html", "get_print_tags", "Format.html#VALget_print_tags", "<div class=\"info\">\n<p>Return the current status of tag-printing operations.</p>\n\n</div>"],
["Result", "Result.html", "get_ok", "Result.html#VALget_ok", "<div class=\"info\">\n<p><code class=\"code\">get_ok&nbsp;r</code> is <code class=\"code\">v</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;v</code> and</p>\n\n</div>"],
["Gc", "Gc.html", "get_minor_free", "Gc.html#VALget_minor_free", "<div class=\"info\">\n<p>Return the current size of the free space inside the minor heap.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "get_method_labels", "CamlinternalOO.html#VALget_method_labels", ""],
["CamlinternalOO", "CamlinternalOO.html", "get_method_label", "CamlinternalOO.html#VALget_method_label", ""],
["CamlinternalOO", "CamlinternalOO.html", "get_method", "CamlinternalOO.html#VALget_method", ""],
["Format", "Format.html", "get_max_indent", "Format.html#VALget_max_indent", "<div class=\"info\">\n<p>Return the maximum indentation limit (in characters).</p>\n\n</div>"],
["Format", "Format.html", "get_max_boxes", "Format.html#VALget_max_boxes", "<div class=\"info\">\n<p>Returns the maximum number of pretty-printing boxes allowed before\n  ellipsis.</p>\n\n</div>"],
["Format", "Format.html", "get_mark_tags", "Format.html#VALget_mark_tags", "<div class=\"info\">\n<p>Return the current status of tag-marking operations.</p>\n\n</div>"],
["Format", "Format.html", "get_margin", "Format.html#VALget_margin", "<div class=\"info\">\n<p>Returns the position of the right margin.</p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "get_key_copy", "Ephemeron.K1.html#VALget_key_copy", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the key of <code class=\"code\">eph</code> is\n      empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is a (shallow) copy of the key) if\n      it is full.</p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "get_key_copy", "Ephemeron.Kn.html#VALget_key_copy", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "get_key_copy", "Obj.Ephemeron.html#VALget_key_copy", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_key2_copy", "Ephemeron.K2.html#VALget_key2_copy", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_key2", "Ephemeron.K2.html#VALget_key2", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_key1_copy", "Ephemeron.K2.html#VALget_key1_copy", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key_copy</code></a></p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_key1", "Ephemeron.K2.html#VALget_key1", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "get_key", "Ephemeron.K1.html#VALget_key", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the key of <code class=\"code\">eph</code> is\n      empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is the key) if it is full.</p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "get_key", "Ephemeron.Kn.html#VALget_key", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "get_key", "Obj.Ephemeron.html#VALget_key", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_key</code></a></p>\n\n</div>"],
["Bytes", "Bytes.html", "get_int8", "Bytes.html#VALget_int8", "<div class=\"info\">\n<p><code class=\"code\">get_int8&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s signed 8-bit integer starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_int8", "BytesLabels.html#VALget_int8", "<div class=\"info\">\n<p><code class=\"code\">get_int8&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s signed 8-bit integer starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_int64_ne", "Bytes.html#VALget_int64_ne", "<div class=\"info\">\n<p><code class=\"code\">get_int64_ne&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s native-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_int64_ne", "BytesLabels.html#VALget_int64_ne", "<div class=\"info\">\n<p><code class=\"code\">get_int64_ne&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s native-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_int64_le", "Bytes.html#VALget_int64_le", "<div class=\"info\">\n<p><code class=\"code\">get_int64_le&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s little-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_int64_le", "BytesLabels.html#VALget_int64_le", "<div class=\"info\">\n<p><code class=\"code\">get_int64_le&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s little-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_int64_be", "Bytes.html#VALget_int64_be", "<div class=\"info\">\n<p><code class=\"code\">get_int64_be&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s big-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_int64_be", "BytesLabels.html#VALget_int64_be", "<div class=\"info\">\n<p><code class=\"code\">get_int64_be&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s big-endian 64-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_int32_ne", "Bytes.html#VALget_int32_ne", "<div class=\"info\">\n<p><code class=\"code\">get_int32_ne&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s native-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_int32_ne", "BytesLabels.html#VALget_int32_ne", "<div class=\"info\">\n<p><code class=\"code\">get_int32_ne&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s native-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_int32_le", "Bytes.html#VALget_int32_le", "<div class=\"info\">\n<p><code class=\"code\">get_int32_le&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s little-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_int32_le", "BytesLabels.html#VALget_int32_le", "<div class=\"info\">\n<p><code class=\"code\">get_int32_le&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s little-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_int32_be", "Bytes.html#VALget_int32_be", "<div class=\"info\">\n<p><code class=\"code\">get_int32_be&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s big-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_int32_be", "BytesLabels.html#VALget_int32_be", "<div class=\"info\">\n<p><code class=\"code\">get_int32_be&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s big-endian 32-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_int16_ne", "Bytes.html#VALget_int16_ne", "<div class=\"info\">\n<p><code class=\"code\">get_int16_ne&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s native-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_int16_ne", "BytesLabels.html#VALget_int16_ne", "<div class=\"info\">\n<p><code class=\"code\">get_int16_ne&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s native-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_int16_le", "Bytes.html#VALget_int16_le", "<div class=\"info\">\n<p><code class=\"code\">get_int16_le&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s little-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_int16_le", "BytesLabels.html#VALget_int16_le", "<div class=\"info\">\n<p><code class=\"code\">get_int16_le&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s little-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "get_int16_be", "Bytes.html#VALget_int16_be", "<div class=\"info\">\n<p><code class=\"code\">get_int16_be&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s big-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get_int16_be", "BytesLabels.html#VALget_int16_be", "<div class=\"info\">\n<p><code class=\"code\">get_int16_be&nbsp;b&nbsp;i</code> is <code class=\"code\">b</code>'s big-endian signed 16-bit integer\n    starting at byte index <code class=\"code\">i</code>.</p>\n\n</div>"],
["Format", "Format.html", "get_geometry", "Format.html#VALget_geometry", "<div class=\"info\">\n<p>Return the current geometry of the formatter</p>\n\n</div>"],
["Format", "Format.html", "get_formatter_tag_functions", "Format.html#VALget_formatter_tag_functions", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Format", "Format.html", "get_formatter_stag_functions", "Format.html#VALget_formatter_stag_functions", "<div class=\"info\">\n<p>Return the current semantic tag operation functions of the standard\n  pretty-printer.</p>\n\n</div>"],
["Format", "Format.html", "get_formatter_output_functions", "Format.html#VALget_formatter_output_functions", "<div class=\"info\">\n<p>Return the current output functions of the standard pretty-printer.</p>\n\n</div>"],
["Format", "Format.html", "get_formatter_out_functions", "Format.html#VALget_formatter_out_functions", "<div class=\"info\">\n<p>Return the current output functions of the pretty-printer,\n  including line splitting and indentation functions.</p>\n\n</div>"],
["Result", "Result.html", "get_error", "Result.html#VALget_error", "<div class=\"info\">\n<p><code class=\"code\">get_error&nbsp;r</code> is <code class=\"code\">e</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;e</code> and</p>\n\n</div>"],
["Format", "Format.html", "get_ellipsis_text", "Format.html#VALget_ellipsis_text", "<div class=\"info\">\n<p>Return the text of the ellipsis.</p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "get_data_copy", "Ephemeron.K1.html#VALget_data_copy", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the data of <code class=\"code\">eph</code> is\n      empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is a (shallow) copy of the data) if\n      it is full.</p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_data_copy", "Ephemeron.K2.html#VALget_data_copy", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy</code></a></p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "get_data_copy", "Ephemeron.Kn.html#VALget_data_copy", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "get_data_copy", "Obj.Ephemeron.html#VALget_data_copy", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data_copy\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data_copy</code></a></p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "get_data", "Ephemeron.K1.html#VALget_data", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data&nbsp;eph</code> returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the data of <code class=\"code\">eph</code> is\n      empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is the data) if it is full.</p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "get_data", "Ephemeron.K2.html#VALget_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data</code></a></p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "get_data", "Ephemeron.Kn.html#VALget_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "get_data", "Obj.Ephemeron.html#VALget_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALget_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.get_data</code></a></p>\n\n</div>"],
["Gc", "Gc.html", "get_credit", "Gc.html#VALget_credit", "<div class=\"info\">\n<p><code class=\"code\">get_credit&nbsp;()</code> returns the current size of the \"work done in advance\"\n    counter of the GC smoothing system.</p>\n\n</div>"],
["Weak", "Weak.html", "get_copy", "Weak.html#VALget_copy", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.get_copy&nbsp;ar&nbsp;n</code> returns None if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is\n   empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is a (shallow) copy of the value) if\n   it is full.</p>\n\n</div>"],
["Printexc", "Printexc.html", "get_callstack", "Printexc.html#VALget_callstack", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_callstack&nbsp;n</code> returns a description of the top of the\n    call stack on the current program point (for the current thread),\n    with at most <code class=\"code\">n</code> entries.</p>\n\n</div>"],
["Gc", "Gc.html", "get_bucket", "Gc.html#VALget_bucket", "<div class=\"info\">\n<p><code class=\"code\">get_bucket&nbsp;n</code> returns the current size of the <code class=\"code\">n</code>-th future bucket\n    of the GC smoothing system.</p>\n\n</div>"],
["Printexc", "Printexc.html", "get_backtrace", "Printexc.html#VALget_backtrace", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.get_backtrace&nbsp;()</code> returns a string containing the\n    same exception backtrace that <code class=\"code\"><span class=\"constructor\">Printexc</span>.print_backtrace</code> would\n    print.</p>\n\n</div>"],
["Format", "Format.html", "get_all_formatter_output_functions", "Format.html#VALget_all_formatter_output_functions", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Array", "Array.html", "get", "Array.html#VALget", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code> returns the element number <code class=\"code\">n</code> of array <code class=\"code\">a</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "get", "ArrayLabels.html#VALget", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.get&nbsp;a&nbsp;n</code> returns the element number <code class=\"code\">n</code> of array <code class=\"code\">a</code>.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "get", "Bigarray.Genarray.html#VALget", "<div class=\"info\">\n<p>Read an element of a generic Bigarray.</p>\n\n</div>"],
["Bigarray.Array0", "Bigarray.Array0.html", "get", "Bigarray.Array0.html#VALget", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array0</span>.get&nbsp;a</code> returns the only element in <code class=\"code\">a</code>.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "get", "Bigarray.Array1.html#VALget", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array1</span>.get&nbsp;a&nbsp;x</code>, or alternatively <code class=\"code\">a.{x}</code>,\n     returns the element of <code class=\"code\">a</code> at index <code class=\"code\">x</code>.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "get", "Bigarray.Array2.html#VALget", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array2</span>.get&nbsp;a&nbsp;x&nbsp;y</code>, also written <code class=\"code\">a.{x,y}</code>,\n     returns the element of <code class=\"code\">a</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>).</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "get", "Bigarray.Array3.html#VALget", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array3</span>.get&nbsp;a&nbsp;x&nbsp;y&nbsp;z</code>, also written <code class=\"code\">a.{x,y,z}</code>,\n     returns the element of <code class=\"code\">a</code> at coordinates (<code class=\"code\">x</code>, <code class=\"code\">y</code>, <code class=\"code\">z</code>).</p>\n\n</div>"],
["Bytes", "Bytes.html", "get", "Bytes.html#VALget", "<div class=\"info\">\n<p><code class=\"code\">get&nbsp;s&nbsp;n</code> returns the byte at index <code class=\"code\">n</code> in argument <code class=\"code\">s</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "get", "BytesLabels.html#VALget", "<div class=\"info\">\n<p><code class=\"code\">get&nbsp;s&nbsp;n</code> returns the byte at index <code class=\"code\">n</code> in argument <code class=\"code\">s</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "get", "Float.Array.html#VALget", "<div class=\"info\">\n<p><code class=\"code\">get&nbsp;a&nbsp;n</code> returns the element number <code class=\"code\">n</code> of floatarray <code class=\"code\">a</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "get", "Float.ArrayLabels.html#VALget", ""],
["Gc", "Gc.html", "get", "Gc.html#VALget", "<div class=\"info\">\n<p>Return the current values of the GC parameters in a <code class=\"code\">control</code> record.</p>\n\n</div>"],
["Option", "Option.html", "get", "Option.html#VALget", "<div class=\"info\">\n<p><code class=\"code\">get&nbsp;o</code> is <code class=\"code\">v</code> if <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> and</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "get", "StringLabels.html#VALget", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>.</p>\n\n</div>"],
["String", "String.html", "get", "String.html#VALget", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.get&nbsp;s&nbsp;n</code> returns the character at index <code class=\"code\">n</code> in string <code class=\"code\">s</code>.</p>\n\n</div>"],
["Weak", "Weak.html", "get", "Weak.html#VALget", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.get&nbsp;ar&nbsp;n</code> returns None if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is\n   empty, <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;x</code> (where <code class=\"code\">x</code> is the value) if it is full.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "genarray_of_array3", "Bigarray.html#VALgenarray_of_array3", "<div class=\"info\">\n<p>Return the generic Bigarray corresponding to the given three-dimensional\n   Bigarray.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "genarray_of_array2", "Bigarray.html#VALgenarray_of_array2", "<div class=\"info\">\n<p>Return the generic Bigarray corresponding to the given two-dimensional\n   Bigarray.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "genarray_of_array1", "Bigarray.html#VALgenarray_of_array1", "<div class=\"info\">\n<p>Return the generic Bigarray corresponding to the given one-dimensional\n   Bigarray.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "genarray_of_array0", "Bigarray.html#VALgenarray_of_array0", "<div class=\"info\">\n<p>Return the generic Bigarray corresponding to the given zero-dimensional\n   Bigarray.</p>\n\n</div>"],
["Str", "Str.html", "full_split", "Str.html#VALfull_split", "<div class=\"info\">\n<p>Same as <a href=\"Str.html#VALsplit_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.split_delim</code></a>, but returns\n   the delimiters as well as the substrings contained between\n   delimiters.</p>\n\n</div>"],
["Gc", "Gc.html", "full_major", "Gc.html#VALfull_major", "<div class=\"info\">\n<p>Do a minor collection, finish the current major collection cycle,\n   and perform a complete new cycle.</p>\n\n</div>"],
["Random", "Random.html", "full_init", "Random.html#VALfull_init", "<div class=\"info\">\n<p>Same as <a href=\"Random.html#VALinit\"><code class=\"code\"><span class=\"constructor\">Random</span>.init</code></a> but takes more data as seed.</p>\n\n</div>"],
["Unix", "Unix.html", "ftruncate", "Unix.html#VALftruncate", "<div class=\"info\">\n<p>Truncates the file corresponding to the given descriptor\n   to the given size.</p>\n\n</div>"],
["Unix.LargeFile", "Unix.LargeFile.html", "ftruncate", "Unix.LargeFile.html#VALftruncate", "<div class=\"info\">\n<p>See <a href=\"Unix.html#VALftruncate\"><code class=\"code\"><span class=\"constructor\">Unix</span>.ftruncate</code></a>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "ftruncate", "UnixLabels.html#VALftruncate", "<div class=\"info\">\n<p>Truncates the file corresponding to the given descriptor\n   to the given size.</p>\n\n</div>"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "ftruncate", "UnixLabels.LargeFile.html#VALftruncate", ""],
["Unix", "Unix.html", "fsync", "Unix.html#VALfsync", "<div class=\"info\">\n<p>Flush file buffers to disk.</p>\n\n</div>"],
["Unix", "Unix.html", "fstat", "Unix.html#VALfstat", "<div class=\"info\">\n<p>Return the information for the file associated with the given\n   descriptor.</p>\n\n</div>"],
["Unix.LargeFile", "Unix.LargeFile.html", "fstat", "Unix.LargeFile.html#VALfstat", ""],
["UnixLabels", "UnixLabels.html", "fstat", "UnixLabels.html#VALfstat", "<div class=\"info\">\n<p>Return the information for the file associated with the given\n   descriptor.</p>\n\n</div>"],
["UnixLabels.LargeFile", "UnixLabels.LargeFile.html", "fstat", "UnixLabels.LargeFile.html#VALfstat", ""],
["Pervasives", "Pervasives.html", "fst", "Pervasives.html#VALfst", ""],
["Scanf", "Scanf.html", "fscanf", "Scanf.html#VALfscanf", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Lazy", "Lazy.html", "from_val", "Lazy.html#VALfrom_val", "<div class=\"info\">\n<p><code class=\"code\">from_val&nbsp;v</code> returns an already-forced suspension of <code class=\"code\">v</code>.</p>\n\n</div>"],
["Lexing", "Lexing.html", "from_string", "Lexing.html#VALfrom_string", "<div class=\"info\">\n<p>Create a lexer buffer which reads from\n   the given string.</p>\n\n</div>"],
["Marshal", "Marshal.html", "from_string", "Marshal.html#VALfrom_string", "<div class=\"info\">\n<p>Same as <code class=\"code\">from_bytes</code> but take a string as argument instead of a\n    byte sequence.</p>\n\n</div>"],
["Scanf.Scanning", "Scanf.Scanning.html", "from_string", "Scanf.Scanning.html#VALfrom_string", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.from_string&nbsp;s</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted\n    input channel which reads from the given string.</p>\n\n</div>"],
["Digest", "Digest.html", "from_hex", "Digest.html#VALfrom_hex", "<div class=\"info\">\n<p>Convert a hexadecimal representation back into the corresponding digest.</p>\n\n</div>"],
["Lexing", "Lexing.html", "from_function", "Lexing.html#VALfrom_function", "<div class=\"info\">\n<p>Create a lexer buffer with the given function as its reading method.</p>\n\n</div>"],
["Scanf.Scanning", "Scanf.Scanning.html", "from_function", "Scanf.Scanning.html#VALfrom_function", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.from_function&nbsp;f</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted\n    input channel with the given function as its reading method.</p>\n\n</div>"],
["Lazy", "Lazy.html", "from_fun", "Lazy.html#VALfrom_fun", "<div class=\"info\">\n<p><code class=\"code\">from_fun&nbsp;f</code> is the same as <code class=\"code\"><span class=\"keyword\">lazy</span>&nbsp;(f&nbsp;())</code> but slightly more efficient.</p>\n\n</div>"],
["Scanf.Scanning", "Scanf.Scanning.html", "from_file_bin", "Scanf.Scanning.html#VALfrom_file_bin", "<div class=\"info\">\n<p>An alias for <a href=\"Scanf.Scanning.html#VALopen_in_bin\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.open_in_bin</code></a> above.</p>\n\n</div>"],
["Scanf.Scanning", "Scanf.Scanning.html", "from_file", "Scanf.Scanning.html#VALfrom_file", "<div class=\"info\">\n<p>An alias for <a href=\"Scanf.Scanning.html#VALopen_in\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.open_in</code></a> above.</p>\n\n</div>"],
["Lexing", "Lexing.html", "from_channel", "Lexing.html#VALfrom_channel", "<div class=\"info\">\n<p>Create a lexer buffer on the given input channel.</p>\n\n</div>"],
["Marshal", "Marshal.html", "from_channel", "Marshal.html#VALfrom_channel", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel&nbsp;chan</code> reads from channel <code class=\"code\">chan</code> the\n   byte representation of a structured value, as produced by\n   one of the <code class=\"code\"><span class=\"constructor\">Marshal</span>.to_*</code> functions, and reconstructs and\n   returns the corresponding value.</p>\n\n</div>"],
["Scanf.Scanning", "Scanf.Scanning.html", "from_channel", "Scanf.Scanning.html#VALfrom_channel", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.from_channel&nbsp;ic</code> returns a <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted\n    input channel which reads from the regular <a href=\"Stdlib.html#TYPEin_channel\"><code class=\"code\">in_channel</code></a> input\n    channel <code class=\"code\">ic</code> argument.</p>\n\n</div>"],
["Marshal", "Marshal.html", "from_bytes", "Marshal.html#VALfrom_bytes", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_bytes&nbsp;buff&nbsp;ofs</code> unmarshals a structured value\n   like <a href=\"Marshal.html#VALfrom_channel\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.from_channel</code></a> does, except that the byte\n   representation is not read from a channel, but taken from\n   the byte sequence <code class=\"code\">buff</code>, starting at position <code class=\"code\">ofs</code>.</p>\n\n</div>"],
["Stream", "Stream.html", "from", "Stream.html#VALfrom", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Stream</span>.from&nbsp;f</code> returns a stream built from the function <code class=\"code\">f</code>.</p>\n\n</div>"],
["Float", "Float.html", "frexp", "Float.html#VALfrexp", "<div class=\"info\">\n<p><code class=\"code\">frexp&nbsp;f</code> returns the pair of the significant\n    and the exponent of <code class=\"code\">f</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "frexp", "Pervasives.html#VALfrexp", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "freeze_char_set", "CamlinternalFormat.html#VALfreeze_char_set", ""],
["Format", "Format.html", "fprintf", "Format.html#VALfprintf", ""],
["Printf", "Printf.html", "fprintf", "Printf.html#VALfprintf", "<div class=\"info\">\n<p><code class=\"code\">fprintf&nbsp;outchan&nbsp;format&nbsp;arg1&nbsp;...&nbsp;argN</code> formats the arguments\n   <code class=\"code\">arg1</code> to <code class=\"code\">argN</code> according to the format string <code class=\"code\">format</code>, and\n   outputs the resulting string on the channel <code class=\"code\">outchan</code>.</p>\n\n</div>"],
["Obj", "Obj.html", "forward_tag", "Obj.html#VALforward_tag", ""],
["Bigarray", "Bigarray.html", "fortran_layout", "Bigarray.html#VALfortran_layout", ""],
["Format", "Format.html", "formatter_of_symbolic_output_buffer", "Format.html#VALformatter_of_symbolic_output_buffer", "<div class=\"info\">\n<p><code class=\"code\">formatter_of_symbolic_output_buffer&nbsp;sob</code> returns a symbolic formatter\n  that outputs to <code class=\"code\">symbolic_output_buffer</code> <code class=\"code\">sob</code>.</p>\n\n</div>"],
["Format", "Format.html", "formatter_of_out_functions", "Format.html#VALformatter_of_out_functions", "<div class=\"info\">\n<p><code class=\"code\">formatter_of_out_functions&nbsp;out_funs</code> returns a new formatter that writes\n  with the set of output functions <code class=\"code\">out_funs</code>.</p>\n\n</div>"],
["Format", "Format.html", "formatter_of_out_channel", "Format.html#VALformatter_of_out_channel", "<div class=\"info\">\n<p><code class=\"code\">formatter_of_out_channel&nbsp;oc</code> returns a new formatter writing\n  to the corresponding output channel <code class=\"code\">oc</code>.</p>\n\n</div>"],
["Format", "Format.html", "formatter_of_buffer", "Format.html#VALformatter_of_buffer", "<div class=\"info\">\n<p><code class=\"code\">formatter_of_buffer&nbsp;b</code> returns a new formatter writing to\n  buffer <code class=\"code\">b</code>.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "format_of_string_format", "CamlinternalFormat.html#VALformat_of_string_format", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "format_of_string_fmtty", "CamlinternalFormat.html#VALformat_of_string_fmtty", ""],
["Pervasives", "Pervasives.html", "format_of_string", "Pervasives.html#VALformat_of_string", ""],
["Scanf", "Scanf.html", "format_from_string", "Scanf.html#VALformat_from_string", "<div class=\"info\">\n<p><code class=\"code\">format_from_string&nbsp;s&nbsp;fmt</code> converts a string argument to a format string,\n    according to the given format string <code class=\"code\">fmt</code>.</p>\n\n</div>"],
["Printexc.Slot", "Printexc.Slot.html", "format", "Printexc.Slot.html#VALformat", "<div class=\"info\">\n<p><code class=\"code\">format&nbsp;pos&nbsp;slot</code> returns the string representation of <code class=\"code\">slot</code> as\n      <code class=\"code\">raw_backtrace_to_string</code> would format it, assuming it is the\n      <code class=\"code\">pos</code>-th element of the backtrace: the <code class=\"code\">0</code>-th element is\n      pretty-printed differently than the others.</p>\n\n</div>"],
["Unix", "Unix.html", "fork", "Unix.html#VALfork", "<div class=\"info\">\n<p>Fork a new process.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "fork", "UnixLabels.html#VALfork", "<div class=\"info\">\n<p>Fork a new process.</p>\n\n</div>"],
["CamlinternalLazy", "CamlinternalLazy.html", "force_val_lazy_block", "CamlinternalLazy.html#VALforce_val_lazy_block", ""],
["CamlinternalLazy", "CamlinternalLazy.html", "force_val", "CamlinternalLazy.html#VALforce_val", ""],
["Lazy", "Lazy.html", "force_val", "Lazy.html#VALforce_val", "<div class=\"info\">\n<p><code class=\"code\">force_val&nbsp;x</code> forces the suspension <code class=\"code\">x</code> and returns its\n    result.</p>\n\n</div>"],
["Format", "Format.html", "force_newline", "Format.html#VALforce_newline", "<div class=\"info\">\n<p>Force a new line in the current pretty-printing box.</p>\n\n</div>"],
["CamlinternalLazy", "CamlinternalLazy.html", "force_lazy_block", "CamlinternalLazy.html#VALforce_lazy_block", ""],
["CamlinternalLazy", "CamlinternalLazy.html", "force", "CamlinternalLazy.html#VALforce", ""],
["Lazy", "Lazy.html", "force", "Lazy.html#VALforce", "<div class=\"info\">\n<p><code class=\"code\">force&nbsp;x</code> forces the suspension <code class=\"code\">x</code> and returns its result.</p>\n\n</div>"],
["List", "List.html", "for_all2", "List.html#VALfor_all2", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">List</span>.for_all</code></a>, but for a two-argument predicate.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "for_all2", "ListLabels.html#VALfor_all2", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALfor_all\"><code class=\"code\"><span class=\"constructor\">List</span>.for_all</code></a>, but for a two-argument predicate.</p>\n\n</div>"],
["Array", "Array.html", "for_all", "Array.html#VALfor_all", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.for_all&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if all elements of the array\n   satisfy the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "for_all", "ArrayLabels.html#VALfor_all", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.for_all&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if all elements of the array\n   satisfy the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "for_all", "Float.Array.html#VALfor_all", "<div class=\"info\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if all elements of the floatarray\n      satisfy the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "for_all", "Float.ArrayLabels.html#VALfor_all", ""],
["List", "List.html", "for_all", "List.html#VALfor_all", "<div class=\"info\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if all elements of the list\n   satisfy the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "for_all", "ListLabels.html#VALfor_all", "<div class=\"info\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if all elements of the list\n   satisfy the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "for_all", "Map.S.html#VALfor_all", "<div class=\"info\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;m</code> checks if all the bindings of the map\n        satisfy the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "for_all", "MoreLabels.Map.S.html#VALfor_all", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "for_all", "MoreLabels.Set.S.html#VALfor_all", ""],
["Set.S", "Set.S.html", "for_all", "Set.S.html#VALfor_all", "<div class=\"info\">\n<p><code class=\"code\">for_all&nbsp;p&nbsp;s</code> checks if all elements of the set\n       satisfy the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["List", "List.html", "fold_right2", "List.html#VALfold_right2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;c</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;b1&nbsp;(f&nbsp;a2&nbsp;b2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;bn&nbsp;c)&nbsp;...))</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "fold_right2", "ListLabels.html#VALfold_right2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right2&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;c</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;b1&nbsp;(f&nbsp;a2&nbsp;b2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;bn&nbsp;c)&nbsp;...))</code>.</p>\n\n</div>"],
["Array", "Array.html", "fold_right", "Array.html#VALfold_right", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_right&nbsp;f&nbsp;a&nbsp;x</code> computes\n   <code class=\"code\">f&nbsp;a.(0)&nbsp;(f&nbsp;a.(1)&nbsp;(&nbsp;...&nbsp;(f&nbsp;a.(n-1)&nbsp;x)&nbsp;...))</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "fold_right", "ArrayLabels.html#VALfold_right", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_right&nbsp;f&nbsp;a&nbsp;x</code> computes\n   <code class=\"code\">f&nbsp;a.(0)&nbsp;(f&nbsp;a.(1)&nbsp;(&nbsp;...&nbsp;(f&nbsp;a.(n-1)&nbsp;x)&nbsp;...))</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "fold_right", "Float.Array.html#VALfold_right", "<div class=\"info\">\n<p><code class=\"code\">fold_right&nbsp;f&nbsp;a&nbsp;x</code> computes\n      <code class=\"code\">f&nbsp;a.(0)&nbsp;(f&nbsp;a.(1)&nbsp;(&nbsp;...&nbsp;(f&nbsp;a.(n-1)&nbsp;x)&nbsp;...))</code>,\n      where <code class=\"code\">n</code> is the length of the floatarray <code class=\"code\">a</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "fold_right", "Float.ArrayLabels.html#VALfold_right", ""],
["List", "List.html", "fold_right", "List.html#VALfold_right", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;b</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;(f&nbsp;a2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;b)&nbsp;...))</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "fold_right", "ListLabels.html#VALfold_right", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_right&nbsp;f&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;b</code> is\n   <code class=\"code\">f&nbsp;a1&nbsp;(f&nbsp;a2&nbsp;(...&nbsp;(f&nbsp;an&nbsp;b)&nbsp;...))</code>.</p>\n\n</div>"],
["List", "List.html", "fold_left2", "List.html#VALfold_left2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left2&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;[c1;&nbsp;...;&nbsp;cn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1&nbsp;c1)&nbsp;b2&nbsp;c2)&nbsp;...)&nbsp;bn&nbsp;cn</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "fold_left2", "ListLabels.html#VALfold_left2", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left2&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]&nbsp;[c1;&nbsp;...;&nbsp;cn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1&nbsp;c1)&nbsp;b2&nbsp;c2)&nbsp;...)&nbsp;bn&nbsp;cn</code>.</p>\n\n</div>"],
["Array", "Array.html", "fold_left", "Array.html#VALfold_left", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_left&nbsp;f&nbsp;x&nbsp;a</code> computes\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;x&nbsp;a.(0))&nbsp;a.(1))&nbsp;...)&nbsp;a.(n-1)</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "fold_left", "ArrayLabels.html#VALfold_left", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fold_left&nbsp;f&nbsp;x&nbsp;a</code> computes\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;x&nbsp;a.(0))&nbsp;a.(1))&nbsp;...)&nbsp;a.(n-1)</code>,\n   where <code class=\"code\">n</code> is the length of the array <code class=\"code\">a</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "fold_left", "Float.Array.html#VALfold_left", "<div class=\"info\">\n<p><code class=\"code\">fold_left&nbsp;f&nbsp;x&nbsp;a</code> computes\n      <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;x&nbsp;a.(0))&nbsp;a.(1))&nbsp;...)&nbsp;a.(n-1)</code>,\n      where <code class=\"code\">n</code> is the length of the floatarray <code class=\"code\">a</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "fold_left", "Float.ArrayLabels.html#VALfold_left", ""],
["List", "List.html", "fold_left", "List.html#VALfold_left", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1)&nbsp;b2)&nbsp;...)&nbsp;bn</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "fold_left", "ListLabels.html#VALfold_left", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;a&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;a&nbsp;b1)&nbsp;b2)&nbsp;...)&nbsp;bn</code>.</p>\n\n</div>"],
["Seq", "Seq.html", "fold_left", "Seq.html#VALfold_left", "<div class=\"info\">\n<p>Traverse the sequence from left to right, combining each element with the\n    accumulator using the given function.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "fold", "Hashtbl.html#VALfold", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.fold&nbsp;f&nbsp;tbl&nbsp;init</code> computes\n   <code class=\"code\">(f&nbsp;kN&nbsp;dN&nbsp;...&nbsp;(f&nbsp;k1&nbsp;d1&nbsp;init)...)</code>,\n   where <code class=\"code\">k1&nbsp;...&nbsp;kN</code> are the keys of all bindings in <code class=\"code\">tbl</code>,\n   and <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the associated values.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "fold", "Hashtbl.S.html#VALfold", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "fold", "Hashtbl.SeededS.html#VALfold", ""],
["Map.S", "Map.S.html", "fold", "Map.S.html#VALfold", "<div class=\"info\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;m&nbsp;a</code> computes <code class=\"code\">(f&nbsp;kN&nbsp;dN&nbsp;...&nbsp;(f&nbsp;k1&nbsp;d1&nbsp;a)...)</code>,\n       where <code class=\"code\">k1&nbsp;...&nbsp;kN</code> are the keys of all bindings in <code class=\"code\">m</code>\n       (in increasing order), and <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the associated data.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "fold", "MoreLabels.Hashtbl.html#VALfold", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "fold", "MoreLabels.Hashtbl.S.html#VALfold", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "fold", "MoreLabels.Hashtbl.SeededS.html#VALfold", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "fold", "MoreLabels.Map.S.html#VALfold", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "fold", "MoreLabels.Set.S.html#VALfold", ""],
["Option", "Option.html", "fold", "Option.html#VALfold", "<div class=\"info\">\n<p><code class=\"code\">fold&nbsp;~none&nbsp;~some&nbsp;o</code> is <code class=\"code\">none</code> if <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">None</span></code> and <code class=\"code\">some&nbsp;v</code> if <code class=\"code\">o</code> is\n    <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code>.</p>\n\n</div>"],
["Queue", "Queue.html", "fold", "Queue.html#VALfold", "<div class=\"info\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;accu&nbsp;q</code> is equivalent to <code class=\"code\"><span class=\"constructor\">List</span>.fold_left&nbsp;f&nbsp;accu&nbsp;l</code>,\n   where <code class=\"code\">l</code> is the list of <code class=\"code\">q</code>'s elements.</p>\n\n</div>"],
["Result", "Result.html", "fold", "Result.html#VALfold", "<div class=\"info\">\n<p><code class=\"code\">fold&nbsp;~ok&nbsp;~error&nbsp;r</code> is <code class=\"code\">ok&nbsp;v</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;v</code> and <code class=\"code\">error&nbsp;e</code> if <code class=\"code\">r</code>\n    is <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;e</code>.</p>\n\n</div>"],
["Set.S", "Set.S.html", "fold", "Set.S.html#VALfold", "<div class=\"info\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;s&nbsp;a</code> computes <code class=\"code\">(f&nbsp;xN&nbsp;...&nbsp;(f&nbsp;x2&nbsp;(f&nbsp;x1&nbsp;a))...)</code>,\n       where <code class=\"code\">x1&nbsp;...&nbsp;xN</code> are the elements of <code class=\"code\">s</code>, in increasing order.</p>\n\n</div>"],
["Stack", "Stack.html", "fold", "Stack.html#VALfold", "<div class=\"info\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;accu&nbsp;s</code> is <code class=\"code\">(f&nbsp;(...&nbsp;(f&nbsp;(f&nbsp;accu&nbsp;x1)&nbsp;x2)&nbsp;...)&nbsp;xn)</code>\n    where <code class=\"code\">x1</code> is the top of the stack, <code class=\"code\">x2</code> the second element,\n    and <code class=\"code\">xn</code> the bottom element.</p>\n\n</div>"],
["Weak.S", "Weak.S.html", "fold", "Weak.S.html#VALfold", "<div class=\"info\">\n<p><code class=\"code\">fold&nbsp;f&nbsp;t&nbsp;init</code> computes <code class=\"code\">(f&nbsp;d1&nbsp;(...&nbsp;(f&nbsp;dN&nbsp;init)))</code> where\n        <code class=\"code\">d1&nbsp;...&nbsp;dN</code> are the elements of <code class=\"code\">t</code> in some unspecified order.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "fmt_ebb_of_string", "CamlinternalFormat.html#VALfmt_ebb_of_string", ""],
["Float", "Float.html", "fma", "Float.html#VALfma", "<div class=\"info\">\n<p><code class=\"code\">fma&nbsp;x&nbsp;y&nbsp;z</code> returns <code class=\"code\">x&nbsp;*&nbsp;y&nbsp;+&nbsp;z</code>, with a best effort for computing\n   this expression with a single rounding, using either hardware\n   instructions (providing full IEEE compliance) or a software\n   emulation.</p>\n\n</div>"],
["Format", "Format.html", "flush_symbolic_output_buffer", "Format.html#VALflush_symbolic_output_buffer", "<div class=\"info\">\n<p><code class=\"code\">flush_symbolic_output_buffer&nbsp;sob</code> returns the contents of buffer\n  <code class=\"code\">sob</code> and resets buffer <code class=\"code\">sob</code>.</p>\n\n</div>"],
["Format", "Format.html", "flush_str_formatter", "Format.html#VALflush_str_formatter", "<div class=\"info\">\n<p>Returns the material printed with <code class=\"code\">str_formatter</code>, flushes\n  the formatter and resets the corresponding buffer.</p>\n\n</div>"],
["Lexing", "Lexing.html", "flush_input", "Lexing.html#VALflush_input", "<div class=\"info\">\n<p>Discard the contents of the buffer and reset the current\n    position to 0.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "flush_all", "Pervasives.html#VALflush_all", ""],
["Pervasives", "Pervasives.html", "flush", "Pervasives.html#VALflush", ""],
["Float", "Float.html", "floor", "Float.html#VALfloor", "<div class=\"info\">\n<p>Round below to an integer value.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "floor", "Pervasives.html#VALfloor", ""],
["Pervasives", "Pervasives.html", "float_of_string_opt", "Pervasives.html#VALfloat_of_string_opt", ""],
["Pervasives", "Pervasives.html", "float_of_string", "Pervasives.html#VALfloat_of_string", ""],
["Pervasives", "Pervasives.html", "float_of_int", "Pervasives.html#VALfloat_of_int", ""],
["Int32", "Int32.html", "float_of_bits", "Int32.html#VALfloat_of_bits", "<div class=\"info\">\n<p>Return the floating-point number whose internal representation,\n   according to the IEEE 754 floating-point 'single format' bit layout,\n   is the given <code class=\"code\">int32</code>.</p>\n\n</div>"],
["Int64", "Int64.html", "float_of_bits", "Int64.html#VALfloat_of_bits", "<div class=\"info\">\n<p>Return the floating-point number whose internal representation,\n   according to the IEEE 754 floating-point 'double format' bit layout,\n   is the given <code class=\"code\">int64</code>.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "float64", "Bigarray.html#VALfloat64", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "float32", "Bigarray.html#VALfloat32", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "float", "Pervasives.html#VALfloat", ""],
["Random", "Random.html", "float", "Random.html#VALfloat", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.float&nbsp;bound</code> returns a random floating-point number\n   between 0 and <code class=\"code\">bound</code> (inclusive).</p>\n\n</div>"],
["Random.State", "Random.State.html", "float", "Random.State.html#VALfloat", ""],
["Fun", "Fun.html", "flip", "Fun.html#VALflip", "<div class=\"info\">\n<p><code class=\"code\">flip&nbsp;f</code> reverses the argument order of the binary function\n    <code class=\"code\">f</code>.</p>\n\n</div>"],
["List", "List.html", "flatten", "List.html#VALflatten", "<div class=\"info\">\n<p>An alias for <code class=\"code\">concat</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "flatten", "ListLabels.html#VALflatten", "<div class=\"info\">\n<p>Same as <code class=\"code\">concat</code>.</p>\n\n</div>"],
["Seq", "Seq.html", "flat_map", "Seq.html#VALflat_map", "<div class=\"info\">\n<p>Map each element to a subsequence, then return each element of this\n    sub-sequence in turn.</p>\n\n</div>"],
["Obj", "Obj.html", "first_non_constant_constructor_tag", "Obj.html#VALfirst_non_constant_constructor_tag", ""],
["Str", "Str.html", "first_chars", "Str.html#VALfirst_chars", "<div class=\"info\">\n<p><code class=\"code\">first_chars&nbsp;s&nbsp;n</code> returns the first <code class=\"code\">n</code> characters of <code class=\"code\">s</code>.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "find_opt", "Hashtbl.html#VALfind_opt", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find_opt&nbsp;tbl&nbsp;x</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>,\n    or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such binding exists.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "find_opt", "Hashtbl.S.html#VALfind_opt", "<div class=\"info\">\n</div>"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "find_opt", "Hashtbl.SeededS.html#VALfind_opt", "<div class=\"info\">\n</div>"],
["List", "List.html", "find_opt", "List.html#VALfind_opt", "<div class=\"info\">\n<p><code class=\"code\">find_opt&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code> that\n    satisfies the predicate <code class=\"code\">p</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no value that\n    satisfies <code class=\"code\">p</code> in the list <code class=\"code\">l</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "find_opt", "ListLabels.html#VALfind_opt", "<div class=\"info\">\n<p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code>\n   that satisfies the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "find_opt", "Map.S.html#VALfind_opt", "<div class=\"info\">\n<p><code class=\"code\">find_opt&nbsp;x&nbsp;m</code> returns <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> if the current binding of <code class=\"code\">x</code>\n        in <code class=\"code\">m</code> is <code class=\"code\">v</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such binding exists.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "find_opt", "MoreLabels.Hashtbl.html#VALfind_opt", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "find_opt", "MoreLabels.Hashtbl.S.html#VALfind_opt", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "find_opt", "MoreLabels.Hashtbl.SeededS.html#VALfind_opt", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find_opt", "MoreLabels.Map.S.html#VALfind_opt", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find_opt", "MoreLabels.Set.S.html#VALfind_opt", ""],
["Set.S", "Set.S.html", "find_opt", "Set.S.html#VALfind_opt", "<div class=\"info\">\n<p><code class=\"code\">find_opt&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according\n        to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element\n        exists.</p>\n\n</div>"],
["Weak.S", "Weak.S.html", "find_opt", "Weak.S.html#VALfind_opt", "<div class=\"info\">\n<p><code class=\"code\">find_opt&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code>\n        or <code class=\"code\"><span class=\"constructor\">None</span></code> if there is no such element.</p>\n\n</div>"],
["Map.S", "Map.S.html", "find_last_opt", "Map.S.html#VALfind_last_opt", "<div class=\"info\">\n<p><code class=\"code\">find_last_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns an option containing the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code>\n       such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find_last_opt", "MoreLabels.Map.S.html#VALfind_last_opt", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find_last_opt", "MoreLabels.Set.S.html#VALfind_last_opt", ""],
["Set.S", "Set.S.html", "find_last_opt", "Set.S.html#VALfind_last_opt", "<div class=\"info\">\n<p><code class=\"code\">find_last_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns an option containing the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that\n       <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p>\n\n</div>"],
["Map.S", "Map.S.html", "find_last", "Map.S.html#VALfind_last", "<div class=\"info\">\n<p><code class=\"code\">find_last&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns the binding of <code class=\"code\">m</code> with the highest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find_last", "MoreLabels.Map.S.html#VALfind_last", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find_last", "MoreLabels.Set.S.html#VALfind_last", ""],
["Set.S", "Set.S.html", "find_last", "Set.S.html#VALfind_last", "<div class=\"info\">\n<p><code class=\"code\">find_last&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically decreasing function,\n       returns the highest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p>\n\n</div>"],
["Map.S", "Map.S.html", "find_first_opt", "Map.S.html#VALfind_first_opt", "<div class=\"info\">\n<p><code class=\"code\">find_first_opt&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns an option containing the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code>\n       such that <code class=\"code\">f&nbsp;k</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such key exists.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find_first_opt", "MoreLabels.Map.S.html#VALfind_first_opt", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find_first_opt", "MoreLabels.Set.S.html#VALfind_first_opt", ""],
["Set.S", "Set.S.html", "find_first_opt", "Set.S.html#VALfind_first_opt", "<div class=\"info\">\n<p><code class=\"code\">find_first_opt&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns an option containing the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that\n       <code class=\"code\">f&nbsp;e</code>, or <code class=\"code\"><span class=\"constructor\">None</span></code> if no such element exists.</p>\n\n</div>"],
["Map.S", "Map.S.html", "find_first", "Map.S.html#VALfind_first", "<div class=\"info\">\n<p><code class=\"code\">find_first&nbsp;f&nbsp;m</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns the binding of <code class=\"code\">m</code> with the lowest key <code class=\"code\">k</code> such that <code class=\"code\">f&nbsp;k</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such key exists.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find_first", "MoreLabels.Map.S.html#VALfind_first", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find_first", "MoreLabels.Set.S.html#VALfind_first", ""],
["Set.S", "Set.S.html", "find_first", "Set.S.html#VALfind_first", "<div class=\"info\">\n<p><code class=\"code\">find_first&nbsp;f&nbsp;s</code>, where <code class=\"code\">f</code> is a monotonically increasing function,\n       returns the lowest element <code class=\"code\">e</code> of <code class=\"code\">s</code> such that <code class=\"code\">f&nbsp;e</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element exists.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "find_all", "Hashtbl.html#VALfind_all", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find_all&nbsp;tbl&nbsp;x</code> returns the list of all data\n   associated with <code class=\"code\">x</code> in <code class=\"code\">tbl</code>.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "find_all", "Hashtbl.S.html#VALfind_all", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "find_all", "Hashtbl.SeededS.html#VALfind_all", ""],
["List", "List.html", "find_all", "List.html#VALfind_all", "<div class=\"info\">\n<p><code class=\"code\">find_all</code> is another name for <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "find_all", "ListLabels.html#VALfind_all", "<div class=\"info\">\n<p><code class=\"code\">find_all</code> is another name for <a href=\"List.html#VALfilter\"><code class=\"code\"><span class=\"constructor\">List</span>.filter</code></a>.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "find_all", "MoreLabels.Hashtbl.html#VALfind_all", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "find_all", "MoreLabels.Hashtbl.S.html#VALfind_all", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "find_all", "MoreLabels.Hashtbl.SeededS.html#VALfind_all", ""],
["Weak.S", "Weak.S.html", "find_all", "Weak.S.html#VALfind_all", "<div class=\"info\">\n<p><code class=\"code\">find_all&nbsp;t&nbsp;x</code> returns a list of all the instances of <code class=\"code\">x</code>\n        found in <code class=\"code\">t</code>.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "find", "Hashtbl.html#VALfind", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.find&nbsp;tbl&nbsp;x</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">tbl</code>,\n   or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "find", "Hashtbl.S.html#VALfind", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "find", "Hashtbl.SeededS.html#VALfind", ""],
["List", "List.html", "find", "List.html#VALfind", "<div class=\"info\">\n<p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code>\n   that satisfies the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "find", "ListLabels.html#VALfind", "<div class=\"info\">\n<p><code class=\"code\">find&nbsp;p&nbsp;l</code> returns the first element of the list <code class=\"code\">l</code>\n   that satisfies the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "find", "Map.S.html#VALfind", "<div class=\"info\">\n<p><code class=\"code\">find&nbsp;x&nbsp;m</code> returns the current binding of <code class=\"code\">x</code> in <code class=\"code\">m</code>,\n       or raises <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such binding exists.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "find", "MoreLabels.Hashtbl.html#VALfind", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "find", "MoreLabels.Hashtbl.S.html#VALfind", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "find", "MoreLabels.Hashtbl.SeededS.html#VALfind", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "find", "MoreLabels.Map.S.html#VALfind", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "find", "MoreLabels.Set.S.html#VALfind", ""],
["Set.S", "Set.S.html", "find", "Set.S.html#VALfind", "<div class=\"info\">\n<p><code class=\"code\">find&nbsp;x&nbsp;s</code> returns the element of <code class=\"code\">s</code> equal to <code class=\"code\">x</code> (according\n        to <code class=\"code\"><span class=\"constructor\">Ord</span>.compare</code>), or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if no such element\n        exists.</p>\n\n</div>"],
["Weak.S", "Weak.S.html", "find", "Weak.S.html#VALfind", "<div class=\"info\">\n<p><code class=\"code\">find&nbsp;t&nbsp;x</code> returns an instance of <code class=\"code\">x</code> found in <code class=\"code\">t</code>.</p>\n\n</div>"],
["Gc", "Gc.html", "finalise_release", "Gc.html#VALfinalise_release", "<div class=\"info\">\n<p>A finalisation function may call <code class=\"code\">finalise_release</code> to tell the\n    GC that it can launch the next finalisation function without waiting\n    for the current one to return.</p>\n\n</div>"],
["Gc", "Gc.html", "finalise_last", "Gc.html#VALfinalise_last", "<div class=\"info\">\n<p>same as <a href=\"Gc.html#VALfinalise\"><code class=\"code\"><span class=\"constructor\">Gc</span>.finalise</code></a> except the value is not given as argument.</p>\n\n</div>"],
["Gc", "Gc.html", "finalise", "Gc.html#VALfinalise", "<div class=\"info\">\n<p><code class=\"code\">finalise&nbsp;f&nbsp;v</code> registers <code class=\"code\">f</code> as a finalisation function for <code class=\"code\">v</code>.</p>\n\n</div>"],
["Obj", "Obj.html", "final_tag", "Obj.html#VALfinal_tag", ""],
["Hashtbl", "Hashtbl.html", "filter_map_inplace", "Hashtbl.html#VALfilter_map_inplace", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.filter_map_inplace&nbsp;f&nbsp;tbl</code> applies <code class=\"code\">f</code> to all bindings in\n    table <code class=\"code\">tbl</code> and update each binding depending on the result of\n    <code class=\"code\">f</code>.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "filter_map_inplace", "Hashtbl.S.html#VALfilter_map_inplace", "<div class=\"info\">\n</div>"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "filter_map_inplace", "Hashtbl.SeededS.html#VALfilter_map_inplace", "<div class=\"info\">\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "filter_map_inplace", "MoreLabels.Hashtbl.html#VALfilter_map_inplace", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "filter_map_inplace", "MoreLabels.Hashtbl.S.html#VALfilter_map_inplace", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "filter_map_inplace", "MoreLabels.Hashtbl.SeededS.html#VALfilter_map_inplace", ""],
["List", "List.html", "filter_map", "List.html#VALfilter_map", "<div class=\"info\">\n<p><code class=\"code\">filter_map&nbsp;f&nbsp;l</code> applies <code class=\"code\">f</code> to every element of <code class=\"code\">l</code>, filters\n    out the <code class=\"code\"><span class=\"constructor\">None</span></code> elements and returns the list of the arguments of\n    the <code class=\"code\"><span class=\"constructor\">Some</span></code> elements.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "filter_map", "ListLabels.html#VALfilter_map", "<div class=\"info\">\n<p><code class=\"code\">filter_map&nbsp;f&nbsp;l</code> applies <code class=\"code\">f</code> to every element of <code class=\"code\">l</code>, filters\n    out the <code class=\"code\"><span class=\"constructor\">None</span></code> elements and returns the list of the arguments of\n    the <code class=\"code\"><span class=\"constructor\">Some</span></code> elements.</p>\n\n</div>"],
["Seq", "Seq.html", "filter_map", "Seq.html#VALfilter_map", "<div class=\"info\">\n<p>Apply the function to every element; if <code class=\"code\">f&nbsp;x&nbsp;=&nbsp;<span class=\"constructor\">None</span></code> then <code class=\"code\">x</code> is dropped;\n    if <code class=\"code\">f&nbsp;x&nbsp;=&nbsp;<span class=\"constructor\">Some</span>&nbsp;y</code> then <code class=\"code\">y</code> is returned.</p>\n\n</div>"],
["List", "List.html", "filter", "List.html#VALfilter", "<div class=\"info\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;l</code> returns all the elements of the list <code class=\"code\">l</code>\n   that satisfy the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "filter", "ListLabels.html#VALfilter", "<div class=\"info\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;l</code> returns all the elements of the list <code class=\"code\">l</code>\n   that satisfy the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "filter", "Map.S.html#VALfilter", "<div class=\"info\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;m</code> returns the map with all the bindings in <code class=\"code\">m</code>\n        that satisfy predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "filter", "MoreLabels.Map.S.html#VALfilter", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "filter", "MoreLabels.Set.S.html#VALfilter", ""],
["Seq", "Seq.html", "filter", "Seq.html#VALfilter", "<div class=\"info\">\n<p>Remove from the sequence the elements that do not satisfy the\n    given predicate.</p>\n\n</div>"],
["Set.S", "Set.S.html", "filter", "Set.S.html#VALfilter", "<div class=\"info\">\n<p><code class=\"code\">filter&nbsp;p&nbsp;s</code> returns the set of all elements in <code class=\"code\">s</code>\n       that satisfy predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["Array", "Array.html", "fill", "Array.html#VALfill", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fill&nbsp;a&nbsp;ofs&nbsp;len&nbsp;x</code> modifies the array <code class=\"code\">a</code> in place,\n   storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "fill", "ArrayLabels.html#VALfill", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.fill&nbsp;a&nbsp;ofs&nbsp;len&nbsp;x</code> modifies the array <code class=\"code\">a</code> in place,\n   storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "fill", "Bigarray.Genarray.html#VALfill", "<div class=\"info\">\n<p>Set all elements of a Bigarray to a given value.</p>\n\n</div>"],
["Bigarray.Array0", "Bigarray.Array0.html", "fill", "Bigarray.Array0.html#VALfill", "<div class=\"info\">\n<p>Fill the given Bigarray with the given value.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "fill", "Bigarray.Array1.html#VALfill", "<div class=\"info\">\n<p>Fill the given Bigarray with the given value.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "fill", "Bigarray.Array2.html#VALfill", "<div class=\"info\">\n<p>Fill the given Bigarray with the given value.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "fill", "Bigarray.Array3.html#VALfill", "<div class=\"info\">\n<p>Fill the given Bigarray with the given value.</p>\n\n</div>"],
["Bytes", "Bytes.html", "fill", "Bytes.html#VALfill", "<div class=\"info\">\n<p><code class=\"code\">fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code>\n    characters with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "fill", "BytesLabels.html#VALfill", "<div class=\"info\">\n<p><code class=\"code\">fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies <code class=\"code\">s</code> in place, replacing <code class=\"code\">len</code>\n    characters with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "fill", "Float.Array.html#VALfill", "<div class=\"info\">\n<p><code class=\"code\">fill&nbsp;a&nbsp;ofs&nbsp;len&nbsp;x</code> modifies the floatarray <code class=\"code\">a</code> in place,\n     storing <code class=\"code\">x</code> in elements number <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "fill", "Float.ArrayLabels.html#VALfill", ""],
["StringLabels", "StringLabels.html", "fill", "StringLabels.html#VALfill", "<div class=\"info\">\n<span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing <code class=\"code\">len</code> bytes by <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n</span></div>"],
["String", "String.html", "fill", "String.html#VALfill", "<div class=\"info\">\n<span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.fill&nbsp;s&nbsp;start&nbsp;len&nbsp;c</code> modifies byte sequence <code class=\"code\">s</code> in place,\n   replacing <code class=\"code\">len</code> bytes with <code class=\"code\">c</code>, starting at <code class=\"code\">start</code>.</p>\n\n</span></div>"],
["Weak", "Weak.html", "fill", "Weak.html#VALfill", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.fill&nbsp;ar&nbsp;ofs&nbsp;len&nbsp;el</code> sets to <code class=\"code\">el</code> all pointers of <code class=\"code\">ar</code> from\n   <code class=\"code\">ofs</code> to <code class=\"code\">ofs&nbsp;+&nbsp;len&nbsp;-&nbsp;1</code>.</p>\n\n</div>"],
["Sys", "Sys.html", "file_exists", "Sys.html#VALfile_exists", "<div class=\"info\">\n<p>Test if a file with the given name exists.</p>\n\n</div>"],
["Digest", "Digest.html", "file", "Digest.html#VALfile", "<div class=\"info\">\n<p>Return the digest of the file whose name is given.</p>\n\n</div>"],
["Obj", "Obj.html", "field", "Obj.html#VALfield", ""],
["Unix", "Unix.html", "fchown", "Unix.html#VALfchown", "<div class=\"info\">\n<p>Change the owner uid and owner gid of an opened file.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "fchown", "UnixLabels.html#VALfchown", "<div class=\"info\">\n<p>Change the owner uid and owner gid of an opened file.</p>\n\n</div>"],
["Unix", "Unix.html", "fchmod", "Unix.html#VALfchmod", "<div class=\"info\">\n<p>Change the permissions of an opened file.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "fchmod", "UnixLabels.html#VALfchmod", "<div class=\"info\">\n<p>Change the permissions of an opened file.</p>\n\n</div>"],
["Array", "Array.html", "fast_sort", "Array.html#VALfast_sort", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is faster\n    on typical input.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "fast_sort", "ArrayLabels.html#VALfast_sort", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is\n    faster on typical input.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "fast_sort", "Float.Array.html#VALfast_sort", "<div class=\"info\">\n<p>Same as <a href=\"Float.Array.html#VALsort\"><code class=\"code\"><span class=\"constructor\">Float</span>.<span class=\"constructor\">Array</span>.sort</code></a> or <a href=\"Float.Array.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">Float</span>.<span class=\"constructor\">Array</span>.stable_sort</code></a>, whichever is faster\n      on typical input.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "fast_sort", "Float.ArrayLabels.html#VALfast_sort", ""],
["List", "List.html", "fast_sort", "List.html#VALfast_sort", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is faster\n    on typical input.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "fast_sort", "ListLabels.html#VALfast_sort", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALsort\"><code class=\"code\"><span class=\"constructor\">List</span>.sort</code></a> or <a href=\"List.html#VALstable_sort\"><code class=\"code\"><span class=\"constructor\">List</span>.stable_sort</code></a>, whichever is\n    faster on typical input.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "failwith", "Pervasives.html#VALfailwith", ""],
["Obj", "Obj.html", "extension_name", "Obj.html#VALextension_name", ""],
["Obj", "Obj.html", "extension_id", "Obj.html#VALextension_id", ""],
["Obj", "Obj.html", "extension_constructor", "Obj.html#VALextension_constructor", ""],
["Filename", "Filename.html", "extension", "Filename.html#VALextension", "<div class=\"info\">\n<p><code class=\"code\">extension&nbsp;name</code> is the shortest suffix <code class=\"code\">ext</code> of <code class=\"code\">name0</code> where:</p>\n\n</div>"],
["Bytes", "Bytes.html", "extend", "Bytes.html#VALextend", "<div class=\"info\">\n<p><code class=\"code\">extend&nbsp;s&nbsp;left&nbsp;right</code> returns a new byte sequence that contains\n    the bytes of <code class=\"code\">s</code>, with <code class=\"code\">left</code> uninitialized bytes prepended and\n    <code class=\"code\">right</code> uninitialized bytes appended to it.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "extend", "BytesLabels.html#VALextend", "<div class=\"info\">\n<p><code class=\"code\">extend&nbsp;s&nbsp;left&nbsp;right</code> returns a new byte sequence that contains\n    the bytes of <code class=\"code\">s</code>, with <code class=\"code\">left</code> uninitialized bytes prepended and\n    <code class=\"code\">right</code> uninitialized bytes appended to it.</p>\n\n</div>"],
["Float", "Float.html", "expm1", "Float.html#VALexpm1", "<div class=\"info\">\n<p><code class=\"code\">expm1&nbsp;x</code> computes <code class=\"code\">exp&nbsp;x&nbsp;-.&nbsp;1.0</code>, giving numerically-accurate results\n    even if <code class=\"code\">x</code> is close to <code class=\"code\">0.0</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "expm1", "Pervasives.html#VALexpm1", ""],
["Complex", "Complex.html", "exp", "Complex.html#VALexp", "<div class=\"info\">\n<p>Exponentiation.</p>\n\n</div>"],
["Float", "Float.html", "exp", "Float.html#VALexp", "<div class=\"info\">\n<p>Exponential.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "exp", "Pervasives.html#VALexp", ""],
["Printexc", "Printexc.html", "exn_slot_name", "Printexc.html#VALexn_slot_name", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.exn_slot_name&nbsp;exn</code> returns the internal name of the constructor\n    used to create the exception value <code class=\"code\">exn</code>.</p>\n\n</div>"],
["Printexc", "Printexc.html", "exn_slot_id", "Printexc.html#VALexn_slot_id", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.exn_slot_id</code> returns an integer which uniquely identifies\n    the constructor used to create the exception value <code class=\"code\">exn</code>\n    (in the current runtime).</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "exit", "Pervasives.html#VALexit", ""],
["Thread", "Thread.html", "exit", "Thread.html#VALexit", "<div class=\"info\">\n<p>Terminate prematurely the currently executing thread.</p>\n\n</div>"],
["List", "List.html", "exists2", "List.html#VALexists2", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALexists\"><code class=\"code\"><span class=\"constructor\">List</span>.exists</code></a>, but for a two-argument predicate.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "exists2", "ListLabels.html#VALexists2", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALexists\"><code class=\"code\"><span class=\"constructor\">List</span>.exists</code></a>, but for a two-argument predicate.</p>\n\n</div>"],
["Array", "Array.html", "exists", "Array.html#VALexists", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.exists&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if at least one element of\n    the array satisfies the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "exists", "ArrayLabels.html#VALexists", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.exists&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if at least one element of\n    the array satisfies the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "exists", "Float.Array.html#VALexists", "<div class=\"info\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;[|a1;&nbsp;...;&nbsp;an|]</code> checks if at least one element of\n      the floatarray satisfies the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "exists", "Float.ArrayLabels.html#VALexists", ""],
["List", "List.html", "exists", "List.html#VALexists", "<div class=\"info\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if at least one element of\n   the list satisfies the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "exists", "ListLabels.html#VALexists", "<div class=\"info\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;[a1;&nbsp;...;&nbsp;an]</code> checks if at least one element of\n   the list satisfies the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "exists", "Map.S.html#VALexists", "<div class=\"info\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;m</code> checks if at least one binding of the map\n        satisfies the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "exists", "MoreLabels.Map.S.html#VALexists", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "exists", "MoreLabels.Set.S.html#VALexists", ""],
["Set.S", "Set.S.html", "exists", "Set.S.html#VALexists", "<div class=\"info\">\n<p><code class=\"code\">exists&nbsp;p&nbsp;s</code> checks if at least one element of\n       the set satisfies the predicate <code class=\"code\">p</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "execvpe", "Unix.html#VALexecvpe", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALexecve\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execve</code></a>, except that\n   the program is searched in the path.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "execvpe", "UnixLabels.html#VALexecvpe", "<div class=\"info\">\n<p>Same as <a href=\"UnixLabels.html#VALexecve\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execve</code></a>, except that\n   the program is searched in the path.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "execvp", "ThreadUnix.html#VALexecvp", ""],
["Unix", "Unix.html", "execvp", "Unix.html#VALexecvp", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execv</code></a>, except that\n   the program is searched in the path.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "execvp", "UnixLabels.html#VALexecvp", "<div class=\"info\">\n<p>Same as <a href=\"UnixLabels.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execv</code></a>, except that\n   the program is searched in the path.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "execve", "ThreadUnix.html#VALexecve", ""],
["Unix", "Unix.html", "execve", "Unix.html#VALexecve", "<div class=\"info\">\n<p>Same as <a href=\"Unix.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">Unix</span>.execv</code></a>, except that the third argument provides the\n   environment to the program executed.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "execve", "UnixLabels.html#VALexecve", "<div class=\"info\">\n<p>Same as <a href=\"UnixLabels.html#VALexecv\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.execv</code></a>, except that the third argument provides the\n   environment to the program executed.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "execv", "ThreadUnix.html#VALexecv", ""],
["Unix", "Unix.html", "execv", "Unix.html#VALexecv", "<div class=\"info\">\n<p><code class=\"code\">execv&nbsp;prog&nbsp;args</code> execute the program in file <code class=\"code\">prog</code>, with\n   the arguments <code class=\"code\">args</code>, and the current process environment.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "execv", "UnixLabels.html#VALexecv", "<div class=\"info\">\n<p><code class=\"code\">execv&nbsp;prog&nbsp;args</code> execute the program in file <code class=\"code\">prog</code>, with\n   the arguments <code class=\"code\">args</code>, and the current process environment.</p>\n\n</div>"],
["Sys", "Sys.html", "executable_name", "Sys.html#VALexecutable_name", "<div class=\"info\">\n<p>The name of the file containing the executable currently running.</p>\n\n</div>"],
["Unix", "Unix.html", "establish_server", "Unix.html#VALestablish_server", "<div class=\"info\">\n<p>Establish a server on the given address.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "establish_server", "UnixLabels.html#VALestablish_server", "<div class=\"info\">\n<p>Establish a server on the given address.</p>\n\n</div>"],
["Bytes", "Bytes.html", "escaped", "Bytes.html#VALescaped", "<div class=\"info\">\n<p>Return a copy of the argument, with special characters represented\n    by escape sequences, following the lexical conventions of OCaml.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "escaped", "BytesLabels.html#VALescaped", "<div class=\"info\">\n<p>Return a copy of the argument, with special characters represented\n    by escape sequences, following the lexical conventions of OCaml.</p>\n\n</div>"],
["Char", "Char.html", "escaped", "Char.html#VALescaped", "<div class=\"info\">\n<p>Return a string representing the given character,\n    with special characters escaped following the lexical conventions\n    of OCaml.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "escaped", "StringLabels.html#VALescaped", "<div class=\"info\">\n<p>Return a copy of the argument, with special characters\n   represented by escape sequences, following the lexical\n   conventions of OCaml.</p>\n\n</div>"],
["String", "String.html", "escaped", "String.html#VALescaped", "<div class=\"info\">\n<p>Return a copy of the argument, with special characters\n    represented by escape sequences, following the lexical\n    conventions of OCaml.</p>\n\n</div>"],
["Dynlink", "Dynlink.html", "error_message", "Dynlink.html#VALerror_message", "<div class=\"info\">\n<p>Convert an error description to a printable message.</p>\n\n</div>"],
["Unix", "Unix.html", "error_message", "Unix.html#VALerror_message", "<div class=\"info\">\n<p>Return a string describing the given error code.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "error_message", "UnixLabels.html#VALerror_message", "<div class=\"info\">\n<p>Return a string describing the given error code.</p>\n\n</div>"],
["Result", "Result.html", "error", "Result.html#VALerror", "<div class=\"info\">\n<p><code class=\"code\">error&nbsp;e</code> is <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;e</code>.</p>\n\n</div>"],
["Format", "Format.html", "err_formatter", "Format.html#VALerr_formatter", "<div class=\"info\">\n<p>A formatter to write to standard error.</p>\n\n</div>"],
["CamlinternalFormatBasics", "CamlinternalFormatBasics.html", "erase_rel", "CamlinternalFormatBasics.html#VALerase_rel", ""],
["Bool", "Bool.html", "equal", "Bool.html#VALequal", "<div class=\"info\">\n<p><code class=\"code\">equal&nbsp;b0&nbsp;b1</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">b0</code> and <code class=\"code\">b1</code> are both either <code class=\"code\"><span class=\"keyword\">true</span></code>\n    or <code class=\"code\"><span class=\"keyword\">false</span></code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "equal", "Bytes.html#VALequal", "<div class=\"info\">\n<p>The equality function for byte sequences.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "equal", "BytesLabels.html#VALequal", "<div class=\"info\">\n<p>The equality function for byte sequences.</p>\n\n</div>"],
["Char", "Char.html", "equal", "Char.html#VALequal", "<div class=\"info\">\n<p>The equal function for chars.</p>\n\n</div>"],
["Digest", "Digest.html", "equal", "Digest.html#VALequal", "<div class=\"info\">\n<p>The equal function for 16-character digest.</p>\n\n</div>"],
["Float", "Float.html", "equal", "Float.html#VALequal", "<div class=\"info\">\n<p>The equal function for floating-point numbers, compared using <a href=\"Float.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">Float</span>.compare</code></a>.</p>\n\n</div>"],
["Hashtbl.HashedType", "Hashtbl.HashedType.html", "equal", "Hashtbl.HashedType.html#VALequal", "<div class=\"info\">\n<p>The equality predicate used to compare keys.</p>\n\n</div>"],
["Hashtbl.SeededHashedType", "Hashtbl.SeededHashedType.html", "equal", "Hashtbl.SeededHashedType.html#VALequal", "<div class=\"info\">\n<p>The equality predicate used to compare keys.</p>\n\n</div>"],
["Int", "Int.html", "equal", "Int.html#VALequal", "<div class=\"info\">\n<p><code class=\"code\">equal&nbsp;x&nbsp;y</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">x&nbsp;=&nbsp;y</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "equal", "Int32.html#VALequal", "<div class=\"info\">\n<p>The equal function for int32s.</p>\n\n</div>"],
["Int64", "Int64.html", "equal", "Int64.html#VALequal", "<div class=\"info\">\n<p>The equal function for int64s.</p>\n\n</div>"],
["Map.S", "Map.S.html", "equal", "Map.S.html#VALequal", "<div class=\"info\">\n<p><code class=\"code\">equal&nbsp;cmp&nbsp;m1&nbsp;m2</code> tests whether the maps <code class=\"code\">m1</code> and <code class=\"code\">m2</code> are\n       equal, that is, contain equal keys and associate them with\n       equal data.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "equal", "MoreLabels.Map.S.html#VALequal", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "equal", "MoreLabels.Set.S.html#VALequal", ""],
["Nativeint", "Nativeint.html", "equal", "Nativeint.html#VALequal", "<div class=\"info\">\n<p>The equal function for native ints.</p>\n\n</div>"],
["Option", "Option.html", "equal", "Option.html#VALequal", "<div class=\"info\">\n<p><code class=\"code\">equal&nbsp;eq&nbsp;o0&nbsp;o1</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> iff <code class=\"code\">o0</code> and <code class=\"code\">o1</code> are both <code class=\"code\"><span class=\"constructor\">None</span></code> or if\n    they are <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v0</code> and <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v1</code> and <code class=\"code\">eq&nbsp;v0&nbsp;v1</code> is <code class=\"code\"><span class=\"keyword\">true</span></code>.</p>\n\n</div>"],
["Result", "Result.html", "equal", "Result.html#VALequal", "<div class=\"info\">\n<p><code class=\"code\">equal&nbsp;~ok&nbsp;~error&nbsp;r0&nbsp;r1</code> tests equality of <code class=\"code\">r0</code> and <code class=\"code\">r1</code> using <code class=\"code\">ok</code>\n    and <code class=\"code\">error</code> to respectively compare values wrapped by <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;_</code> and\n    <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;_</code>.</p>\n\n</div>"],
["Set.S", "Set.S.html", "equal", "Set.S.html#VALequal", "<div class=\"info\">\n<p><code class=\"code\">equal&nbsp;s1&nbsp;s2</code> tests whether the sets <code class=\"code\">s1</code> and <code class=\"code\">s2</code> are\n       equal, that is, contain equal elements.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "equal", "StringLabels.html#VALequal", "<div class=\"info\">\n<p>The equal function for strings.</p>\n\n</div>"],
["String", "String.html", "equal", "String.html#VALequal", "<div class=\"info\">\n<p>The equal function for strings.</p>\n\n</div>"],
["Uchar", "Uchar.html", "equal", "Uchar.html#VALequal", "<div class=\"info\">\n<p><code class=\"code\">equal&nbsp;u&nbsp;u'</code> is <code class=\"code\">u&nbsp;=&nbsp;u'</code>.</p>\n\n</div>"],
["Unit", "Unit.html", "equal", "Unit.html#VALequal", "<div class=\"info\">\n<p><code class=\"code\">equal&nbsp;u1&nbsp;u2</code> is <code class=\"code\"><span class=\"keyword\">true</span></code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "epsilon_float", "Pervasives.html#VALepsilon_float", ""],
["Float", "Float.html", "epsilon", "Float.html#VALepsilon", "<div class=\"info\">\n<p>The difference between <code class=\"code\">1.0</code> and the smallest exactly representable\n    floating-point number greater than <code class=\"code\">1.0</code>.</p>\n\n</div>"],
["Format", "Format.html", "eprintf", "Format.html#VALeprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">fprintf</code> above, but output on <code class=\"code\">err_formatter</code>.</p>\n\n</div>"],
["Printf", "Printf.html", "eprintf", "Printf.html#VALeprintf", "<div class=\"info\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but output on <code class=\"code\">stderr</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "environment", "Unix.html#VALenvironment", "<div class=\"info\">\n<p>Return the process environment, as an array of strings\n    with the format ``variable=value''.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "environment", "UnixLabels.html#VALenvironment", "<div class=\"info\">\n<p>Return the process environment, as an array of strings\n    with the format ``variable=value''.</p>\n\n</div>"],
["Scanf.Scanning", "Scanf.Scanning.html", "end_of_input", "Scanf.Scanning.html#VALend_of_input", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.end_of_input&nbsp;ic</code> tests the end-of-input condition of the given\n    <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p>\n\n</div>"],
["Spacetime", "Spacetime.html", "enabled", "Spacetime.html#VALenabled", "<div class=\"info\">\n<p><code class=\"code\">enabled</code> is <code class=\"code\"><span class=\"keyword\">true</span></code> if the compiler is configured with spacetime and <code class=\"code\"><span class=\"keyword\">false</span></code>\n    otherwise</p>\n\n</div>"],
["Sys", "Sys.html", "enable_runtime_warnings", "Sys.html#VALenable_runtime_warnings", "<div class=\"info\">\n<p>Control whether the OCaml runtime system can emit warnings\n    on stderr.</p>\n\n</div>"],
["Bytes", "Bytes.html", "empty", "Bytes.html#VALempty", "<div class=\"info\">\n<p>A byte sequence of size 0.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "empty", "BytesLabels.html#VALempty", "<div class=\"info\">\n<p>A byte sequence of size 0.</p>\n\n</div>"],
["Map.S", "Map.S.html", "empty", "Map.S.html#VALempty", "<div class=\"info\">\n<p>The empty map.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "empty", "MoreLabels.Map.S.html#VALempty", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "empty", "MoreLabels.Set.S.html#VALempty", ""],
["Seq", "Seq.html", "empty", "Seq.html#VALempty", "<div class=\"info\">\n<p>The empty sequence, containing no elements.</p>\n\n</div>"],
["Set.S", "Set.S.html", "empty", "Set.S.html#VALempty", "<div class=\"info\">\n<p>The empty set.</p>\n\n</div>"],
["Stream", "Stream.html", "empty", "Stream.html#VALempty", "<div class=\"info\">\n<p>Return <code class=\"code\">()</code> if the stream is empty, else raise <a href=\"Stream.html#EXCEPTIONFailure\"><code class=\"code\"><span class=\"constructor\">Stream</span>.<span class=\"constructor\">Failure</span></code></a>.</p>\n\n</div>"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "elements", "MoreLabels.Set.S.html#VALelements", ""],
["Set.S", "Set.S.html", "elements", "Set.S.html#VALelements", "<div class=\"info\">\n<p>Return the list of all elements of the given set.</p>\n\n</div>"],
["Unix", "Unix.html", "dup2", "Unix.html#VALdup2", "<div class=\"info\">\n<p><code class=\"code\">dup2&nbsp;fd1&nbsp;fd2</code> duplicates <code class=\"code\">fd1</code> to <code class=\"code\">fd2</code>, closing <code class=\"code\">fd2</code> if already\n   opened.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "dup2", "UnixLabels.html#VALdup2", "<div class=\"info\">\n<p><code class=\"code\">dup2&nbsp;fd1&nbsp;fd2</code> duplicates <code class=\"code\">fd1</code> to <code class=\"code\">fd2</code>, closing <code class=\"code\">fd2</code> if already\n   opened.</p>\n\n</div>"],
["Obj", "Obj.html", "dup", "Obj.html#VALdup", ""],
["Unix", "Unix.html", "dup", "Unix.html#VALdup", "<div class=\"info\">\n<p>Return a new file descriptor referencing the same file as\n   the given descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "dup", "UnixLabels.html#VALdup", "<div class=\"info\">\n<p>Return a new file descriptor referencing the same file as\n   the given descriptor.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "dummy_table", "CamlinternalOO.html#VALdummy_table", ""],
["Lexing", "Lexing.html", "dummy_pos", "Lexing.html#VALdummy_pos", "<div class=\"info\">\n<p>A value of type <code class=\"code\">position</code>, guaranteed to be different from any\n   valid position.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "dummy_class", "CamlinternalOO.html#VALdummy_class", ""],
["Format", "Format.html", "dprintf", "Format.html#VALdprintf", "<div class=\"info\">\n<p>Same as <a href=\"Format.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Format</span>.fprintf</code></a>, except the formatter is the last argument.</p>\n\n</div>"],
["Obj", "Obj.html", "double_tag", "Obj.html#VALdouble_tag", ""],
["Obj", "Obj.html", "double_field", "Obj.html#VALdouble_field", ""],
["Obj", "Obj.html", "double_array_tag", "Obj.html#VALdouble_array_tag", ""],
["Unix", "Unix.html", "domain_of_sockaddr", "Unix.html#VALdomain_of_sockaddr", "<div class=\"info\">\n<p>Return the socket domain adequate for the given socket address.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "domain_of_sockaddr", "UnixLabels.html#VALdomain_of_sockaddr", "<div class=\"info\">\n<p>Return the socket domain adequate for the given socket address.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "do_at_exit", "Pervasives.html#VALdo_at_exit", ""],
["Complex", "Complex.html", "div", "Complex.html#VALdiv", "<div class=\"info\">\n<p>Division</p>\n\n</div>"],
["Float", "Float.html", "div", "Float.html#VALdiv", "<div class=\"info\">\n<p>Floating-point division.</p>\n\n</div>"],
["Int", "Int.html", "div", "Int.html#VALdiv", "<div class=\"info\">\n<p><code class=\"code\">div&nbsp;x&nbsp;y</code> is the division <code class=\"code\">x&nbsp;/&nbsp;y</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "div", "Int32.html#VALdiv", "<div class=\"info\">\n<p>Integer division.</p>\n\n</div>"],
["Int64", "Int64.html", "div", "Int64.html#VALdiv", "<div class=\"info\">\n<p>Integer division.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "div", "Nativeint.html#VALdiv", "<div class=\"info\">\n<p>Integer division.</p>\n\n</div>"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "disjoint", "MoreLabels.Set.S.html#VALdisjoint", ""],
["Set.S", "Set.S.html", "disjoint", "Set.S.html#VALdisjoint", "<div class=\"info\">\n<p>Test if two sets are disjoint.</p>\n\n</div>"],
["Filename", "Filename.html", "dirname", "Filename.html#VALdirname", "<div class=\"info\">\n<p>See <a href=\"Filename.html#VALbasename\"><code class=\"code\"><span class=\"constructor\">Filename</span>.basename</code></a>.</p>\n\n</div>"],
["Filename", "Filename.html", "dir_sep", "Filename.html#VALdir_sep", "<div class=\"info\">\n<p>The directory separator (e.g.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "dims", "Bigarray.Genarray.html#VALdims", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.dims&nbsp;a</code> returns all dimensions of the Bigarray <code class=\"code\">a</code>,\n     as an array of integers of length <code class=\"code\"><span class=\"constructor\">Genarray</span>.num_dims&nbsp;a</code>.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "dim3", "Bigarray.Array3.html#VALdim3", "<div class=\"info\">\n<p>Return the third dimension of the given three-dimensional Bigarray.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "dim2", "Bigarray.Array2.html#VALdim2", "<div class=\"info\">\n<p>Return the second dimension of the given two-dimensional Bigarray.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "dim2", "Bigarray.Array3.html#VALdim2", "<div class=\"info\">\n<p>Return the second dimension of the given three-dimensional Bigarray.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "dim1", "Bigarray.Array2.html#VALdim1", "<div class=\"info\">\n<p>Return the first dimension of the given two-dimensional Bigarray.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "dim1", "Bigarray.Array3.html#VALdim1", "<div class=\"info\">\n<p>Return the first dimension of the given three-dimensional Bigarray.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "dim", "Bigarray.Array1.html#VALdim", "<div class=\"info\">\n<p>Return the size (dimension) of the given one-dimensional\n     Bigarray.</p>\n\n</div>"],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "diff", "MoreLabels.Set.S.html#VALdiff", ""],
["Set.S", "Set.S.html", "diff", "Set.S.html#VALdiff", "<div class=\"info\">\n<p>Set difference: <code class=\"code\">diff&nbsp;s1&nbsp;s2</code> contains the elements of <code class=\"code\">s1</code>\n       that are not in <code class=\"code\">s2</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "descr_of_out_channel", "Unix.html#VALdescr_of_out_channel", "<div class=\"info\">\n<p>Return the descriptor corresponding to an output channel.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "descr_of_out_channel", "UnixLabels.html#VALdescr_of_out_channel", "<div class=\"info\">\n<p>Return the descriptor corresponding to an output channel.</p>\n\n</div>"],
["Unix", "Unix.html", "descr_of_in_channel", "Unix.html#VALdescr_of_in_channel", "<div class=\"info\">\n<p>Return the descriptor corresponding to an input channel.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "descr_of_in_channel", "UnixLabels.html#VALdescr_of_in_channel", "<div class=\"info\">\n<p>Return the descriptor corresponding to an input channel.</p>\n\n</div>"],
["Gc", "Gc.html", "delete_alarm", "Gc.html#VALdelete_alarm", "<div class=\"info\">\n<p><code class=\"code\">delete_alarm&nbsp;a</code> will stop the calls to the function associated\n   to <code class=\"code\">a</code>.</p>\n\n</div>"],
["Thread", "Thread.html", "delay", "Thread.html#VALdelay", "<div class=\"info\">\n<p><code class=\"code\">delay&nbsp;d</code> suspends the execution of the calling thread for\n   <code class=\"code\">d</code> seconds.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "decr", "Pervasives.html#VALdecr", ""],
["Marshal", "Marshal.html", "data_size", "Marshal.html#VALdata_size", "<div class=\"info\">\n<p>See <a href=\"Marshal.html#VALheader_size\"><code class=\"code\"><span class=\"constructor\">Marshal</span>.header_size</code></a>.</p>\n\n</div>"],
["Sys", "Sys.html", "cygwin", "Sys.html#VALcygwin", "<div class=\"info\">\n<p>True if <code class=\"code\"><span class=\"constructor\">Sys</span>.os_type&nbsp;=&nbsp;<span class=\"string\">\"Cygwin\"</span></code>.</p>\n\n</div>"],
["Obj", "Obj.html", "custom_tag", "Obj.html#VALcustom_tag", ""],
["Filename", "Filename.html", "current_dir_name", "Filename.html#VALcurrent_dir_name", "<div class=\"info\">\n<p>The conventional name for the current directory (e.g.</p>\n\n</div>"],
["Arg", "Arg.html", "current", "Arg.html#VALcurrent", "<div class=\"info\">\n<p>Position (in <a href=\"Sys.html#VALargv\"><code class=\"code\"><span class=\"constructor\">Sys</span>.argv</code></a>) of the argument being processed.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "create_table", "CamlinternalOO.html#VALcreate_table", ""],
["Unix", "Unix.html", "create_process_env", "Unix.html#VALcreate_process_env", "<div class=\"info\">\n<p><code class=\"code\">create_process_env&nbsp;prog&nbsp;args&nbsp;env&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code>\n   works as <a href=\"Unix.html#VALcreate_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.create_process</code></a>, except that the extra argument\n   <code class=\"code\">env</code> specifies the environment passed to the program.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "create_process_env", "UnixLabels.html#VALcreate_process_env", "<div class=\"info\">\n<p><code class=\"code\">create_process_env&nbsp;prog&nbsp;args&nbsp;env&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code>\n   works as <a href=\"UnixLabels.html#VALcreate_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.create_process</code></a>, except that the extra argument\n   <code class=\"code\">env</code> specifies the environment passed to the program.</p>\n\n</div>"],
["Unix", "Unix.html", "create_process", "Unix.html#VALcreate_process", "<div class=\"info\">\n<p><code class=\"code\">create_process&nbsp;prog&nbsp;args&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code>\n   forks a new process that executes the program\n   in file <code class=\"code\">prog</code>, with arguments <code class=\"code\">args</code>.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "create_process", "UnixLabels.html#VALcreate_process", "<div class=\"info\">\n<p><code class=\"code\">create_process&nbsp;prog&nbsp;args&nbsp;new_stdin&nbsp;new_stdout&nbsp;new_stderr</code>\n   forks a new process that executes the program\n   in file <code class=\"code\">prog</code>, with arguments <code class=\"code\">args</code>.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "create_object_opt", "CamlinternalOO.html#VALcreate_object_opt", ""],
["CamlinternalOO", "CamlinternalOO.html", "create_object_and_run_initializers", "CamlinternalOO.html#VALcreate_object_and_run_initializers", ""],
["CamlinternalOO", "CamlinternalOO.html", "create_object", "CamlinternalOO.html#VALcreate_object", ""],
["Array", "Array.html", "create_matrix", "Array.html#VALcreate_matrix", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["ArrayLabels", "ArrayLabels.html", "create_matrix", "ArrayLabels.html#VALcreate_matrix", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Array", "Array.html", "create_float", "Array.html#VALcreate_float", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.create_float&nbsp;n</code> returns a fresh float array of length <code class=\"code\">n</code>,\n    with uninitialized data.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "create_float", "ArrayLabels.html#VALcreate_float", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.create_float&nbsp;n</code> returns a fresh float array of length <code class=\"code\">n</code>,\n    with uninitialized data.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "create_char_set", "CamlinternalFormat.html#VALcreate_char_set", ""],
["Gc", "Gc.html", "create_alarm", "Gc.html#VALcreate_alarm", "<div class=\"info\">\n<p><code class=\"code\">create_alarm&nbsp;f</code> will arrange for <code class=\"code\">f</code> to be called at the end of each\n   major GC cycle, starting with the current cycle or the next one.</p>\n\n</div>"],
["Array", "Array.html", "create", "Array.html#VALcreate", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["ArrayLabels", "ArrayLabels.html", "create", "ArrayLabels.html#VALcreate", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "create", "Bigarray.Genarray.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.create&nbsp;kind&nbsp;layout&nbsp;dimensions</code> returns a new Bigarray\n     whose element kind is determined by the parameter <code class=\"code\">kind</code> (one of\n     <code class=\"code\">float32</code>, <code class=\"code\">float64</code>, <code class=\"code\">int8_signed</code>, etc) and whose layout is\n     determined by the parameter <code class=\"code\">layout</code> (one of <code class=\"code\">c_layout</code> or\n     <code class=\"code\">fortran_layout</code>).</p>\n\n</div>"],
["Bigarray.Array0", "Bigarray.Array0.html", "create", "Bigarray.Array0.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array0</span>.create&nbsp;kind&nbsp;layout</code> returns a new Bigarray of zero dimension.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "create", "Bigarray.Array1.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array1</span>.create&nbsp;kind&nbsp;layout&nbsp;dim</code> returns a new Bigarray of\n     one dimension, whose size is <code class=\"code\">dim</code>.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "create", "Bigarray.Array2.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array2</span>.create&nbsp;kind&nbsp;layout&nbsp;dim1&nbsp;dim2</code> returns a new Bigarray of\n     two dimension, whose size is <code class=\"code\">dim1</code> in the first dimension\n     and <code class=\"code\">dim2</code> in the second dimension.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "create", "Bigarray.Array3.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array3</span>.create&nbsp;kind&nbsp;layout&nbsp;dim1&nbsp;dim2&nbsp;dim3</code> returns a new Bigarray of\n     three dimension, whose size is <code class=\"code\">dim1</code> in the first dimension,\n     <code class=\"code\">dim2</code> in the second dimension, and <code class=\"code\">dim3</code> in the third.</p>\n\n</div>"],
["Buffer", "Buffer.html", "create", "Buffer.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\">create&nbsp;n</code> returns a fresh buffer, initially empty.</p>\n\n</div>"],
["Bytes", "Bytes.html", "create", "Bytes.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\">create&nbsp;n</code> returns a new byte sequence of length <code class=\"code\">n</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "create", "BytesLabels.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\">create&nbsp;n</code> returns a new byte sequence of length <code class=\"code\">n</code>.</p>\n\n</div>"],
["Condition", "Condition.html", "create", "Condition.html#VALcreate", "<div class=\"info\">\n<p>Return a new condition variable.</p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "create", "Ephemeron.K1.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.create&nbsp;()</code> creates an ephemeron with one key.</p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "create", "Ephemeron.K2.html#VALcreate", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.create</code></a></p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "create", "Ephemeron.Kn.html#VALcreate", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcreate\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.create</code></a></p>\n\n</div>"],
["Float.Array", "Float.Array.html", "create", "Float.Array.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\">create&nbsp;n</code> returns a fresh floatarray of length <code class=\"code\">n</code>,\n      with uninitialized data.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "create", "Float.ArrayLabels.html#VALcreate", ""],
["Hashtbl", "Hashtbl.html", "create", "Hashtbl.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.create&nbsp;n</code> creates a new, empty hash table, with\n   initial size <code class=\"code\">n</code>.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "create", "Hashtbl.S.html#VALcreate", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "create", "Hashtbl.SeededS.html#VALcreate", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "create", "MoreLabels.Hashtbl.html#VALcreate", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "create", "MoreLabels.Hashtbl.S.html#VALcreate", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "create", "MoreLabels.Hashtbl.SeededS.html#VALcreate", ""],
["Mutex", "Mutex.html", "create", "Mutex.html#VALcreate", "<div class=\"info\">\n<p>Return a new mutex.</p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "create", "Obj.Ephemeron.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\">create&nbsp;n</code> returns an ephemeron with <code class=\"code\">n</code> keys.</p>\n\n</div>"],
["Queue", "Queue.html", "create", "Queue.html#VALcreate", "<div class=\"info\">\n<p>Return a new queue, initially empty.</p>\n\n</div>"],
["Spacetime.Series", "Spacetime.Series.html", "create", "Spacetime.Series.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\">create&nbsp;~path</code> creates a series file at <code class=\"code\">path</code>.</p>\n\n</div>"],
["Stack", "Stack.html", "create", "Stack.html#VALcreate", "<div class=\"info\">\n<p>Return a new stack, initially empty.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "create", "StringLabels.html#VALcreate", "<div class=\"info\">\n<span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.create&nbsp;n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>.</p>\n\n</span></div>"],
["String", "String.html", "create", "String.html#VALcreate", "<div class=\"info\">\n<span class=\"deprecated\"><p><code class=\"code\"><span class=\"constructor\">String</span>.create&nbsp;n</code> returns a fresh byte sequence of length <code class=\"code\">n</code>.</p>\n\n</span></div>"],
["Weak", "Weak.html", "create", "Weak.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.create&nbsp;n</code> returns a new weak array of length <code class=\"code\">n</code>.</p>\n\n</div>"],
["Weak.S", "Weak.S.html", "create", "Weak.S.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\">create&nbsp;n</code> creates a new empty weak hash set, of initial\n        size <code class=\"code\">n</code>.</p>\n\n</div>"],
["Thread", "Thread.html", "create", "Thread.html#VALcreate", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Thread</span>.create&nbsp;funct&nbsp;arg</code> creates a new thread of control,\n   in which the function application <code class=\"code\">funct&nbsp;arg</code>\n   is executed concurrently with the other threads of the program.</p>\n\n</div>"],
["Gc", "Gc.html", "counters", "Gc.html#VALcounters", "<div class=\"info\">\n<p>Return <code class=\"code\">(minor_words,&nbsp;promoted_words,&nbsp;major_words)</code>.</p>\n\n</div>"],
["Stream", "Stream.html", "count", "Stream.html#VALcount", "<div class=\"info\">\n<p>Return the current count of the stream elements, i.e.</p>\n\n</div>"],
["Weak.S", "Weak.S.html", "count", "Weak.S.html#VALcount", "<div class=\"info\">\n<p>Count the number of elements in the table.</p>\n\n</div>"],
["Float", "Float.html", "cosh", "Float.html#VALcosh", "<div class=\"info\">\n<p>Hyperbolic cosine.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "cosh", "Pervasives.html#VALcosh", ""],
["Float", "Float.html", "cos", "Float.html#VALcos", "<div class=\"info\">\n<p>Cosine.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "cos", "Pervasives.html#VALcos", ""],
["Pervasives", "Pervasives.html", "copysign", "Pervasives.html#VALcopysign", ""],
["Float", "Float.html", "copy_sign", "Float.html#VALcopy_sign", "<div class=\"info\">\n<p><code class=\"code\">copy_sign&nbsp;x&nbsp;y</code> returns a float whose absolute value is that of <code class=\"code\">x</code>\n    and whose sign is that of <code class=\"code\">y</code>.</p>\n\n</div>"],
["Array", "Array.html", "copy", "Array.html#VALcopy", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.copy&nbsp;a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh array\n   containing the same elements as <code class=\"code\">a</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "copy", "ArrayLabels.html#VALcopy", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.copy&nbsp;a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh array\n   containing the same elements as <code class=\"code\">a</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "copy", "Bytes.html#VALcopy", "<div class=\"info\">\n<p>Return a new byte sequence that contains the same bytes as the\n    argument.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "copy", "BytesLabels.html#VALcopy", "<div class=\"info\">\n<p>Return a new byte sequence that contains the same bytes as the\n    argument.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "copy", "CamlinternalOO.html#VALcopy", ""],
["Float.Array", "Float.Array.html", "copy", "Float.Array.html#VALcopy", "<div class=\"info\">\n<p><code class=\"code\">copy&nbsp;a</code> returns a copy of <code class=\"code\">a</code>, that is, a fresh floatarray\n      containing the same elements as <code class=\"code\">a</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "copy", "Float.ArrayLabels.html#VALcopy", ""],
["Hashtbl", "Hashtbl.html", "copy", "Hashtbl.html#VALcopy", "<div class=\"info\">\n<p>Return a copy of the given hashtable.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "copy", "Hashtbl.S.html#VALcopy", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "copy", "Hashtbl.SeededS.html#VALcopy", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "copy", "MoreLabels.Hashtbl.html#VALcopy", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "copy", "MoreLabels.Hashtbl.S.html#VALcopy", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "copy", "MoreLabels.Hashtbl.SeededS.html#VALcopy", ""],
["Oo", "Oo.html", "copy", "Oo.html#VALcopy", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Oo</span>.copy&nbsp;o</code> returns a copy of object <code class=\"code\">o</code>, that is a fresh\n   object with the same methods and instance variables as <code class=\"code\">o</code>.</p>\n\n</div>"],
["Queue", "Queue.html", "copy", "Queue.html#VALcopy", "<div class=\"info\">\n<p>Return a copy of the given queue.</p>\n\n</div>"],
["Random.State", "Random.State.html", "copy", "Random.State.html#VALcopy", "<div class=\"info\">\n<p>Return a copy of the given state.</p>\n\n</div>"],
["Stack", "Stack.html", "copy", "Stack.html#VALcopy", "<div class=\"info\">\n<p>Return a copy of the given stack.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "copy", "StringLabels.html#VALcopy", "<div class=\"info\">\n<p>Return a copy of the given string.</p>\n\n</div>"],
["String", "String.html", "copy", "String.html#VALcopy", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the given string.</p>\n\n</span></div>"],
["Printexc", "Printexc.html", "convert_raw_backtrace_slot", "Printexc.html#VALconvert_raw_backtrace_slot", "<div class=\"info\">\n<p>Extracts the user-friendly <code class=\"code\">backtrace_slot</code> from a low-level\n    <code class=\"code\">raw_backtrace_slot</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "contents", "Buffer.html#VALcontents", "<div class=\"info\">\n<p>Return a copy of the current contents of the buffer.</p>\n\n</div>"],
["Bytes", "Bytes.html", "contains_from", "Bytes.html#VALcontains_from", "<div class=\"info\">\n<p><code class=\"code\">contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after\n    position <code class=\"code\">start</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "contains_from", "BytesLabels.html#VALcontains_from", "<div class=\"info\">\n<p><code class=\"code\">contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code> after\n    position <code class=\"code\">start</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "contains_from", "StringLabels.html#VALcontains_from", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>.</p>\n\n</div>"],
["String", "String.html", "contains_from", "String.html#VALcontains_from", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains_from&nbsp;s&nbsp;start&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in <code class=\"code\">s</code> after position <code class=\"code\">start</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "contains", "Bytes.html#VALcontains", "<div class=\"info\">\n<p><code class=\"code\">contains&nbsp;s&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "contains", "BytesLabels.html#VALcontains", "<div class=\"info\">\n<p><code class=\"code\">contains&nbsp;s&nbsp;c</code> tests if byte <code class=\"code\">c</code> appears in <code class=\"code\">s</code>.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "contains", "StringLabels.html#VALcontains", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in the string <code class=\"code\">s</code>.</p>\n\n</div>"],
["String", "String.html", "contains", "String.html#VALcontains", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.contains&nbsp;s&nbsp;c</code> tests if character <code class=\"code\">c</code>\n   appears in the string <code class=\"code\">s</code>.</p>\n\n</div>"],
["Fun", "Fun.html", "const", "Fun.html#VALconst", "<div class=\"info\">\n<p><code class=\"code\">const&nbsp;c</code> is a function that always returns the value <code class=\"code\">c</code>.</p>\n\n</div>"],
["List", "List.html", "cons", "List.html#VALcons", "<div class=\"info\">\n<p><code class=\"code\">cons&nbsp;x&nbsp;xs</code> is <code class=\"code\">x&nbsp;::&nbsp;xs</code></p>\n\n</div>"],
["ListLabels", "ListLabels.html", "cons", "ListLabels.html#VALcons", "<div class=\"info\">\n<p><code class=\"code\">cons&nbsp;x&nbsp;xs</code> is <code class=\"code\">x&nbsp;::&nbsp;xs</code></p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "connect", "ThreadUnix.html#VALconnect", ""],
["Unix", "Unix.html", "connect", "Unix.html#VALconnect", "<div class=\"info\">\n<p>Connect a socket to an address.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "connect", "UnixLabels.html#VALconnect", "<div class=\"info\">\n<p>Connect a socket to an address.</p>\n\n</div>"],
["Complex", "Complex.html", "conj", "Complex.html#VALconj", "<div class=\"info\">\n<p>Conjugate: given the complex <code class=\"code\">x&nbsp;+&nbsp;i.y</code>, returns <code class=\"code\">x&nbsp;-&nbsp;i.y</code>.</p>\n\n</div>"],
["CamlinternalFormatBasics", "CamlinternalFormatBasics.html", "concat_fmtty", "CamlinternalFormatBasics.html#VALconcat_fmtty", ""],
["CamlinternalFormatBasics", "CamlinternalFormatBasics.html", "concat_fmt", "CamlinternalFormatBasics.html#VALconcat_fmt", ""],
["Array", "Array.html", "concat", "Array.html#VALconcat", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALappend\"><code class=\"code\"><span class=\"constructor\">Array</span>.append</code></a>, but concatenates a list of arrays.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "concat", "ArrayLabels.html#VALconcat", "<div class=\"info\">\n<p>Same as <a href=\"Array.html#VALappend\"><code class=\"code\"><span class=\"constructor\">Array</span>.append</code></a>, but concatenates a list of arrays.</p>\n\n</div>"],
["Bytes", "Bytes.html", "concat", "Bytes.html#VALconcat", "<div class=\"info\">\n<p><code class=\"code\">concat&nbsp;sep&nbsp;sl</code> concatenates the list of byte sequences <code class=\"code\">sl</code>,\n    inserting the separator byte sequence <code class=\"code\">sep</code> between each, and\n    returns the result as a new byte sequence.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "concat", "BytesLabels.html#VALconcat", "<div class=\"info\">\n<p><code class=\"code\">concat&nbsp;sep&nbsp;sl</code> concatenates the list of byte sequences <code class=\"code\">sl</code>,\n    inserting the separator byte sequence <code class=\"code\">sep</code> between each, and\n    returns the result as a new byte sequence.</p>\n\n</div>"],
["Filename", "Filename.html", "concat", "Filename.html#VALconcat", "<div class=\"info\">\n<p><code class=\"code\">concat&nbsp;dir&nbsp;file</code> returns a file name that designates file\n   <code class=\"code\">file</code> in directory <code class=\"code\">dir</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "concat", "Float.Array.html#VALconcat", "<div class=\"info\">\n<p>Same as <a href=\"Float.Array.html#VALappend\"><code class=\"code\"><span class=\"constructor\">Float</span>.<span class=\"constructor\">Array</span>.append</code></a>, but concatenates a list of floatarrays.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "concat", "Float.ArrayLabels.html#VALconcat", ""],
["List", "List.html", "concat", "List.html#VALconcat", "<div class=\"info\">\n<p>Concatenate a list of lists.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "concat", "ListLabels.html#VALconcat", "<div class=\"info\">\n<p>Concatenate a list of lists.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "concat", "StringLabels.html#VALconcat", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;sep&nbsp;sl</code> concatenates the list of strings <code class=\"code\">sl</code>,\n   inserting the separator string <code class=\"code\">sep</code> between each.</p>\n\n</div>"],
["String", "String.html", "concat", "String.html#VALconcat", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.concat&nbsp;sep&nbsp;sl</code> concatenates the list of strings <code class=\"code\">sl</code>,\n    inserting the separator string <code class=\"code\">sep</code> between each.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "complex64", "Bigarray.html#VALcomplex64", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "complex32", "Bigarray.html#VALcomplex32", "<div class=\"info\">\n<p>See <a href=\"Bigarray.html#VALchar\"><code class=\"code\"><span class=\"constructor\">Bigarray</span>.char</code></a>.</p>\n\n</div>"],
["List", "List.html", "compare_lengths", "List.html#VALcompare_lengths", "<div class=\"info\">\n<p>Compare the lengths of two lists.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "compare_lengths", "ListLabels.html#VALcompare_lengths", "<div class=\"info\">\n<p>Compare the lengths of two lists.</p>\n\n</div>"],
["List", "List.html", "compare_length_with", "List.html#VALcompare_length_with", "<div class=\"info\">\n<p>Compare the length of a list to an integer.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "compare_length_with", "ListLabels.html#VALcompare_length_with", "<div class=\"info\">\n<p>Compare the length of a list to an integer.</p>\n\n</div>"],
["Bool", "Bool.html", "compare", "Bool.html#VALcompare", "<div class=\"info\">\n<p><code class=\"code\">compare&nbsp;b0&nbsp;b1</code> is a total order on boolean values.</p>\n\n</div>"],
["Bytes", "Bytes.html", "compare", "Bytes.html#VALcompare", "<div class=\"info\">\n<p>The comparison function for byte sequences, with the same\n    specification as <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "compare", "BytesLabels.html#VALcompare", "<div class=\"info\">\n<p>The comparison function for byte sequences, with the same\n    specification as <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n\n</div>"],
["Char", "Char.html", "compare", "Char.html#VALcompare", "<div class=\"info\">\n<p>The comparison function for characters, with the same specification as\n    <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n\n</div>"],
["Digest", "Digest.html", "compare", "Digest.html#VALcompare", "<div class=\"info\">\n<p>The comparison function for 16-character digest, with the same\n    specification as <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a> and the implementation\n    shared with <a href=\"String.html#VALcompare\"><code class=\"code\"><span class=\"constructor\">String</span>.compare</code></a>.</p>\n\n</div>"],
["Float", "Float.html", "compare", "Float.html#VALcompare", "<div class=\"info\">\n<p><code class=\"code\">compare&nbsp;x&nbsp;y</code> returns <code class=\"code\">0</code> if <code class=\"code\">x</code> is equal to <code class=\"code\">y</code>, a negative integer if <code class=\"code\">x</code>\n    is less than <code class=\"code\">y</code>, and a positive integer if <code class=\"code\">x</code> is greater than\n    <code class=\"code\">y</code>.</p>\n\n</div>"],
["Int", "Int.html", "compare", "Int.html#VALcompare", "<div class=\"info\">\n<p><code class=\"code\">compare&nbsp;x&nbsp;y</code> is <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a><code class=\"code\">&nbsp;x&nbsp;y</code> but more efficient.</p>\n\n</div>"],
["Int32", "Int32.html", "compare", "Int32.html#VALcompare", "<div class=\"info\">\n<p>The comparison function for 32-bit integers, with the same specification as\n    <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n\n</div>"],
["Int64", "Int64.html", "compare", "Int64.html#VALcompare", "<div class=\"info\">\n<p>The comparison function for 64-bit integers, with the same specification as\n    <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "compare", "Map.S.html#VALcompare", "<div class=\"info\">\n<p>Total ordering between maps.</p>\n\n</div>"],
["Map.OrderedType", "Map.OrderedType.html", "compare", "Map.OrderedType.html#VALcompare", "<div class=\"info\">\n<p>A total ordering function over the keys.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "compare", "MoreLabels.Map.S.html#VALcompare", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "compare", "MoreLabels.Set.S.html#VALcompare", ""],
["Set.OrderedType", "Set.OrderedType.html", "compare", "Set.OrderedType.html#VALcompare", "<div class=\"info\">\n<p>A total ordering function over the set elements.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "compare", "Nativeint.html#VALcompare", "<div class=\"info\">\n<p>The comparison function for native integers, with the same specification as\n    <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n\n</div>"],
["Option", "Option.html", "compare", "Option.html#VALcompare", "<div class=\"info\">\n<p><code class=\"code\">compare&nbsp;cmp&nbsp;o0&nbsp;o1</code> is a total order on options using <code class=\"code\">cmp</code> to compare\n    values wrapped by <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;_</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "compare", "Pervasives.html#VALcompare", ""],
["Result", "Result.html", "compare", "Result.html#VALcompare", "<div class=\"info\">\n<p><code class=\"code\">compare&nbsp;~ok&nbsp;~error&nbsp;r0&nbsp;r1</code> totally orders <code class=\"code\">r0</code> and <code class=\"code\">r1</code> using <code class=\"code\">ok</code> and\n    <code class=\"code\">error</code> to respectively compare values wrapped by <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;_&nbsp;</code> and <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;_</code>.</p>\n\n</div>"],
["Set.S", "Set.S.html", "compare", "Set.S.html#VALcompare", "<div class=\"info\">\n<p>Total ordering between sets.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "compare", "StringLabels.html#VALcompare", "<div class=\"info\">\n<p>The comparison function for strings, with the same specification as\n    <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n\n</div>"],
["String", "String.html", "compare", "String.html#VALcompare", "<div class=\"info\">\n<p>The comparison function for strings, with the same specification as\n    <a href=\"Stdlib.html#VALcompare\"><code class=\"code\">compare</code></a>.</p>\n\n</div>"],
["Uchar", "Uchar.html", "compare", "Uchar.html#VALcompare", "<div class=\"info\">\n<p><code class=\"code\">compare&nbsp;u&nbsp;u'</code> is <code class=\"code\"><span class=\"constructor\">Stdlib</span>.compare&nbsp;u&nbsp;u'</code>.</p>\n\n</div>"],
["Unit", "Unit.html", "compare", "Unit.html#VALcompare", "<div class=\"info\">\n<p><code class=\"code\">compare&nbsp;u1&nbsp;u2</code> is <code class=\"code\">0</code>.</p>\n\n</div>"],
["Gc", "Gc.html", "compact", "Gc.html#VALcompact", "<div class=\"info\">\n<p>Perform a full major collection and compact the heap.</p>\n\n</div>"],
["Sys", "Sys.html", "command", "Sys.html#VALcommand", "<div class=\"info\">\n<p>Execute the given shell command and return its exit code.</p>\n\n</div>"],
["List", "List.html", "combine", "List.html#VALcombine", "<div class=\"info\">\n<p>Transform a pair of lists into a list of pairs:\n   <code class=\"code\">combine&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "combine", "ListLabels.html#VALcombine", "<div class=\"info\">\n<p>Transform a pair of lists into a list of pairs:\n   <code class=\"code\">combine&nbsp;[a1;&nbsp;...;&nbsp;an]&nbsp;[b1;&nbsp;...;&nbsp;bn]</code> is\n   <code class=\"code\">[(a1,b1);&nbsp;...;&nbsp;(an,bn)]</code>.</p>\n\n</div>"],
["Char", "Char.html", "code", "Char.html#VALcode", "<div class=\"info\">\n<p>Return the ASCII code of the argument.</p>\n\n</div>"],
["Obj", "Obj.html", "closure_tag", "Obj.html#VALclosure_tag", ""],
["Unix", "Unix.html", "closedir", "Unix.html#VALclosedir", "<div class=\"info\">\n<p>Close a directory descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "closedir", "UnixLabels.html#VALclosedir", "<div class=\"info\">\n<p>Close a directory descriptor.</p>\n\n</div>"],
["Format", "Format.html", "close_tbox", "Format.html#VALclose_tbox", "<div class=\"info\">\n<p>Closes the most recently opened tabulation box.</p>\n\n</div>"],
["Format", "Format.html", "close_tag", "Format.html#VALclose_tag", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Format", "Format.html", "close_stag", "Format.html#VALclose_stag", "<div class=\"info\">\n<p><code class=\"code\">pp_close_stag&nbsp;ppf&nbsp;()</code> closes the most recently opened semantic tag <code class=\"code\">t</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "close_process_out", "Unix.html#VALclose_process_out", "<div class=\"info\">\n<p>Close channels opened by <a href=\"Unix.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_out</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "close_process_out", "UnixLabels.html#VALclose_process_out", "<div class=\"info\">\n<p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process_out\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_out</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n\n</div>"],
["Unix", "Unix.html", "close_process_in", "Unix.html#VALclose_process_in", "<div class=\"info\">\n<p>Close channels opened by <a href=\"Unix.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_in</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "close_process_in", "UnixLabels.html#VALclose_process_in", "<div class=\"info\">\n<p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process_in\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_in</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n\n</div>"],
["Unix", "Unix.html", "close_process_full", "Unix.html#VALclose_process_full", "<div class=\"info\">\n<p>Close channels opened by <a href=\"Unix.html#VALopen_process_full\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process_full</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "close_process_full", "UnixLabels.html#VALclose_process_full", "<div class=\"info\">\n<p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process_full\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process_full</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n\n</div>"],
["Unix", "Unix.html", "close_process", "Unix.html#VALclose_process", "<div class=\"info\">\n<p>Close channels opened by <a href=\"Unix.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">Unix</span>.open_process</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "close_process", "UnixLabels.html#VALclose_process", "<div class=\"info\">\n<p>Close channels opened by <a href=\"UnixLabels.html#VALopen_process\"><code class=\"code\"><span class=\"constructor\">UnixLabels</span>.open_process</code></a>,\n   wait for the associated command to terminate,\n   and return its termination status.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "close_out_noerr", "Pervasives.html#VALclose_out_noerr", ""],
["Pervasives", "Pervasives.html", "close_out", "Pervasives.html#VALclose_out", ""],
["Pervasives", "Pervasives.html", "close_in_noerr", "Pervasives.html#VALclose_in_noerr", ""],
["Pervasives", "Pervasives.html", "close_in", "Pervasives.html#VALclose_in", ""],
["Scanf.Scanning", "Scanf.Scanning.html", "close_in", "Scanf.Scanning.html#VALclose_in", "<div class=\"info\">\n<p>Closes the <a href=\"Stdlib.html#TYPEin_channel\"><code class=\"code\">in_channel</code></a> associated with the given\n  <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p>\n\n</div>"],
["Format", "Format.html", "close_box", "Format.html#VALclose_box", "<div class=\"info\">\n<p>Closes the most recently open pretty-printing box.</p>\n\n</div>"],
["Unix", "Unix.html", "close", "Unix.html#VALclose", "<div class=\"info\">\n<p>Close a file descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "close", "UnixLabels.html#VALclose", "<div class=\"info\">\n<p>Close a file descriptor.</p>\n\n</div>"],
["Format", "Format.html", "clear_symbolic_output_buffer", "Format.html#VALclear_symbolic_output_buffer", "<div class=\"info\">\n<p><code class=\"code\">clear_symbolic_output_buffer&nbsp;sob</code> resets buffer <code class=\"code\">sob</code>.</p>\n\n</div>"],
["Parsing", "Parsing.html", "clear_parser", "Parsing.html#VALclear_parser", "<div class=\"info\">\n<p>Empty the parser stack.</p>\n\n</div>"],
["Unix", "Unix.html", "clear_nonblock", "Unix.html#VALclear_nonblock", "<div class=\"info\">\n<p>Clear the ``non-blocking'' flag on the given descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "clear_nonblock", "UnixLabels.html#VALclear_nonblock", "<div class=\"info\">\n<p>Clear the ``non-blocking'' flag on the given descriptor.</p>\n\n</div>"],
["Unix", "Unix.html", "clear_close_on_exec", "Unix.html#VALclear_close_on_exec", "<div class=\"info\">\n<p>Clear the ``close-on-exec'' flag on the given descriptor.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "clear_close_on_exec", "UnixLabels.html#VALclear_close_on_exec", "<div class=\"info\">\n<p>Clear the ``close-on-exec'' flag on the given descriptor.</p>\n\n</div>"],
["Buffer", "Buffer.html", "clear", "Buffer.html#VALclear", "<div class=\"info\">\n<p>Empty the buffer.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "clear", "Hashtbl.html#VALclear", "<div class=\"info\">\n<p>Empty a hash table.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "clear", "Hashtbl.S.html#VALclear", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "clear", "Hashtbl.SeededS.html#VALclear", ""],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "clear", "MoreLabels.Hashtbl.html#VALclear", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "clear", "MoreLabels.Hashtbl.S.html#VALclear", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "clear", "MoreLabels.Hashtbl.SeededS.html#VALclear", ""],
["Queue", "Queue.html", "clear", "Queue.html#VALclear", "<div class=\"info\">\n<p>Discard all elements from a queue.</p>\n\n</div>"],
["Stack", "Stack.html", "clear", "Stack.html#VALclear", "<div class=\"info\">\n<p>Discard all elements from a stack.</p>\n\n</div>"],
["Weak.S", "Weak.S.html", "clear", "Weak.S.html#VALclear", "<div class=\"info\">\n<p>Remove all elements from the table.</p>\n\n</div>"],
["Ephemeron.S", "Ephemeron.S.html", "clean", "Ephemeron.S.html#VALclean", "<div class=\"info\">\n<p>remove all dead bindings.</p>\n\n</div>"],
["Ephemeron.SeededS", "Ephemeron.SeededS.html", "clean", "Ephemeron.SeededS.html#VALclean", "<div class=\"info\">\n<p>remove all dead bindings.</p>\n\n</div>"],
["Float", "Float.html", "classify_float", "Float.html#VALclassify_float", "<div class=\"info\">\n<p>Return the class of the given floating-point number:\n    normal, subnormal, zero, infinite, or not a number.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "classify_float", "Pervasives.html#VALclassify_float", ""],
["Unix", "Unix.html", "chroot", "Unix.html#VALchroot", "<div class=\"info\">\n<p>Change the process root directory.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "chroot", "UnixLabels.html#VALchroot", "<div class=\"info\">\n<p>Change the process root directory.</p>\n\n</div>"],
["Char", "Char.html", "chr", "Char.html#VALchr", "<div class=\"info\">\n<p>Return the character with the given ASCII code.</p>\n\n</div>"],
["Unix", "Unix.html", "chown", "Unix.html#VALchown", "<div class=\"info\">\n<p>Change the owner uid and owner gid of the named file.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "chown", "UnixLabels.html#VALchown", "<div class=\"info\">\n<p>Change the owner uid and owner gid of the named file.</p>\n\n</div>"],
["Filename", "Filename.html", "chop_suffix_opt", "Filename.html#VALchop_suffix_opt", "<div class=\"info\">\n<p><code class=\"code\">chop_suffix_opt&nbsp;~suffix&nbsp;filename</code> removes the suffix from\n    the <code class=\"code\">filename</code> if possible, or returns <code class=\"code\"><span class=\"constructor\">None</span></code> if the\n    filename does not end with the suffix.</p>\n\n</div>"],
["Filename", "Filename.html", "chop_suffix", "Filename.html#VALchop_suffix", "<div class=\"info\">\n<p><code class=\"code\">chop_suffix&nbsp;name&nbsp;suff</code> removes the suffix <code class=\"code\">suff</code> from\n   the filename <code class=\"code\">name</code>.</p>\n\n</div>"],
["Filename", "Filename.html", "chop_extension", "Filename.html#VALchop_extension", "<div class=\"info\">\n<p>Same as <a href=\"Filename.html#VALremove_extension\"><code class=\"code\"><span class=\"constructor\">Filename</span>.remove_extension</code></a>, but raise <code class=\"code\"><span class=\"constructor\">Invalid_argument</span></code>\n    if the given name has an empty extension.</p>\n\n</div>"],
["Map.S", "Map.S.html", "choose_opt", "Map.S.html#VALchoose_opt", "<div class=\"info\">\n<p>Return one binding of the given map, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n       the map is empty.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "choose_opt", "MoreLabels.Map.S.html#VALchoose_opt", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "choose_opt", "MoreLabels.Set.S.html#VALchoose_opt", ""],
["Set.S", "Set.S.html", "choose_opt", "Set.S.html#VALchoose_opt", "<div class=\"info\">\n<p>Return one element of the given set, or <code class=\"code\"><span class=\"constructor\">None</span></code> if\n        the set is empty.</p>\n\n</div>"],
["Event", "Event.html", "choose", "Event.html#VALchoose", "<div class=\"info\">\n<p><code class=\"code\">choose&nbsp;evl</code> returns the event that is the alternative of\n   all the events in the list <code class=\"code\">evl</code>.</p>\n\n</div>"],
["Map.S", "Map.S.html", "choose", "Map.S.html#VALchoose", "<div class=\"info\">\n<p>Return one binding of the given map, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if\n       the map is empty.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "choose", "MoreLabels.Map.S.html#VALchoose", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "choose", "MoreLabels.Set.S.html#VALchoose", ""],
["Set.S", "Set.S.html", "choose", "Set.S.html#VALchoose", "<div class=\"info\">\n<p>Return one element of the given set, or raise <code class=\"code\"><span class=\"constructor\">Not_found</span></code> if\n       the set is empty.</p>\n\n</div>"],
["Unix", "Unix.html", "chmod", "Unix.html#VALchmod", "<div class=\"info\">\n<p>Change the permissions of the named file.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "chmod", "UnixLabels.html#VALchmod", "<div class=\"info\">\n<p>Change the permissions of the named file.</p>\n\n</div>"],
["Filename", "Filename.html", "check_suffix", "Filename.html#VALcheck_suffix", "<div class=\"info\">\n<p><code class=\"code\">check_suffix&nbsp;name&nbsp;suff</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the filename <code class=\"code\">name</code>\n    ends with the suffix <code class=\"code\">suff</code>.</p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "check_key2", "Ephemeron.K2.html#VALcheck_key2", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "check_key1", "Ephemeron.K2.html#VALcheck_key1", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "check_key", "Ephemeron.K1.html#VALcheck_key", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key&nbsp;eph</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the key of the <code class=\"code\">eph</code>\n      is full, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is empty.</p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "check_key", "Ephemeron.Kn.html#VALcheck_key", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "check_key", "Obj.Ephemeron.html#VALcheck_key", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_key</code></a></p>\n\n</div>"],
["Format", "Format.html", "check_geometry", "Format.html#VALcheck_geometry", "<div class=\"info\">\n<p>Check if the formatter geometry is valid: <code class=\"code\">1&nbsp;&lt;&nbsp;max_indent&nbsp;&lt;&nbsp;margin</code></p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "check_data", "Ephemeron.K1.html#VALcheck_data", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data&nbsp;eph</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the data of the <code class=\"code\">eph</code>\n      is full, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is empty.</p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "check_data", "Ephemeron.K2.html#VALcheck_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data</code></a></p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "check_data", "Ephemeron.Kn.html#VALcheck_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "check_data", "Obj.Ephemeron.html#VALcheck_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALcheck_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.check_data</code></a></p>\n\n</div>"],
["Weak", "Weak.html", "check", "Weak.html#VALcheck", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.check&nbsp;ar&nbsp;n</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if the <code class=\"code\">n</code>th cell of <code class=\"code\">ar</code> is\n   full, <code class=\"code\"><span class=\"keyword\">false</span></code> if it is empty.</p>\n\n</div>"],
["Sys", "Sys.html", "chdir", "Sys.html#VALchdir", "<div class=\"info\">\n<p>Change the current working directory of the process.</p>\n\n</div>"],
["Unix", "Unix.html", "chdir", "Unix.html#VALchdir", "<div class=\"info\">\n<p>Change the process working directory.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "chdir", "UnixLabels.html#VALchdir", "<div class=\"info\">\n<p>Change the process working directory.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "char_of_int", "Pervasives.html#VALchar_of_int", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "char_of_iconv", "CamlinternalFormat.html#VALchar_of_iconv", ""],
["Bigarray", "Bigarray.html", "char", "Bigarray.html#VALchar", "<div class=\"info\">\n<p>As shown by the types of the values above,\n   Bigarrays of kind <code class=\"code\">float32_elt</code> and <code class=\"code\">float64_elt</code> are\n   accessed using the OCaml type <code class=\"code\">float</code>.</p>\n\n</div>"],
["Digest", "Digest.html", "channel", "Digest.html#VALchannel", "<div class=\"info\">\n<p>If <code class=\"code\">len</code> is nonnegative, <code class=\"code\"><span class=\"constructor\">Digest</span>.channel&nbsp;ic&nbsp;len</code> reads <code class=\"code\">len</code>\n   characters from channel <code class=\"code\">ic</code> and returns their digest, or raises\n   <code class=\"code\"><span class=\"constructor\">End_of_file</span></code> if end-of-file is reached before <code class=\"code\">len</code> characters\n   are read.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "change_layout", "Bigarray.Genarray.html#VALchange_layout", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Genarray</span>.change_layout&nbsp;a&nbsp;layout</code> returns a Bigarray with the\n      specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having\n      the same dimensions as <code class=\"code\">a</code>).</p>\n\n</div>"],
["Bigarray.Array0", "Bigarray.Array0.html", "change_layout", "Bigarray.Array0.html#VALchange_layout", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array0</span>.change_layout&nbsp;a&nbsp;layout</code> returns a Bigarray with the\n      specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code>.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "change_layout", "Bigarray.Array1.html#VALchange_layout", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array1</span>.change_layout&nbsp;a&nbsp;layout</code> returns a Bigarray with the\n      specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having\n      the same dimension as <code class=\"code\">a</code>).</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "change_layout", "Bigarray.Array2.html#VALchange_layout", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array2</span>.change_layout&nbsp;a&nbsp;layout</code> returns a Bigarray with the\n      specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having\n      the same dimensions as <code class=\"code\">a</code>).</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "change_layout", "Bigarray.Array3.html#VALchange_layout", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array3</span>.change_layout&nbsp;a&nbsp;layout</code> returns a Bigarray with the\n      specified <code class=\"code\">layout</code>, sharing the data with <code class=\"code\">a</code> (and hence having\n      the same dimensions as <code class=\"code\">a</code>).</p>\n\n</div>"],
["Float", "Float.html", "ceil", "Float.html#VALceil", "<div class=\"info\">\n<p>Round above to an integer value.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "ceil", "Pervasives.html#VALceil", ""],
["Sys", "Sys.html", "catch_break", "Sys.html#VALcatch_break", "<div class=\"info\">\n<p><code class=\"code\">catch_break</code> governs whether interactive interrupt (ctrl-C)\n   terminates the program or raises the <code class=\"code\"><span class=\"constructor\">Break</span></code> exception.</p>\n\n</div>"],
["Printexc", "Printexc.html", "catch", "Printexc.html#VALcatch", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.catch&nbsp;fn&nbsp;x</code> is similar to <a href=\"Printexc.html#VALprint\"><code class=\"code\"><span class=\"constructor\">Printexc</span>.print</code></a>, but\n   aborts the program with exit code 2 after printing the\n   uncaught exception.</p>\n\n</div>"],
["Bytes", "Bytes.html", "cat", "Bytes.html#VALcat", "<div class=\"info\">\n<p><code class=\"code\">cat&nbsp;s1&nbsp;s2</code> concatenates <code class=\"code\">s1</code> and <code class=\"code\">s2</code> and returns the result\n     as new byte sequence.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "cat", "BytesLabels.html#VALcat", "<div class=\"info\">\n<p><code class=\"code\">cat&nbsp;s1&nbsp;s2</code> concatenates <code class=\"code\">s1</code> and <code class=\"code\">s2</code> and returns the result\n     as new byte sequence.</p>\n\n</div>"],
["Map.S", "Map.S.html", "cardinal", "Map.S.html#VALcardinal", "<div class=\"info\">\n<p>Return the number of bindings of a map.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "cardinal", "MoreLabels.Map.S.html#VALcardinal", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "cardinal", "MoreLabels.Set.S.html#VALcardinal", ""],
["Set.S", "Set.S.html", "cardinal", "Set.S.html#VALcardinal", "<div class=\"info\">\n<p>Return the number of elements of a set.</p>\n\n</div>"],
["Bytes", "Bytes.html", "capitalize_ascii", "Bytes.html#VALcapitalize_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "capitalize_ascii", "BytesLabels.html#VALcapitalize_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n\n</div>"],
["StringLabels", "StringLabels.html", "capitalize_ascii", "StringLabels.html#VALcapitalize_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n\n</div>"],
["String", "String.html", "capitalize_ascii", "String.html#VALcapitalize_ascii", "<div class=\"info\">\n<p>Return a copy of the argument, with the first character set to uppercase,\n   using the US-ASCII character set.</p>\n\n</div>"],
["Bytes", "Bytes.html", "capitalize", "Bytes.html#VALcapitalize", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n\n</span></div>"],
["BytesLabels", "BytesLabels.html", "capitalize", "BytesLabels.html#VALcapitalize", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n\n</span></div>"],
["StringLabels", "StringLabels.html", "capitalize", "StringLabels.html#VALcapitalize", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n\n</span></div>"],
["String", "String.html", "capitalize", "String.html#VALcapitalize", "<div class=\"info\">\n<span class=\"deprecated\"><p>Return a copy of the argument, with the first character set to uppercase,\n   using the ISO Latin-1 (8859-1) character set..</p>\n\n</span></div>"],
["Bigarray", "Bigarray.html", "c_layout", "Bigarray.html#VALc_layout", ""],
["Digest", "Digest.html", "bytes", "Digest.html#VALbytes", "<div class=\"info\">\n<p>Return the digest of the given byte sequence.</p>\n\n</div>"],
["CamlinternalFormat", "CamlinternalFormat.html", "bufput_acc", "CamlinternalFormat.html#VALbufput_acc", ""],
["Scanf", "Scanf.html", "bscanf_format", "Scanf.html#VALbscanf_format", "<div class=\"info\">\n<p><code class=\"code\">bscanf_format&nbsp;ic&nbsp;fmt&nbsp;f</code> reads a format string token from the formatted\n    input channel <code class=\"code\">ic</code>, according to the given format string <code class=\"code\">fmt</code>, and\n    applies <code class=\"code\">f</code> to the resulting format string value.</p>\n\n</div>"],
["Scanf", "Scanf.html", "bscanf", "Scanf.html#VALbscanf", ""],
["Condition", "Condition.html", "broadcast", "Condition.html#VALbroadcast", "<div class=\"info\">\n<p><code class=\"code\">broadcast&nbsp;c</code> restarts all processes waiting on the\n   condition variable <code class=\"code\">c</code>.</p>\n\n</div>"],
["Format", "Format.html", "bprintf", "Format.html#VALbprintf", "<div class=\"info\">\n<span class=\"deprecated\"></span></div>"],
["Printf", "Printf.html", "bprintf", "Printf.html#VALbprintf", "<div class=\"info\">\n<p>Same as <a href=\"Printf.html#VALfprintf\"><code class=\"code\"><span class=\"constructor\">Printf</span>.fprintf</code></a>, but instead of printing on an output channel,\n   append the formatted arguments to the given extensible buffer\n   (see module <a href=\"Buffer.html\"><code class=\"code\"><span class=\"constructor\">Buffer</span></code></a>).</p>\n\n</div>"],
["Str", "Str.html", "bounded_split_delim", "Str.html#VALbounded_split_delim", "<div class=\"info\">\n<p>Same as <a href=\"Str.html#VALbounded_split\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split</code></a>, but occurrences of the\n   delimiter at the beginning and at the end of the string are\n   recognized and returned as empty strings in the result.</p>\n\n</div>"],
["Str", "Str.html", "bounded_split", "Str.html#VALbounded_split", "<div class=\"info\">\n<p>Same as <a href=\"Str.html#VALsplit\"><code class=\"code\"><span class=\"constructor\">Str</span>.split</code></a>, but splits into at most <code class=\"code\">n</code> substrings,\n   where <code class=\"code\">n</code> is the extra integer parameter.</p>\n\n</div>"],
["Str", "Str.html", "bounded_full_split", "Str.html#VALbounded_full_split", "<div class=\"info\">\n<p>Same as <a href=\"Str.html#VALbounded_split_delim\"><code class=\"code\"><span class=\"constructor\">Str</span>.bounded_split_delim</code></a>, but returns\n   the delimiters as well as the substrings contained between\n   delimiters.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "bool_of_string_opt", "Pervasives.html#VALbool_of_string_opt", ""],
["Pervasives", "Pervasives.html", "bool_of_string", "Pervasives.html#VALbool_of_string", ""],
["Random", "Random.html", "bool", "Random.html#VALbool", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Random</span>.bool&nbsp;()</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> or <code class=\"code\"><span class=\"keyword\">false</span></code> with probability 0.5 each.</p>\n\n</div>"],
["Random.State", "Random.State.html", "bool", "Random.State.html#VALbool", "<div class=\"info\">\n<p>These functions are the same as the basic functions, except that they\n      use (and update) the given PRNG state instead of the default one.</p>\n\n</div>"],
["Uchar", "Uchar.html", "bom", "Uchar.html#VALbom", "<div class=\"info\">\n<p><code class=\"code\">bom</code> is U+FEFF, the\n    <a href=\"http://unicode.org/glossary/#byte_order_mark\">byte order mark</a> (BOM)\n    character.</p>\n\n</div>"],
["Bytes", "Bytes.html", "blit_string", "Bytes.html#VALblit_string", "<div class=\"info\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from string\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>,\n    starting at index <code class=\"code\">dstoff</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "blit_string", "BytesLabels.html#VALblit_string", "<div class=\"info\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from string\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to byte sequence <code class=\"code\">dst</code>,\n    starting at index <code class=\"code\">dstoff</code>.</p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "blit_key2", "Ephemeron.K2.html#VALblit_key2", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "blit_key12", "Ephemeron.K2.html#VALblit_key12", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "blit_key1", "Ephemeron.K2.html#VALblit_key1", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "blit_key", "Ephemeron.K1.html#VALblit_key", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key&nbsp;eph1&nbsp;eph2</code> sets the key of <code class=\"code\">eph2</code> with\n      the key of <code class=\"code\">eph1</code>.</p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "blit_key", "Ephemeron.Kn.html#VALblit_key", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "blit_key", "Obj.Ephemeron.html#VALblit_key", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_key\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_key</code></a></p>\n\n</div>"],
["Ephemeron.K1", "Ephemeron.K1.html", "blit_data", "Ephemeron.K1.html#VALblit_data", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data&nbsp;eph1&nbsp;eph2</code> sets the data of <code class=\"code\">eph2</code> with\n      the data of <code class=\"code\">eph1</code>.</p>\n\n</div>"],
["Ephemeron.K2", "Ephemeron.K2.html", "blit_data", "Ephemeron.K2.html#VALblit_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data</code></a></p>\n\n</div>"],
["Ephemeron.Kn", "Ephemeron.Kn.html", "blit_data", "Ephemeron.Kn.html#VALblit_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data</code></a></p>\n\n</div>"],
["Obj.Ephemeron", "Obj.Ephemeron.html", "blit_data", "Obj.Ephemeron.html#VALblit_data", "<div class=\"info\">\n<p>Same as <a href=\"Ephemeron.K1.html#VALblit_data\"><code class=\"code\"><span class=\"constructor\">Ephemeron</span>.<span class=\"constructor\">K1</span>.blit_data</code></a></p>\n\n</div>"],
["Array", "Array.html", "blit", "Array.html#VALblit", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.blit&nbsp;v1&nbsp;o1&nbsp;v2&nbsp;o2&nbsp;len</code> copies <code class=\"code\">len</code> elements\n   from array <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to array <code class=\"code\">v2</code>,\n   starting at element number <code class=\"code\">o2</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "blit", "ArrayLabels.html#VALblit", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.blit&nbsp;v1&nbsp;o1&nbsp;v2&nbsp;o2&nbsp;len</code> copies <code class=\"code\">len</code> elements\n   from array <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to array <code class=\"code\">v2</code>,\n   starting at element number <code class=\"code\">o2</code>.</p>\n\n</div>"],
["Bigarray.Genarray", "Bigarray.Genarray.html", "blit", "Bigarray.Genarray.html#VALblit", "<div class=\"info\">\n<p>Copy all elements of a Bigarray in another Bigarray.</p>\n\n</div>"],
["Bigarray.Array0", "Bigarray.Array0.html", "blit", "Bigarray.Array0.html#VALblit", "<div class=\"info\">\n<p>Copy the first Bigarray to the second Bigarray.</p>\n\n</div>"],
["Bigarray.Array1", "Bigarray.Array1.html", "blit", "Bigarray.Array1.html#VALblit", "<div class=\"info\">\n<p>Copy the first Bigarray to the second Bigarray.</p>\n\n</div>"],
["Bigarray.Array2", "Bigarray.Array2.html", "blit", "Bigarray.Array2.html#VALblit", "<div class=\"info\">\n<p>Copy the first Bigarray to the second Bigarray.</p>\n\n</div>"],
["Bigarray.Array3", "Bigarray.Array3.html", "blit", "Bigarray.Array3.html#VALblit", "<div class=\"info\">\n<p>Copy the first Bigarray to the second Bigarray.</p>\n\n</div>"],
["Buffer", "Buffer.html", "blit", "Buffer.html#VALblit", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Buffer</span>.blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> characters from\n   the current contents of the buffer <code class=\"code\">src</code>, starting at offset <code class=\"code\">srcoff</code>\n   to <code class=\"code\">dst</code>, starting at character <code class=\"code\">dstoff</code>.</p>\n\n</div>"],
["Bytes", "Bytes.html", "blit", "Bytes.html#VALblit", "<div class=\"info\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from sequence\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to sequence <code class=\"code\">dst</code>, starting at\n    index <code class=\"code\">dstoff</code>.</p>\n\n</div>"],
["BytesLabels", "BytesLabels.html", "blit", "BytesLabels.html#VALblit", "<div class=\"info\">\n<p><code class=\"code\">blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes from sequence\n    <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>, to sequence <code class=\"code\">dst</code>, starting at\n    index <code class=\"code\">dstoff</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "blit", "Float.Array.html#VALblit", "<div class=\"info\">\n<p><code class=\"code\">blit&nbsp;v1&nbsp;o1&nbsp;v2&nbsp;o2&nbsp;len</code> copies <code class=\"code\">len</code> elements\n      from floatarray <code class=\"code\">v1</code>, starting at element number <code class=\"code\">o1</code>, to floatarray <code class=\"code\">v2</code>,\n      starting at element number <code class=\"code\">o2</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "blit", "Float.ArrayLabels.html#VALblit", ""],
["StringLabels", "StringLabels.html", "blit", "StringLabels.html#VALblit", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">String</span>.blit&nbsp;src&nbsp;srcoff&nbsp;dst&nbsp;dstoff&nbsp;len</code> copies <code class=\"code\">len</code> bytes\n   from the string <code class=\"code\">src</code>, starting at index <code class=\"code\">srcoff</code>,\n   to byte sequence <code class=\"code\">dst</code>, starting at character number <code class=\"code\">dstoff</code>.</p>\n\n</div>"],
["String", "String.html", "blit", "String.html#VALblit", "<div class=\"info\">\n<p>Same as <a href=\"Bytes.html#VALblit_string\"><code class=\"code\"><span class=\"constructor\">Bytes</span>.blit_string</code></a>.</p>\n\n</div>"],
["Weak", "Weak.html", "blit", "Weak.html#VALblit", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Weak</span>.blit&nbsp;ar1&nbsp;off1&nbsp;ar2&nbsp;off2&nbsp;len</code> copies <code class=\"code\">len</code> weak pointers\n   from <code class=\"code\">ar1</code> (starting at <code class=\"code\">off1</code>) to <code class=\"code\">ar2</code> (starting at <code class=\"code\">off2</code>).</p>\n\n</div>"],
["Int32", "Int32.html", "bits_of_float", "Int32.html#VALbits_of_float", "<div class=\"info\">\n<p>Return the internal representation of the given float according\n   to the IEEE 754 floating-point 'single format' bit layout.</p>\n\n</div>"],
["Int64", "Int64.html", "bits_of_float", "Int64.html#VALbits_of_float", "<div class=\"info\">\n<p>Return the internal representation of the given float according\n   to the IEEE 754 floating-point 'double format' bit layout.</p>\n\n</div>"],
["Random", "Random.html", "bits", "Random.html#VALbits", "<div class=\"info\">\n<p>Return 30 random bits in a nonnegative integer.</p>\n\n</div>"],
["Random.State", "Random.State.html", "bits", "Random.State.html#VALbits", ""],
["Map.S", "Map.S.html", "bindings", "Map.S.html#VALbindings", "<div class=\"info\">\n<p>Return the list of all bindings of the given map.</p>\n\n</div>"],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "bindings", "MoreLabels.Map.S.html#VALbindings", ""],
["Option", "Option.html", "bind", "Option.html#VALbind", "<div class=\"info\">\n<p><code class=\"code\">bind&nbsp;o&nbsp;f</code> is <code class=\"code\">f&nbsp;v</code> if <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">Some</span>&nbsp;v</code> and <code class=\"code\"><span class=\"constructor\">None</span></code> if <code class=\"code\">o</code> is <code class=\"code\"><span class=\"constructor\">None</span></code>.</p>\n\n</div>"],
["Result", "Result.html", "bind", "Result.html#VALbind", "<div class=\"info\">\n<p><code class=\"code\">bind&nbsp;r&nbsp;f</code> is <code class=\"code\">f&nbsp;v</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Ok</span>&nbsp;v</code> and <code class=\"code\">r</code> if <code class=\"code\">r</code> is <code class=\"code\"><span class=\"constructor\">Error</span>&nbsp;_</code>.</p>\n\n</div>"],
["Unix", "Unix.html", "bind", "Unix.html#VALbind", "<div class=\"info\">\n<p>Bind a socket to an address.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "bind", "UnixLabels.html#VALbind", "<div class=\"info\">\n<p>Bind a socket to an address.</p>\n\n</div>"],
["Sys", "Sys.html", "big_endian", "Sys.html#VALbig_endian", "<div class=\"info\">\n<p>Whether the machine currently executing the Caml program is big-endian.</p>\n\n</div>"],
["Scanf.Scanning", "Scanf.Scanning.html", "beginning_of_input", "Scanf.Scanning.html#VALbeginning_of_input", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Scanning</span>.beginning_of_input&nbsp;ic</code> tests the beginning of input condition\n    of the given <a href=\"Scanf.Scanning.html#TYPEin_channel\"><code class=\"code\"><span class=\"constructor\">Scanf</span>.<span class=\"constructor\">Scanning</span>.in_channel</code></a> formatted input channel.</p>\n\n</div>"],
["Filename", "Filename.html", "basename", "Filename.html#VALbasename", "<div class=\"info\">\n<p>Split a file name into directory name / base file name.</p>\n\n</div>"],
["Printexc", "Printexc.html", "backtrace_status", "Printexc.html#VALbacktrace_status", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Printexc</span>.backtrace_status()</code> returns <code class=\"code\"><span class=\"keyword\">true</span></code> if exception\n    backtraces are currently recorded, <code class=\"code\"><span class=\"keyword\">false</span></code> if not.</p>\n\n</div>"],
["Printexc", "Printexc.html", "backtrace_slots", "Printexc.html#VALbacktrace_slots", "<div class=\"info\">\n<p>Returns the slots of a raw backtrace, or <code class=\"code\"><span class=\"constructor\">None</span></code> if none of them\n    contain useful information.</p>\n\n</div>"],
["Sys", "Sys.html", "backend_type", "Sys.html#VALbackend_type", "<div class=\"info\">\n<p>Backend type  currently executing the OCaml program.</p>\n\n</div>"],
["Float", "Float.html", "atan2", "Float.html#VALatan2", "<div class=\"info\">\n<p><code class=\"code\">atan2&nbsp;y&nbsp;x</code> returns the arc tangent of <code class=\"code\">y&nbsp;/.&nbsp;x</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "atan2", "Pervasives.html#VALatan2", ""],
["Float", "Float.html", "atan", "Float.html#VALatan", "<div class=\"info\">\n<p>Arc tangent.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "atan", "Pervasives.html#VALatan", ""],
["Pervasives", "Pervasives.html", "at_exit", "Pervasives.html#VALat_exit", ""],
["List", "List.html", "assq_opt", "List.html#VALassq_opt", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALassoc_opt\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc_opt</code></a>, but uses physical equality instead of structural\n    equality to compare keys.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "assq_opt", "ListLabels.html#VALassq_opt", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALassoc_opt\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc_opt</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n\n</div>"],
["List", "List.html", "assq", "List.html#VALassq", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but uses physical equality instead of structural\n   equality to compare keys.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "assq", "ListLabels.html#VALassq", "<div class=\"info\">\n<p>Same as <a href=\"List.html#VALassoc\"><code class=\"code\"><span class=\"constructor\">List</span>.assoc</code></a>, but uses physical equality instead of\n   structural equality to compare keys.</p>\n\n</div>"],
["List", "List.html", "assoc_opt", "List.html#VALassoc_opt", "<div class=\"info\">\n<p><code class=\"code\">assoc_opt&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n   pairs <code class=\"code\">l</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "assoc_opt", "ListLabels.html#VALassoc_opt", "<div class=\"info\">\n<p><code class=\"code\">assoc_opt&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n    pairs <code class=\"code\">l</code>.</p>\n\n</div>"],
["List", "List.html", "assoc", "List.html#VALassoc", "<div class=\"info\">\n<p><code class=\"code\">assoc&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n   pairs <code class=\"code\">l</code>.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "assoc", "ListLabels.html#VALassoc", "<div class=\"info\">\n<p><code class=\"code\">assoc&nbsp;a&nbsp;l</code> returns the value associated with key <code class=\"code\">a</code> in the list of\n   pairs <code class=\"code\">l</code>.</p>\n\n</div>"],
["Format", "Format.html", "asprintf", "Format.html#VALasprintf", "<div class=\"info\">\n<p>Same as <code class=\"code\">printf</code> above, but instead of printing on a formatter,\n  returns a string containing the result of formatting the arguments.</p>\n\n</div>"],
["Float", "Float.html", "asin", "Float.html#VALasin", "<div class=\"info\">\n<p>Arc sine.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "asin", "Pervasives.html#VALasin", ""],
["Bigarray", "Bigarray.html", "array3_of_genarray", "Bigarray.html#VALarray3_of_genarray", "<div class=\"info\">\n<p>Return the three-dimensional Bigarray corresponding to the given\n   generic Bigarray.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "array2_of_genarray", "Bigarray.html#VALarray2_of_genarray", "<div class=\"info\">\n<p>Return the two-dimensional Bigarray corresponding to the given\n   generic Bigarray.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "array1_of_genarray", "Bigarray.html#VALarray1_of_genarray", "<div class=\"info\">\n<p>Return the one-dimensional Bigarray corresponding to the given\n   generic Bigarray.</p>\n\n</div>"],
["Bigarray", "Bigarray.html", "array0_of_genarray", "Bigarray.html#VALarray0_of_genarray", "<div class=\"info\">\n<p>Return the zero-dimensional Bigarray corresponding to the given\n   generic Bigarray.</p>\n\n</div>"],
["Sys", "Sys.html", "argv", "Sys.html#VALargv", "<div class=\"info\">\n<p>The command line arguments given to the process.</p>\n\n</div>"],
["Complex", "Complex.html", "arg", "Complex.html#VALarg", "<div class=\"info\">\n<p>Argument.</p>\n\n</div>"],
["Array", "Array.html", "append", "Array.html#VALappend", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.append&nbsp;v1&nbsp;v2</code> returns a fresh array containing the\n   concatenation of the arrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>.</p>\n\n</div>"],
["ArrayLabels", "ArrayLabels.html", "append", "ArrayLabels.html#VALappend", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Array</span>.append&nbsp;v1&nbsp;v2</code> returns a fresh array containing the\n   concatenation of the arrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>.</p>\n\n</div>"],
["Float.Array", "Float.Array.html", "append", "Float.Array.html#VALappend", "<div class=\"info\">\n<p><code class=\"code\">append&nbsp;v1&nbsp;v2</code> returns a fresh floatarray containing the\n     concatenation of the floatarrays <code class=\"code\">v1</code> and <code class=\"code\">v2</code>.</p>\n\n</div>"],
["Float.ArrayLabels", "Float.ArrayLabels.html", "append", "Float.ArrayLabels.html#VALappend", ""],
["List", "List.html", "append", "List.html#VALappend", "<div class=\"info\">\n<p>Concatenate two lists.</p>\n\n</div>"],
["ListLabels", "ListLabels.html", "append", "ListLabels.html#VALappend", "<div class=\"info\">\n<p>Catenate two lists.</p>\n\n</div>"],
["Event", "Event.html", "always", "Event.html#VALalways", "<div class=\"info\">\n<p><code class=\"code\">always&nbsp;v</code> returns an event that is always ready for\n   synchronization.</p>\n\n</div>"],
["Dynlink", "Dynlink.html", "allow_unsafe_modules", "Dynlink.html#VALallow_unsafe_modules", "<div class=\"info\">\n<p>Govern whether unsafe object files are allowed to be\n    dynamically linked.</p>\n\n</div>"],
["Dynlink", "Dynlink.html", "allow_only", "Dynlink.html#VALallow_only", "<div class=\"info\">\n<p><code class=\"code\">allow_only&nbsp;units</code> sets the list of allowed units to be the intersection\n    of the existing allowed units and the given list of units.</p>\n\n</div>"],
["Gc", "Gc.html", "allocated_bytes", "Gc.html#VALallocated_bytes", "<div class=\"info\">\n<p>Return the total number of bytes allocated since the program was\n   started.</p>\n\n</div>"],
["Dynlink", "Dynlink.html", "all_units", "Dynlink.html#VALall_units", "<div class=\"info\">\n<p>Return the list of compilation units that form the main program together\n    with those that have been dynamically loaded via <code class=\"code\">loadfile</code> (and not via\n    <code class=\"code\">loadfile_private</code>).</p>\n\n</div>"],
["Arg", "Arg.html", "align", "Arg.html#VALalign", "<div class=\"info\">\n<p>Align the documentation strings by inserting spaces at the first alignment\n    separator (tab or, if tab is not found, space), according to the length of\n    the keyword.</p>\n\n</div>"],
["Unix", "Unix.html", "alarm", "Unix.html#VALalarm", "<div class=\"info\">\n<p>Schedule a <code class=\"code\"><span class=\"constructor\">SIGALRM</span></code> signal after the given number of seconds.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "alarm", "UnixLabels.html#VALalarm", "<div class=\"info\">\n<p>Schedule a <code class=\"code\"><span class=\"constructor\">SIGALRM</span></code> signal after the given number of seconds.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_utf_8_uchar", "Buffer.html#VALadd_utf_8_uchar", "<div class=\"info\">\n<p><code class=\"code\">add_utf_8_uchar&nbsp;b&nbsp;u</code> appends the <a href=\"https://tools.ietf.org/html/rfc3629\">\n    UTF-8</a> encoding of <code class=\"code\">u</code> at the end of buffer <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_utf_16le_uchar", "Buffer.html#VALadd_utf_16le_uchar", "<div class=\"info\">\n<p><code class=\"code\">add_utf_16le_uchar&nbsp;b&nbsp;u</code> appends the\n    <a href=\"https://tools.ietf.org/html/rfc2781\">UTF-16LE</a> encoding of <code class=\"code\">u</code>\n    at the end of buffer <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_utf_16be_uchar", "Buffer.html#VALadd_utf_16be_uchar", "<div class=\"info\">\n<p><code class=\"code\">add_utf_16be_uchar&nbsp;b&nbsp;u</code> appends the\n    <a href=\"https://tools.ietf.org/html/rfc2781\">UTF-16BE</a> encoding of <code class=\"code\">u</code>\n    at the end of buffer <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_uint8", "Buffer.html#VALadd_uint8", "<div class=\"info\">\n<p><code class=\"code\">add_uint8&nbsp;b&nbsp;i</code> appends a binary unsigned 8-bit integer <code class=\"code\">i</code> to\n    <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_uint16_ne", "Buffer.html#VALadd_uint16_ne", "<div class=\"info\">\n<p><code class=\"code\">add_uint16_ne&nbsp;b&nbsp;i</code> appends a binary native-endian unsigned 16-bit\n    integer <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_uint16_le", "Buffer.html#VALadd_uint16_le", "<div class=\"info\">\n<p><code class=\"code\">add_uint16_le&nbsp;b&nbsp;i</code> appends a binary little-endian unsigned 16-bit\n    integer <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_uint16_be", "Buffer.html#VALadd_uint16_be", "<div class=\"info\">\n<p><code class=\"code\">add_uint16_be&nbsp;b&nbsp;i</code> appends a binary big-endian unsigned 16-bit\n    integer <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Format", "Format.html", "add_symbolic_output_item", "Format.html#VALadd_symbolic_output_item", "<div class=\"info\">\n<p><code class=\"code\">add_symbolic_output_item&nbsp;sob&nbsp;itm</code> adds item <code class=\"code\">itm</code> to buffer <code class=\"code\">sob</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_substring", "Buffer.html#VALadd_substring", "<div class=\"info\">\n<p><code class=\"code\">add_substring&nbsp;b&nbsp;s&nbsp;ofs&nbsp;len</code> takes <code class=\"code\">len</code> characters from offset\n   <code class=\"code\">ofs</code> in string <code class=\"code\">s</code> and appends them at the end of buffer <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_substitute", "Buffer.html#VALadd_substitute", "<div class=\"info\">\n<p><code class=\"code\">add_substitute&nbsp;b&nbsp;f&nbsp;s</code> appends the string pattern <code class=\"code\">s</code> at the end\n   of buffer <code class=\"code\">b</code> with substitution.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_subbytes", "Buffer.html#VALadd_subbytes", "<div class=\"info\">\n<p><code class=\"code\">add_subbytes&nbsp;b&nbsp;s&nbsp;ofs&nbsp;len</code> takes <code class=\"code\">len</code> characters from offset\n    <code class=\"code\">ofs</code> in byte sequence <code class=\"code\">s</code> and appends them at the end of buffer <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_string", "Buffer.html#VALadd_string", "<div class=\"info\">\n<p><code class=\"code\">add_string&nbsp;b&nbsp;s</code> appends the string <code class=\"code\">s</code> at the end of buffer <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_seq", "Buffer.html#VALadd_seq", "<div class=\"info\">\n<p>Add chars to the buffer</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "add_seq", "Hashtbl.html#VALadd_seq", "<div class=\"info\">\n<p>Add the given bindings to the table, using <a href=\"Hashtbl.html#VALadd\"><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.add</code></a></p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "add_seq", "Hashtbl.S.html#VALadd_seq", "<div class=\"info\">\n</div>"],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "add_seq", "Hashtbl.SeededS.html#VALadd_seq", "<div class=\"info\">\n</div>"],
["Map.S", "Map.S.html", "add_seq", "Map.S.html#VALadd_seq", "<div class=\"info\">\n<p>Add the given bindings to the map, in order.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "add_seq", "MoreLabels.Hashtbl.html#VALadd_seq", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "add_seq", "MoreLabels.Hashtbl.S.html#VALadd_seq", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "add_seq", "MoreLabels.Hashtbl.SeededS.html#VALadd_seq", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "add_seq", "MoreLabels.Map.S.html#VALadd_seq", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "add_seq", "MoreLabels.Set.S.html#VALadd_seq", ""],
["Queue", "Queue.html", "add_seq", "Queue.html#VALadd_seq", "<div class=\"info\">\n<p>Add the elements from the generator to the end of the queue</p>\n\n</div>"],
["Set.S", "Set.S.html", "add_seq", "Set.S.html#VALadd_seq", "<div class=\"info\">\n<p>Add the given elements to the set, in order.</p>\n\n</div>"],
["Stack", "Stack.html", "add_seq", "Stack.html#VALadd_seq", "<div class=\"info\">\n<p>Add the elements from the iterator on the top of the stack.</p>\n\n</div>"],
["Obj", "Obj.html", "add_offset", "Obj.html#VALadd_offset", ""],
["Buffer", "Buffer.html", "add_int8", "Buffer.html#VALadd_int8", "<div class=\"info\">\n<p><code class=\"code\">add_int8&nbsp;b&nbsp;i</code> appends a binary signed 8-bit integer <code class=\"code\">i</code> to\n    <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_int64_ne", "Buffer.html#VALadd_int64_ne", "<div class=\"info\">\n<p><code class=\"code\">add_int64_ne&nbsp;b&nbsp;i</code> appends a binary native-endian 64-bit integer\n    <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_int64_le", "Buffer.html#VALadd_int64_le", "<div class=\"info\">\n<p><code class=\"code\">add_int64_ne&nbsp;b&nbsp;i</code> appends a binary little-endian 64-bit integer\n    <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_int64_be", "Buffer.html#VALadd_int64_be", "<div class=\"info\">\n<p><code class=\"code\">add_int64_be&nbsp;b&nbsp;i</code> appends a binary big-endian 64-bit integer\n    <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_int32_ne", "Buffer.html#VALadd_int32_ne", "<div class=\"info\">\n<p><code class=\"code\">add_int32_ne&nbsp;b&nbsp;i</code> appends a binary native-endian 32-bit integer\n    <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_int32_le", "Buffer.html#VALadd_int32_le", "<div class=\"info\">\n<p><code class=\"code\">add_int32_le&nbsp;b&nbsp;i</code> appends a binary little-endian 32-bit integer\n    <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_int32_be", "Buffer.html#VALadd_int32_be", "<div class=\"info\">\n<p><code class=\"code\">add_int32_be&nbsp;b&nbsp;i</code> appends a binary big-endian 32-bit integer\n    <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_int16_ne", "Buffer.html#VALadd_int16_ne", "<div class=\"info\">\n<p><code class=\"code\">add_int16_ne&nbsp;b&nbsp;i</code> appends a binary native-endian signed 16-bit\n    integer <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_int16_le", "Buffer.html#VALadd_int16_le", "<div class=\"info\">\n<p><code class=\"code\">add_int16_le&nbsp;b&nbsp;i</code> appends a binary little-endian signed 16-bit\n    integer <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_int16_be", "Buffer.html#VALadd_int16_be", "<div class=\"info\">\n<p><code class=\"code\">add_int16_be&nbsp;b&nbsp;i</code> appends a binary big-endian signed 16-bit\n    integer <code class=\"code\">i</code> to <code class=\"code\">b</code>.</p>\n\n</div>"],
["CamlinternalOO", "CamlinternalOO.html", "add_initializer", "CamlinternalOO.html#VALadd_initializer", ""],
["CamlinternalFormat", "CamlinternalFormat.html", "add_in_char_set", "CamlinternalFormat.html#VALadd_in_char_set", ""],
["Buffer", "Buffer.html", "add_char", "Buffer.html#VALadd_char", "<div class=\"info\">\n<p><code class=\"code\">add_char&nbsp;b&nbsp;c</code> appends the character <code class=\"code\">c</code> at the end of buffer <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_channel", "Buffer.html#VALadd_channel", "<div class=\"info\">\n<p><code class=\"code\">add_channel&nbsp;b&nbsp;ic&nbsp;n</code> reads at most <code class=\"code\">n</code> characters from the\n   input channel <code class=\"code\">ic</code> and stores them at the end of buffer <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_bytes", "Buffer.html#VALadd_bytes", "<div class=\"info\">\n<p><code class=\"code\">add_bytes&nbsp;b&nbsp;s</code> appends the byte sequence <code class=\"code\">s</code> at the end of buffer <code class=\"code\">b</code>.</p>\n\n</div>"],
["Buffer", "Buffer.html", "add_buffer", "Buffer.html#VALadd_buffer", "<div class=\"info\">\n<p><code class=\"code\">add_buffer&nbsp;b1&nbsp;b2</code> appends the current contents of buffer <code class=\"code\">b2</code>\n   at the end of buffer <code class=\"code\">b1</code>.</p>\n\n</div>"],
["Complex", "Complex.html", "add", "Complex.html#VALadd", "<div class=\"info\">\n<p>Addition</p>\n\n</div>"],
["Float", "Float.html", "add", "Float.html#VALadd", "<div class=\"info\">\n<p>Floating-point addition.</p>\n\n</div>"],
["Hashtbl", "Hashtbl.html", "add", "Hashtbl.html#VALadd", "<div class=\"info\">\n<p><code class=\"code\"><span class=\"constructor\">Hashtbl</span>.add&nbsp;tbl&nbsp;x&nbsp;y</code> adds a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code> in table <code class=\"code\">tbl</code>.</p>\n\n</div>"],
["Hashtbl.S", "Hashtbl.S.html", "add", "Hashtbl.S.html#VALadd", ""],
["Hashtbl.SeededS", "Hashtbl.SeededS.html", "add", "Hashtbl.SeededS.html#VALadd", ""],
["Int", "Int.html", "add", "Int.html#VALadd", "<div class=\"info\">\n<p><code class=\"code\">add&nbsp;x&nbsp;y</code> is the addition <code class=\"code\">x&nbsp;+&nbsp;y</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "add", "Int32.html#VALadd", "<div class=\"info\">\n<p>Addition.</p>\n\n</div>"],
["Int64", "Int64.html", "add", "Int64.html#VALadd", "<div class=\"info\">\n<p>Addition.</p>\n\n</div>"],
["Map.S", "Map.S.html", "add", "Map.S.html#VALadd", "<div class=\"info\">\n<p><code class=\"code\">add&nbsp;x&nbsp;y&nbsp;m</code> returns a map containing the same bindings as\n       <code class=\"code\">m</code>, plus a binding of <code class=\"code\">x</code> to <code class=\"code\">y</code>.</p>\n\n</div>"],
["MoreLabels.Hashtbl", "MoreLabels.Hashtbl.html", "add", "MoreLabels.Hashtbl.html#VALadd", ""],
["MoreLabels.Hashtbl.S", "MoreLabels.Hashtbl.S.html", "add", "MoreLabels.Hashtbl.S.html#VALadd", ""],
["MoreLabels.Hashtbl.SeededS", "MoreLabels.Hashtbl.SeededS.html", "add", "MoreLabels.Hashtbl.SeededS.html#VALadd", ""],
["MoreLabels.Map.S", "MoreLabels.Map.S.html", "add", "MoreLabels.Map.S.html#VALadd", ""],
["MoreLabels.Set.S", "MoreLabels.Set.S.html", "add", "MoreLabels.Set.S.html#VALadd", ""],
["Nativeint", "Nativeint.html", "add", "Nativeint.html#VALadd", "<div class=\"info\">\n<p>Addition.</p>\n\n</div>"],
["Queue", "Queue.html", "add", "Queue.html#VALadd", "<div class=\"info\">\n<p><code class=\"code\">add&nbsp;x&nbsp;q</code> adds the element <code class=\"code\">x</code> at the end of the queue <code class=\"code\">q</code>.</p>\n\n</div>"],
["Set.S", "Set.S.html", "add", "Set.S.html#VALadd", "<div class=\"info\">\n<p><code class=\"code\">add&nbsp;x&nbsp;s</code> returns a set containing all elements of <code class=\"code\">s</code>,\n       plus <code class=\"code\">x</code>.</p>\n\n</div>"],
["Weak.S", "Weak.S.html", "add", "Weak.S.html#VALadd", "<div class=\"info\">\n<p><code class=\"code\">add&nbsp;t&nbsp;x</code> adds <code class=\"code\">x</code> to <code class=\"code\">t</code>.</p>\n\n</div>"],
["Dynlink", "Dynlink.html", "adapt_filename", "Dynlink.html#VALadapt_filename", "<div class=\"info\">\n<p>In bytecode, the identity function.</p>\n\n</div>"],
["Float", "Float.html", "acos", "Float.html#VALacos", "<div class=\"info\">\n<p>Arc cosine.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "acos", "Pervasives.html#VALacos", ""],
["Unix", "Unix.html", "access", "Unix.html#VALaccess", "<div class=\"info\">\n<p>Check that the process has the given permissions over the named file.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "access", "UnixLabels.html#VALaccess", "<div class=\"info\">\n<p>Check that the process has the given permissions over the named\n   file.</p>\n\n</div>"],
["ThreadUnix", "ThreadUnix.html", "accept", "ThreadUnix.html#VALaccept", ""],
["Unix", "Unix.html", "accept", "Unix.html#VALaccept", "<div class=\"info\">\n<p>Accept connections on the given socket.</p>\n\n</div>"],
["UnixLabels", "UnixLabels.html", "accept", "UnixLabels.html#VALaccept", "<div class=\"info\">\n<p>Accept connections on the given socket.</p>\n\n</div>"],
["Obj", "Obj.html", "abstract_tag", "Obj.html#VALabstract_tag", ""],
["Pervasives", "Pervasives.html", "abs_float", "Pervasives.html#VALabs_float", ""],
["Float", "Float.html", "abs", "Float.html#VALabs", "<div class=\"info\">\n<p><code class=\"code\">abs&nbsp;f</code> returns the absolute value of <code class=\"code\">f</code>.</p>\n\n</div>"],
["Int", "Int.html", "abs", "Int.html#VALabs", "<div class=\"info\">\n<p><code class=\"code\">abs&nbsp;x</code> is the absolute value of <code class=\"code\">x</code>.</p>\n\n</div>"],
["Int32", "Int32.html", "abs", "Int32.html#VALabs", "<div class=\"info\">\n<p>Return the absolute value of its argument.</p>\n\n</div>"],
["Int64", "Int64.html", "abs", "Int64.html#VALabs", "<div class=\"info\">\n<p>Return the absolute value of its argument.</p>\n\n</div>"],
["Nativeint", "Nativeint.html", "abs", "Nativeint.html#VALabs", "<div class=\"info\">\n<p>Return the absolute value of its argument.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "abs", "Pervasives.html#VALabs", ""],
["Pervasives", "Pervasives.html", "__POS__", "Pervasives.html#VAL__POS__", ""],
["Pervasives", "Pervasives.html", "__POS_OF__", "Pervasives.html#VAL__POS_OF__", ""],
["Pervasives", "Pervasives.html", "__MODULE__", "Pervasives.html#VAL__MODULE__", ""],
["Pervasives", "Pervasives.html", "__LOC__", "Pervasives.html#VAL__LOC__", ""],
["Pervasives", "Pervasives.html", "__LOC_OF__", "Pervasives.html#VAL__LOC_OF__", ""],
["Pervasives", "Pervasives.html", "__LINE__", "Pervasives.html#VAL__LINE__", ""],
["Pervasives", "Pervasives.html", "__LINE_OF__", "Pervasives.html#VAL__LINE_OF__", ""],
["Pervasives", "Pervasives.html", "__FILE__", "Pervasives.html#VAL__FILE__", ""],
["Pervasives", "Pervasives.html", "(~-.)", "Pervasives.html#VAL(~-.)", ""],
["Pervasives", "Pervasives.html", "(~-)", "Pervasives.html#VAL(~-)", ""],
["Pervasives", "Pervasives.html", "(~+.)", "Pervasives.html#VAL(~+.)", ""],
["Pervasives", "Pervasives.html", "(~+)", "Pervasives.html#VAL(~+)", ""],
["Bool", "Bool.html", "(||)", "Bool.html#VAL(||)", "<div class=\"info\">\n<p><code class=\"code\">e0&nbsp;<span class=\"keywordsign\">||</span>&nbsp;e1</code> is the lazy boolean disjunction of expressions <code class=\"code\">e0</code> and <code class=\"code\">e1</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "(||)", "Pervasives.html#VAL(||)", ""],
["Pervasives", "Pervasives.html", "(|>)", "Pervasives.html#VAL(|>)", ""],
["Pervasives", "Pervasives.html", "(or)", "Pervasives.html#VAL(or)", ""],
["Pervasives", "Pervasives.html", "(mod)", "Pervasives.html#VAL(mod)", ""],
["Pervasives", "Pervasives.html", "(lxor)", "Pervasives.html#VAL(lxor)", ""],
["Pervasives", "Pervasives.html", "(lsr)", "Pervasives.html#VAL(lsr)", ""],
["Pervasives", "Pervasives.html", "(lsl)", "Pervasives.html#VAL(lsl)", ""],
["Pervasives", "Pervasives.html", "(lor)", "Pervasives.html#VAL(lor)", ""],
["Pervasives", "Pervasives.html", "(land)", "Pervasives.html#VAL(land)", ""],
["Pervasives", "Pervasives.html", "(asr)", "Pervasives.html#VAL(asr)", ""],
["Pervasives", "Pervasives.html", "(^^)", "Pervasives.html#VAL(^^)", ""],
["Pervasives", "Pervasives.html", "(^)", "Pervasives.html#VAL(^)", ""],
["Pervasives", "Pervasives.html", "(@@)", "Pervasives.html#VAL(@@)", ""],
["Pervasives", "Pervasives.html", "(@)", "Pervasives.html#VAL(@)", ""],
["Pervasives", "Pervasives.html", "(>=)", "Pervasives.html#VAL(>=)", ""],
["Pervasives", "Pervasives.html", "(>)", "Pervasives.html#VAL(>)", ""],
["Pervasives", "Pervasives.html", "(==)", "Pervasives.html#VAL(==)", ""],
["Pervasives", "Pervasives.html", "(=)", "Pervasives.html#VAL(=)", ""],
["Pervasives", "Pervasives.html", "(<>)", "Pervasives.html#VAL(<>)", ""],
["Pervasives", "Pervasives.html", "(<=)", "Pervasives.html#VAL(<=)", ""],
["Pervasives", "Pervasives.html", "(<)", "Pervasives.html#VAL(<)", ""],
["Pervasives", "Pervasives.html", "(:=)", "Pervasives.html#VAL(:=)", ""],
["Pervasives", "Pervasives.html", "(/.)", "Pervasives.html#VAL(/.)", ""],
["Pervasives", "Pervasives.html", "(/)", "Pervasives.html#VAL(/)", ""],
["Pervasives", "Pervasives.html", "(-.)", "Pervasives.html#VAL(-.)", ""],
["Pervasives", "Pervasives.html", "(-)", "Pervasives.html#VAL(-)", ""],
["Pervasives", "Pervasives.html", "(+.)", "Pervasives.html#VAL(+.)", ""],
["Pervasives", "Pervasives.html", "(+)", "Pervasives.html#VAL(+)", ""],
["Pervasives", "Pervasives.html", "(&)", "Pervasives.html#VAL(&)", ""],
["Bool", "Bool.html", "(&&)", "Bool.html#VAL(&&)", "<div class=\"info\">\n<p><code class=\"code\">e0&nbsp;<span class=\"keywordsign\">&amp;&amp;</span>&nbsp;e1</code> is the lazy boolean conjunction of expressions <code class=\"code\">e0</code> and <code class=\"code\">e1</code>.</p>\n\n</div>"],
["Pervasives", "Pervasives.html", "(&&)", "Pervasives.html#VAL(&&)", ""],
["Pervasives", "Pervasives.html", "(!=)", "Pervasives.html#VAL(!=)", ""],
["Pervasives", "Pervasives.html", "(!)", "Pervasives.html#VAL(!)", ""],
["Pervasives", "Pervasives.html", "( *. )", "Pervasives.html#VAL( *. )", ""],
["Pervasives", "Pervasives.html", "( ** )", "Pervasives.html#VAL( ** )", ""],
["Pervasives", "Pervasives.html", "( * )", "Pervasives.html#VAL( * )", ""],
]
